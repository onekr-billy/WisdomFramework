<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FrameworkV2</name>
    </assembly>
    <members>
        <member name="T:Framework.Components.SerializerHelper">
            <summary>
            序列化类
            </summary>
        </member>
        <member name="M:Framework.Components.SerializerHelper.#cctor">
            <summary>
            Static Constructor is used to set the CanBinarySerialize value only once for the given security policy
            </summary>
        </member>
        <member name="F:Framework.Components.SerializerHelper.CanBinarySerialize">
            <summary>
            Readonly value indicating if Binary Serialization (using BinaryFormatter) is allowed
            </summary>
        </member>
        <member name="M:Framework.Components.SerializerHelper.ConvertToBytes(System.Object)">
            <summary>
            Converts a .NET object to a byte array. Before the conversion happens, a check with 
            Serializer.CanBinarySerialize will be made
            </summary>
            <param name="objectToConvert">Object to convert</param>
            <returns>A byte arry representing the object paramter. Null will be return if CanBinarySerialize is false</returns>
        </member>
        <member name="M:Framework.Components.SerializerHelper.SaveAsBinary(System.Object,System.String)">
            <summary>
            Saves an object to disk as a binary file. 
            </summary>
            <param name="objectToSave">Object to Save</param>
            <param name="path">Location of the file</param>
            <returns>true if the save was succesful.</returns>
        </member>
        <member name="M:Framework.Components.SerializerHelper.ConvertToString(System.Object)">
            <summary>
            Converts a .NET object to a string of XML. The object must be marked as Serializable or an exception
            will be thrown.
            </summary>
            <param name="objectToConvert">Object to convert</param>
            <returns>A xml string represting the object parameter. The return value will be null of the object is null</returns>
        </member>
        <member name="M:Framework.Components.SerializerHelper.SaveAsXML(System.Object,System.String)">
            <summary>
            序列化到XML文件
            </summary>
            <param name="objectToConvert"></param>
            <param name="path"></param>
        </member>
        <member name="M:Framework.Components.SerializerHelper.ConvertToObject(System.Byte[])">
            <summary>
            Converts a byte array to a .NET object. You will need to cast this object back to its expected type. 
            If the array is null or empty, it will return null.
            </summary>
            <param name="byteArray">An array of bytes represeting a .NET object</param>
            <returns>The byte array converted to an object or null if the value of byteArray is null or empty</returns>
        </member>
        <member name="M:Framework.Components.SerializerHelper.ConvertFileToObject(System.String,System.Type)">
            <summary>
            反序列化，文件转换为对象
            </summary>
            <param name="path"></param>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.SerializerHelper.ConvertToObject(System.String,System.Type)">
            <summary>
            Converts a string of xml to the supplied object type. 
            </summary>
            <param name="xml">Xml representing a .NET object</param>
            <param name="objectType">The type of object which the xml represents</param>
            <returns>A instance of object or null if the value of xml is null or empty</returns>
        </member>
        <member name="M:Framework.Components.SerializerHelper.LoadBinaryFile(System.String)">
            <summary>
            加载二进制文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.SerializerHelper.ConvertToNameValueCollection(System.String,System.String)">
            <summary>
            Creates a NameValueCollection from two string. The first contains the key pattern and the second contains the values
            spaced according to the kys
            </summary>
            <param name="keys">Keys for the namevalue collection</param>
            <param name="values">Values for the namevalue collection</param>
            <returns>A NVC populated based on the keys and vaules</returns>
            <example>
            string keys = "key1:S:0:3:key2:S:3:2:";
            string values = "12345";
            This would result in a NameValueCollection with two keys (Key1 and Key2) with the values 123 and 45
            </example>
        </member>
        <member name="M:Framework.Components.SerializerHelper.ConvertFromNameValueCollection(System.Collections.Specialized.NameValueCollection,System.String@,System.String@)">
            <summary>
            Creates a the keys and values strings for the simple serialization based on a NameValueCollection
            </summary>
            <param name="nvc">NameValueCollection to convert</param>
            <param name="keys">the ref string will contain the keys based on the key format</param>
            <param name="values">the ref string will contain all the values of the namevaluecollection</param>
        </member>
        <member name="T:Framework.Search.CompareTypeDal">
            <summary>
            关于比较类型的处理器
            </summary>
        </member>
        <member name="M:Framework.Search.CompareTypeDal.GetCompareType(System.String)">
            <summary>
            获得比较符类型
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Message.MessageStatus">
            <summary>
            消息状态的枚举类型
            采用二进制码的形式，用于将来同时传多值
            </summary>
        </member>
        <member name="F:Framework.Message.MessageStatus.NotSet">
            <summary>
            未设置
            </summary>
        </member>
        <member name="F:Framework.Message.MessageStatus.Draft">
            <summary>
            草稿
            </summary>
        </member>
        <member name="F:Framework.Message.MessageStatus.ReadyToSend">
            <summary>
            准备发送
            </summary>
        </member>
        <member name="F:Framework.Message.MessageStatus.Sended">
            <summary>
            已发送
            </summary>
        </member>
        <member name="F:Framework.Message.MessageStatus.NotRead">
            <summary>
            未读
            </summary>
        </member>
        <member name="F:Framework.Message.MessageStatus.Read">
            <summary>
            已读
            </summary>
        </member>
        <member name="F:Framework.Message.MessageStatus.Deleted">
            <summary>
            已删除
            </summary>
        </member>
        <member name="F:Framework.Message.MessageStatus.SendError">
            <summary>
            发送失败
            </summary>
        </member>
        <member name="F:Framework.Message.MessageStatus.Replied">
            <summary>
            已经回复
            </summary>
        </member>
        <member name="T:Framework.Message.MessageCategory">
            <summary>
            消息类别
            </summary>
        </member>
        <member name="F:Framework.Message.MessageCategory.Log">
            <summary>
            日志消息
            </summary>
        </member>
        <member name="F:Framework.Message.MessageCategory.Exception">
            <summary>
            异常消息
            </summary>
        </member>
        <member name="F:Framework.Message.MessageCategory.Announce">
            <summary>
            公告信息
            </summary>
        </member>
        <member name="F:Framework.Message.MessageCategory.InstantMessage">
            <summary>
            即时消息
            </summary>
        </member>
        <member name="F:Framework.Message.MessageCategory.Email">
            <summary>
            邮件
            </summary>
        </member>
        <member name="F:Framework.Message.MessageCategory.Gbook">
            <summary>
            留言
            </summary>
        </member>
        <member name="F:Framework.Message.MessageCategory.SiteMessage">
            <summary>
            站内消息
            </summary>
        </member>
        <member name="F:Framework.Message.MessageCategory.SMS">
            <summary>
            短信
            </summary>
        </member>
        <member name="F:Framework.Message.MessageCategory.Other">
            <summary>
            其它
            </summary>
        </member>
        <member name="F:Framework.Message.MessageCategory.SuperStarSystemMessage">
            <summary>
            家有大明星系统消息
            </summary>
        </member>
        <member name="F:Framework.Message.MessageCategory.SuperStarMessage">
            <summary>
            家有大明星消息
            </summary>
        </member>
        <member name="F:Framework.Message.MessageCategory.SuperStarSalutation">
            <summary>
            家有大明星打招呼
            </summary>
        </member>
        <member name="T:Framework.Components.SFEvents">
            <summary>
            重要事件处理
            如需要同步或后继处理的事情，一般是异步处理的事情
            </summary>
        </member>
        <member name="T:Framework.Enumerations.CreateUserStatus">
            <summary>
            Indicates the return status for creating a new user.
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CreateUserStatus.UnknownFailure">
            <summary>
            The user was not created for some unknown reason.
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CreateUserStatus.Created">
            <summary>
            The user's account was successfully created.
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CreateUserStatus.DuplicateUsername">
            <summary>
            The user's account was not created because the user's desired username is already being used.
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CreateUserStatus.DuplicateEmailAddress">
            <summary>
            The user's account was not created because the user's email address is already being used.
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CreateUserStatus.InvalidFirstCharacter">
            <summary>
            The user's account was not created because the user's desired username did not being with an
            alphabetic character.
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CreateUserStatus.DisallowedUsername">
            <summary>
            The username has been previously disallowed.
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CreateUserStatus.Updated">
            <summary>
            The user record has been updated
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CreateUserStatus.Deleted">
            <summary>
            The user record has been deleted
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CreateUserStatus.InvalidQuestionAnswer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CreateUserStatus.InvalidPassword">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CreateUserStatus.InvalidEmail">
            <summary>
            The user's account was not created because the user's email was invalid.
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CreateUserStatus.InvalidUserName">
            <summary>
            The user's account was not created because the user's username was invalid.
            </summary>
        </member>
        <member name="T:Framework.Securities.SHA1">
            <summary>
            SHA1加密
            </summary>
        </member>
        <member name="T:Framework.Securities.EncryptProvider">
            <summary>
            加密方法提供者抽象类
            </summary>
        </member>
        <member name="M:Framework.Securities.EncryptProvider.GeneratePasswordSalt">
            <summary>
            生成一个Password Salt
            </summary>
            <returns>Password Salt</returns>
        </member>
        <member name="M:Framework.Securities.EncryptProvider.GeneratePasswordHash(System.String,System.String)">
            <summary>
            生成密码Hash字符串
            </summary>
            <param name="password">原始密码</param>
            <param name="passwordSalt">Password Salt</param>
            <returns>密码Hash字符串</returns>
        </member>
        <member name="M:Framework.Securities.EncryptProvider.GeneratePasswordAnswerHash(System.String)">
            <summary>
            生成密码安全问题答案Hash字符串
            </summary>
            <param name="answer">密码安全问题答案</param>
            <returns>密码安全问题答案Hash字符串</returns>
        </member>
        <member name="M:Framework.Securities.EncryptProvider.DecodePassword(System.String,System.String)">
            <summary>
            解密密码
            一般比较难于实现
            </summary>
            <param name="passwordHash">密码Hash字符串</param>
            <param name="passwordSalt">Password Salt</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Securities.SHA1.GeneratePasswordSalt">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Securities.SHA1.GeneratePasswordHash(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="password"></param>
            <param name="passwordSalt"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Securities.SHA1.GeneratePasswordAnswerHash(System.String)">
            <summary>
            
            </summary>
            <param name="answer"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Securities.SHA1.DecodePassword(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="passwordHash"></param>
            <param name="passwordSalt"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Search.WordMatch">
            <summary>
            字词匹配情况
            </summary>
        </member>
        <member name="M:Framework.Search.WordMatch.GetMostMatchWord(System.String,System.Collections.Generic.IDictionary{System.Int32,System.String})">
            <summary>
            从一个字符串的数组中找到最匹配的值
            </summary>
            <param name="word"></param>
            <param name="word2s"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.WordMatch.GetWordMatchValue(System.String,System.String)">
            <summary>
            匹配两个字串的相关度
            </summary>
            <param name="word1"></param>
            <param name="word2"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.WordMatch.GetFullTexts(System.String)">
            <summary>
            对一个字串进行分词
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.WordMatch.GetWordMatchValue(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            匹配两个字串组相关度
            </summary>
            <param name="word1"></param>
            <param name="word2"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Components.HeadPortraitEntity">
            <summary>
            用户头像
            </summary>
        </member>
        <member name="T:Framework.Components.CooperateUser">
            <summary>
            合作伙伴用户
            </summary>
        </member>
        <member name="T:CompressionSink.myClientSinkProvider">
            <summary>
            客户端接收组件
            </summary>
        </member>
        <member name="M:CompressionSink.myClientSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            客户端接收组件
            </summary>
            <param name="properties"></param>
            <param name="providerData"></param>
        </member>
        <member name="T:Framework.Components.PublishLogSet">
            <summary>
            Summary description for UserSet.
            </summary>
        </member>
        <member name="T:Framework.Components.PublishLog">
            <summary>
            自动发布日志
            </summary>
        </member>
        <member name="P:Framework.Components.PublishLog.PublishLogID">
            <summary>
            发布日志ID
            </summary>
        </member>
        <member name="P:Framework.Components.PublishLog.BeginTime">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:Framework.Components.PublishLog.IP">
            <summary>
            发布动作IP
            </summary>
        </member>
        <member name="P:Framework.Components.PublishLog.CellID">
            <summary>
            栏位ID
            </summary>
        </member>
        <member name="P:Framework.Components.PublishLog.RelationCellID">
            <summary>
            相关栏位ID
            </summary>
        </member>
        <member name="P:Framework.Components.PublishLog.CategoryID">
            <summary>
            分类ID
            </summary>
        </member>
        <member name="P:Framework.Components.PublishLog.BeginContentID">
            <summary>
            开始的内容ID
            </summary>
        </member>
        <member name="P:Framework.Components.PublishLog.EndContentID">
            <summary>
            结束的内容ID
            </summary>
        </member>
        <member name="P:Framework.Components.PublishLog.EndTime">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="P:Framework.Components.PublishLog.CellDataGetType">
            <summary>
            CellDataGetType
            </summary>
        </member>
        <member name="P:Framework.Components.PublishLog.PackageID">
            <summary>
            PackageID
            </summary>
        </member>
        <member name="T:Framework.Account.PaymentPackage">
            <summary>
            一个完整的划价或支付数据
            </summary>
        </member>
        <member name="F:Framework.Account.PaymentPackage.packages">
            <summary>
            歌曲音乐包列表
            </summary>
        </member>
        <member name="M:Framework.Account.PaymentPackage.Calculate">
            <summary>
            汇总数据
            </summary>
        </member>
        <member name="M:Framework.Account.PaymentPackage.AddPackages(Framework.Account.SongItems)">
            <summary>
            添加音乐包，主要是为了排重
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Framework.Account.PaymentPackage.RemovePackages(Framework.Account.SongItems)">
            <summary>
            添加Packages，主要是为了排重
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Framework.Account.PaymentPackage.#ctor(System.String,System.Int32,System.String,System.DateTime,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="id1"></param>
            <param name="userid1"></param>
            <param name="source1"></param>
            <param name="time1"></param>
            <param name="serial1"></param>
        </member>
        <member name="P:Framework.Account.PaymentPackage.Id">
            <summary>
            划价数据的ID
            </summary>
        </member>
        <member name="P:Framework.Account.PaymentPackage.UserID">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:Framework.Account.PaymentPackage.Source">
            <summary>
            来源，如网站，客户端，合作商等，需系统进行统一管理。
            </summary>
        </member>
        <member name="P:Framework.Account.PaymentPackage.Time">
            <summary>
            划价时间
            </summary>
        </member>
        <member name="P:Framework.Account.PaymentPackage.Serial">
            <summary>
            认证的序列号
            </summary>
        </member>
        <member name="P:Framework.Account.PaymentPackage.SongItems">
            <summary>
            歌曲列表，指用户单选的歌曲，不是含在音乐包内的。列表内歌曲可能与音乐包的重复。
            </summary>
        </member>
        <member name="P:Framework.Account.PaymentPackage.Packages">
            <summary>
            音乐包列表
            </summary>
        </member>
        <member name="P:Framework.Account.PaymentPackage.PaymentItems">
            <summary>
            其它支付项目
            </summary>
        </member>
        <member name="P:Framework.Account.PaymentPackage.Payment">
            <summary>
            支付结果
            </summary>
        </member>
        <member name="T:Framework.Components.DateHelper">
            <summary>
            日期转换及处理组件
            </summary>
        </member>
        <member name="M:Framework.Components.DateHelper.WeekEnumToInt(System.DayOfWeek)">
            <summary>
            将星期转成整数
            </summary>
            <param name="week"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.DateHelper.GetStrDate">
            <summary>
            获得日期的字串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.DateHelper.GetQuarter(System.Int32)">
            <summary>
            获得季度数据
            </summary>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.DateHelper.GetLastDayOfWeek(System.DateTime)">
            <summary>
            返回当周最后一天日期
            </summary>
            <param name="date">参与运算的日期</param>
            <returns>当周最后一天日期</returns>
        </member>
        <member name="M:Framework.Components.DateHelper.GetFirstDayOfWeek(System.DateTime)">
            <summary>
            返回当周第一天日期
            </summary>
            <param name="date">参与运算的日期</param>
            <returns>当周第一天日期</returns>
        </member>
        <member name="M:Framework.Components.DateHelper.GetFirstDayOfMonth(System.DateTime)">
            <summary>
            返回月份第一天日期
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.DateHelper.GetLastDayOfMonth(System.DateTime)">
            <summary>
            返回月份最后一天日期
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.DateHelper.GetFirstDayOfYear(System.DateTime)">
            <summary>
            返回年份第一天日期
            </summary>
            <param name="date">日期</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.DateHelper.GetLastDayOfYear(System.DateTime)">
            <summary>
            返回年份最后一天日期
            </summary>
            <param name="date">日期</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.DateHelper.GetFirstDayOfYear(System.Int32)">
            <summary>
            返回年份第一天日期
            </summary>
            <param name="date">年份</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.DateHelper.GetLastDayOfYear(System.Int32)">
            <summary>
            返回年份最后一天日期
            </summary>
            <param name="date">年份</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.DateHelper.GetDaysOfYear(System.Int32)">
            <summary>
            返回本年有多少天
            </summary>
            <param name="iYear">年份</param>
            <returns>本年的天数</returns>
        </member>
        <member name="M:Framework.Components.DateHelper.GetDaysOfYear(System.DateTime)">
            <summary>
            本年有多少天
            </summary>
            <param name="dt">日期</param>
            <returns>本天在当年的天数</returns>
        </member>
        <member name="M:Framework.Components.DateHelper.GetDaysOfMonth(System.Int32,System.Int32)">
            <summary>
            本月有多少天
            </summary>
            <param name="iYear">年</param>
            <param name="Month">月</param>
            <returns>天数</returns>
        </member>
        <member name="M:Framework.Components.DateHelper.GetDaysOfMonth(System.DateTime)">
            <summary>
            本月有多少天
            </summary>
            <param name="dt">日期</param>
            <returns>天数</returns>
        </member>
        <member name="M:Framework.Components.DateHelper.GetWeekNameOfDay(System.DateTime)">
            <summary>
            返回当前日期的星期名称
            </summary>
            <param name="dt">日期</param>
            <returns>星期名称</returns>
        </member>
        <member name="M:Framework.Components.DateHelper.GetWeekNumberOfDay(System.DateTime)">
            <summary>
            返回当前日期的星期编号
            </summary>
            <param name="dt">日期</param>
            <returns>星期数字编号</returns>
        </member>
        <member name="M:Framework.Components.DateHelper.DateDiff(System.DateTime)">
            <summary>
            获取指定时间与当前时间差
            </summary>
            <param name="time">时间</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.DateHelper.DateDiff(System.DateTime,System.DateTime)">
            <summary>
            获取指定时间的时间差
            </summary>
            <param name="date1">时间1</param>
            <param name="date2">时间2</param>
            <param name="suffix">后缀</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.DateHelper.GetFormattedDate(System.Object)">
            <summary>
            返回格式化后的时间
            </summary>
            <param name="date">时间</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.DateHelper.GetFormattedDate(System.DateTime)">
            <summary>
            返回格式化后的时间
            </summary>
            <param name="date">时间</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.DateHelper.GetFormattedDate(System.DateTime,System.String)">
            <summary>
            返回格式化后的时间
            </summary>
            <param name="date">时间</param>
            <param name="format">格式</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.DateHelper.DateDiff(System.String,System.DateTime,System.DateTime)">
            <summary>
            返回两个日期之间相差的时间数
            </summary>
            <param name="howToCompare">比较什么</param>
            <param name="startDate">开始时间</param>
            <param name="endDate">结束时间</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.DateHelper.IsRuYear(System.DateTime)">
            <summary>
            判断当前日期所属的年份是否是闰年，私有函数
            </summary>
            <param name="idt">日期</param>
            <returns>是闰年：True ，不是闰年：False</returns>
        </member>
        <member name="M:Framework.Components.DateHelper.IsRuYear(System.Int32)">
            <summary>
            判断当前年份是否是闰年，私有函数
            </summary>
            <param name="dt">年份</param>
            <returns>是闰年：True ，不是闰年：False</returns>
        </member>
        <member name="M:Framework.Components.DateHelper.ConvertStringToDate(System.String)">
            <summary>
            将输入的字符串转化为日期。如果字符串的格式非法，则返回当前日期。
            </summary>
            <param name="strInput">输入字符串</param>
            <returns>日期对象</returns>
        </member>
        <member name="M:Framework.Components.DateHelper.ConvertStringToDate(System.String,System.DateTime)">
            <summary>
             将输入的字符串转化为日期。如果字符串的格式非法，则返回当前日期。
            </summary>
            <param name="strInput"></param>
            <param name="defaultDate"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.DateHelper.ConvertDateToString(System.DateTime,System.String)">
            <summary>
            将日期对象转化为格式字符串
            </summary>
            <param name="oDateTime">日期对象</param>
            <param name="strFormat">
            格式：
            	"SHORTDATE"===短日期
            	"LONGDATE"==长日期
            	其它====自定义格式
            </param>
            <returns>日期字符串</returns>
        </member>
        <member name="M:Framework.Components.DateHelper.IsDateTime(System.String)">
            <summary>
            判断是否为合法日期，必须大于1800年1月1日
            </summary>
            <param name="strDate">输入日期字符串</param>
            <returns>True/False</returns>
        </member>
        <member name="M:Framework.Components.DateHelper.AddTime(System.String)">
            <summary>
            将日期加减
            </summary>
            <param name="timeLength"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.DateHelper.AddTime(System.DateTime,System.String)">
            <summary>
            加减日期
            </summary>
            <param name="source"></param>
            <param name="timeLength"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.DateHelper.HowMonthDay(System.Int32,System.Int32)">
            <summary>
            当前月有多少天
            </summary>
            <param name="y"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.DateHelper.GetWeek(System.Int32,System.Int32,System.DateTime@,System.DateTime@)">
            <summary>
            得到一年中的某周的起始日和截止日
            年 nYear
            周数 nNumWeek
            周始 out dtWeekStart
            周终 out dtWeekeEnd
            </summary>
            <param name="nYear"></param>
            <param name="nNumWeek"></param>
            <param name="dtWeekStart"></param>
            <param name="dtWeekeEnd"></param>
        </member>
        <member name="M:Framework.Components.DateHelper.GetYearWeekCount(System.Int32)">
            <summary>
            求某年有多少周
            返回 int
            </summary>
            <param name="strYear"></param>
            <returns>int</returns>
        </member>
        <member name="M:Framework.Components.DateHelper.WeekOfYear(System.DateTime)">
            <summary>
            求当前日期是一年的中第几周
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.DateHelper.GetFromString(System.DateTime,System.String)">
            <summary>
            从字串中取得时间
            </summary>
            <param name="cDate">默认日期，如果字串无法被正确转换时</param>
            <param name="datetimeString">需要转换的字串</param>
            <returns></returns>
        </member>
        <member name="P:Framework.Components.DateHelper.FirstDayOfCurrentMonth">
            <summary>
            本月第一天日期
            </summary>
        </member>
        <member name="P:Framework.Components.DateHelper.LastDayOfCurrentMonth">
            <summary>
            本月最后一天日期
            </summary>
        </member>
        <member name="P:Framework.Components.DateHelper.FirstDayOfCurrentWeek">
            <summary>
            本周第一天日期
            </summary>
        </member>
        <member name="P:Framework.Components.DateHelper.LastDayOfCurrentWeek">
            <summary>
            本周最后一天日期
            </summary>
        </member>
        <member name="T:Framework.Server.DataProviders">
            <summary>
            DataProviders is responible for loading and managing the various CS DataProviders
            </summary>
        </member>
        <member name="M:Framework.Server.DataProviders.#ctor">
            <summary>
            This class can not be instantiated
            </summary>
        </member>
        <member name="M:Framework.Server.DataProviders.CreateInstance(Framework.Components.Provider)">
            <summary>
            Creates an instance of the provider using Activator. This instance should be
            cached since it is an expesivie operation
            </summary>
        </member>
        <member name="M:Framework.Server.DataProviders.CreateConstructorInfo(Framework.Components.Provider)">
            <summary>
            Creates and Caches the ConstructorInfo for the specified provider. 
            </summary>
        </member>
        <member name="M:Framework.Server.DataProviders.Invoke(Framework.Components.Provider)">
            <summary>
            Creates an instance of the specified provider using the Cached
            ConstructorInfo from CreateConstructorInfo
            </summary>
        </member>
        <member name="T:Framework.Server.ServerConfiguration">
            <summary>
            应用服务器端系统配置
            配置文件名默认为：ＳｅｒｖｅｒＣｏｎｆｉｇｕｒａｔｉｏｎ．ｘｍｌ
            位于应用服务器主程序运行目录下。
            </summary>
        </member>
        <member name="F:Framework.Server.ServerConfiguration.CacheKey">
            <summary>
            缓冲ＫＥＹ
            </summary>
        </member>
        <member name="F:Framework.Server.ServerConfiguration.extensions">
            <summary>
            扩展程序部分
            </summary>
        </member>
        <member name="F:Framework.Server.ServerConfiguration.providers">
            <summary>
            适配器部分配置
            </summary>
        </member>
        <member name="F:Framework.Server.ServerConfiguration.services">
            <summary>
            服务程序部分配置
            </summary>
        </member>
        <member name="F:Framework.Server.ServerConfiguration.jobs">
            <summary>
            计划任务配置
            </summary>
        </member>
        <member name="F:Framework.Server.ServerConfiguration.messageProviders">
            <summary>
            消息处理
            </summary>
        </member>
        <member name="F:Framework.Server.ServerConfiguration.permissions">
            <summary>
            权限验证配置
            </summary>
        </member>
        <member name="F:Framework.Server.ServerConfiguration.timeMachines">
            <summary>
            刷卡机配置
            </summary>
        </member>
        <member name="F:Framework.Server.ServerConfiguration.defaultRoles">
            <summary>
            用户默认角色成员
            </summary>
        </member>
        <member name="F:Framework.Server.ServerConfiguration.cacheFactor">
            <summary>
            缓冲时间
            </summary>
        </member>
        <member name="F:Framework.Server.ServerConfiguration.maxCustomersPerUser">
            <summary>
            每个用户最多的客户数
            </summary>
        </member>
        <member name="F:Framework.Server.ServerConfiguration.maxDaysToTrack">
            <summary>
            每个客户最多跟单天数
            </summary>
        </member>
        <member name="F:Framework.Server.ServerConfiguration.XmlDoc">
            <summary>
            ＤＯＣ文档
            </summary>
        </member>
        <member name="M:Framework.Server.ServerConfiguration.GetConfigSection(System.String)">
            <summary>
            Enables reading of the configuration file's XML without reloading the file
            </summary>
            <param name="nodePath"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.ServerConfiguration.LoadValuesFromConfigurationXml">
            <summary>
            Loads the forums configuration values.
            </summary>
            
        </member>
        <member name="M:Framework.Server.ServerConfiguration.GetProviders(System.Xml.XmlNode,System.Collections.Generic.IDictionary{System.String,Framework.Components.Provider})">
            <summary>
            Internal class used to populate the available providers.
            </summary>
            <param name="node">XmlNode of the providers to add/remove/clear.</param>
            
        </member>
        <member name="M:Framework.Server.ServerConfiguration.GetMessageProviders(System.Xml.XmlNode,System.Collections.Generic.IDictionary{System.String,Framework.Components.Provider})">
            <summary>
            Internal class used to populate the available providers.
            </summary>
            <param name="node">XmlNode of the providers to add/remove/clear.</param>
            
        </member>
        <member name="P:Framework.Server.ServerConfiguration.Providers">
            <summary>
            数据提供器配置
            </summary>
        </member>
        <member name="P:Framework.Server.ServerConfiguration.Extensions">
            <summary>
            扩展模块配置
            </summary>
        </member>
        <member name="P:Framework.Server.ServerConfiguration.Services">
            <summary>
            服务程序配置
            </summary>
        </member>
        <member name="P:Framework.Server.ServerConfiguration.Jobs">
            <summary>
            后台任务配置
            </summary>
        </member>
        <member name="P:Framework.Server.ServerConfiguration.Permissions">
            <summary>
            权限验证模块配置
            </summary>
        </member>
        <member name="P:Framework.Server.ServerConfiguration.TimeMachines">
            <summary>
            刷卡机配置
            </summary>
        </member>
        <member name="P:Framework.Server.ServerConfiguration.MessageProviders">
            <summary>
            消息处理提供器
            </summary>
        </member>
        <member name="P:Framework.Server.ServerConfiguration.DefaultRoles">
            <summary>
            默认用户角色
            </summary>
        </member>
        <member name="P:Framework.Server.ServerConfiguration.CacheFactor">
            <summary>
            缓冲时间
            </summary>
        </member>
        <member name="P:Framework.Server.ServerConfiguration.MaxCustomersPerUser">
            <summary>
            每用户最多客户数
            </summary>
        </member>
        <member name="P:Framework.Server.ServerConfiguration.MaxDaysToTrack">
            <summary>
            每客户最多跟单天数
            </summary>
        </member>
        <member name="P:Framework.Server.ServerConfiguration.ServerPort">
            <summary>
            远程服务器的端口
            </summary>
        </member>
        <member name="T:Framework.Search.FilterItemTreeCollection">
            <summary>
            查询条件组成的树的集合
            </summary>
        </member>
        <member name="M:Framework.Search.FilterItemTreeCollection.Add(Framework.Search.FilterItemTree)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Framework.Search.FilterItemTreeCollection.Remove(Framework.Search.FilterItemTree)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Framework.Search.FilterItemTreeCollection.Insert(System.Int32,Framework.Search.FilterItemTree)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Framework.Search.FilterItemTreeCollection.Contains(Framework.Search.FilterItemTree)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.FilterItemTreeCollection.IndexOf(Framework.Search.FilterItemTree)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Framework.Search.FilterItemTreeCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Remoting.RemoteObjectConfigurationHandler">
            <summary>
            远程对象配置处理者
            </summary>
        </member>
        <member name="M:Framework.Remoting.RemoteObjectConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            创建配置对象，执行ConfigurationManager.GetSection("xpath")方法时调用
            </summary>
        </member>
        <member name="T:Framework.Message.ExceptionMessageEntity">
            <summary>
            异样信息
            </summary>
        </member>
        <member name="T:Framework.Message.MessageEntity">
            <summary>
            消息实体类
            </summary>
        </member>
        <member name="T:Framework.Components.ExtendedAttributes">
            <summary>
            采用序列化的方式扩展属性，对于需要扩展属性的实体必须继承此类
            </summary>
        </member>
        <member name="M:Framework.Components.ExtendedAttributes.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Framework.Components.ExtendedAttributes.#ctor(System.String)">
            <summary>
            构造函数，指定字串来构造
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Framework.Components.ExtendedAttributes.ClearAttributes">
            <summary>
            清除所有属性
            </summary>
        </member>
        <member name="M:Framework.Components.ExtendedAttributes.GetExtendedAttribute(System.String)">
            <summary>
            获取扩展属性值
            </summary>
        </member>
        <member name="M:Framework.Components.ExtendedAttributes.SetExtendedAttribute(System.String,System.String)">
            <summary>
            设置扩展属性值
            </summary>
        </member>
        <member name="M:Framework.Components.ExtendedAttributes.SetDateTime(System.String,System.DateTime)">
            <summary>
            存储日期
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Framework.Components.ExtendedAttributes.SetInt(System.String,System.Int32)">
            <summary>
            存储日期
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Framework.Components.ExtendedAttributes.GetDateTime(System.String,System.DateTime)">
            <summary>
            从中读取日期型值
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ExtendedAttributes.GetBool(System.String,System.Boolean)">
            <summary>
            获取扩展属性值（布尔类型值）
            </summary>
        </member>
        <member name="M:Framework.Components.ExtendedAttributes.GetInt(System.String,System.Int32)">
            <summary>
            获取扩展属性值（整型值）
            </summary>
        </member>
        <member name="M:Framework.Components.ExtendedAttributes.GetString(System.String,System.String)">
            <summary>
            获取扩展属性值（字符串类型值）
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ExtendedAttributes.GetSerializerData">
            <summary>
            将扩展属性集合序列化为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ExtendedAttributes.SetSerializerData(System.String)">
            <summary>
            将字符串反序列化扩展属性集合
            </summary>
        </member>
        <member name="M:Framework.Components.ExtendedAttributes.GetBinarySerializerData">
            <summary>
            获得二进制的序列化
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ExtendedAttributes.SetSerializerBinaryData(System.Byte[])">
            <summary>
            将二进制序列化
            </summary>
            <param name="serializedExtendedAttributes"></param>
        </member>
        <member name="P:Framework.Components.ExtendedAttributes.ExtendedAttributesCount">
            <summary>
            获取扩展属性个数
            </summary>
        </member>
        <member name="F:Framework.Message.MessageEntity.readers">
            <summary>
            读取记录
            </summary>
        </member>
        <member name="M:Framework.Message.MessageEntity.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Framework.Message.MessageEntity.#ctor(System.Xml.XmlNode)">
            <summary>
            构造函数
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Framework.Message.MessageEntity.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="key"></param>
            <param name="innerbody"></param>
        </member>
        <member name="M:Framework.Message.MessageEntity.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageEntity.CompareTo(System.Object)">
            <summary>
            比较对像
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Framework.Message.MessageEntity.SenderID">
            <summary>
            发送者ID
            </summary>
        </member>
        <member name="P:Framework.Message.MessageEntity.IsRead">
            <summary>
            是否已读，这个与接收者有关
            </summary>
        </member>
        <member name="P:Framework.Message.MessageEntity.IsSended">
            <summary>
            是否已经发送
            </summary>
        </member>
        <member name="P:Framework.Message.MessageEntity.ReceiveIDs">
            <summary>
            接收者ID
            </summary>
        </member>
        <member name="P:Framework.Message.MessageEntity.ID">
            <summary>
            消息ID
            </summary>
        </member>
        <member name="P:Framework.Message.MessageEntity.SettingsID">
            <summary>
            站点ID
            </summary>
        </member>
        <member name="P:Framework.Message.MessageEntity.Category">
            <summary>
            消息类别
            </summary>
        </member>
        <member name="P:Framework.Message.MessageEntity.Status">
            <summary>
            消息状态：草稿、准备发送、已经发送、已读、已删除等
            </summary>
        </member>
        <member name="P:Framework.Message.MessageEntity.Title">
            <summary>
            消息标题
            </summary>
        </member>
        <member name="P:Framework.Message.MessageEntity.Body">
            <summary>
            消息内容
            </summary>
        </member>
        <member name="P:Framework.Message.MessageEntity.DateSended">
            <summary>
            发送日期，发送者查看信息时，此列作为发送日期看待，作为收件人来查看信息时，此列作为阅读日期看待
            </summary>
        </member>
        <member name="P:Framework.Message.MessageEntity.Storage">
            <summary>
            消息存储位置
            </summary>
        </member>
        <member name="P:Framework.Message.MessageEntity.From">
            <summary>
            来自于
            </summary>
        </member>
        <member name="P:Framework.Message.MessageEntity.To">
            <summary>
            到哪里，发送接收方
            </summary>
        </member>
        <member name="P:Framework.Message.MessageEntity.DateCreated">
            <summary>
            创建日期。作为发件人来看，此列作为创建日期，作为收件人来看，此列作为接收日期
            </summary>
        </member>
        <member name="P:Framework.Message.MessageEntity.Data">
            <summary>
            序列化的扩展属性
            </summary>
        </member>
        <member name="P:Framework.Message.MessageEntity.DateToSend">
            <summary>
            计划发送日期
            </summary>
        </member>
        <member name="P:Framework.Message.MessageEntity.NumberOfTries">
            <summary>
            重试次数
            </summary>
        </member>
        <member name="P:Framework.Message.MessageEntity.InformationOfError">
            <summary>
            发送发生错误时的错误信息
            </summary>
        </member>
        <member name="P:Framework.Message.MessageEntity.ReplyID">
            <summary>
            此贴回复的原贴ID
            </summary>
        </member>
        <member name="P:Framework.Message.MessageEntity.MessageReplied">
            <summary>
            回复的原消息，当ReplyID大于零时才有效
            </summary>
        </member>
        <member name="P:Framework.Message.MessageEntity.RepliedCount">
            <summary>
            针对此贴回复的数量
            如果对此消息没有回复，值为0，有回复，值>0
            </summary>
        </member>
        <member name="P:Framework.Message.MessageEntity.IsReplied">
            <summary>
            消息接收人是否对消息已经回复
            </summary>
        </member>
        <member name="M:Framework.Message.ExceptionMessageEntity.#ctor">
            <summary>
            异样消息
            </summary>
        </member>
        <member name="M:Framework.Message.ExceptionMessageEntity.#ctor(Framework.Components.SFException,Framework.Message.MessageStorage)">
            <summary>
            异样消息
            </summary>
        </member>
        <member name="M:Framework.Message.ExceptionMessageEntity.#ctor(System.Exception,Framework.Message.MessageStorage)">
            <summary>
            异样消息
            </summary>
        </member>
        <member name="T:Framework.Message.MessageConfiguration">
            <summary>
            消息配置（可配置不同类型的消息记录到不同的存储位置，待实现）
            <example>
            <code>
            <configuration>
                <configSections>
            			    <section name="message" type="Sinomen.Message.MessageConfigurationHandler, Sinomen.Framework" />
                </configSections>
                <system.web>
            	......
                </system.web>
                <message>
                            <providers>
                              <add name="TextMessageProvider" type="Client.Message.TextMessageProvider, FrameworkV2" fileName="c:\eventlog.txt" />
                                <add name="DBMessageProvider" type="Client.Message.DBMessageProvider, FrameworkV2" connectionString="mssql_message" databaseOwnerStringName = "sa" />
                                <add name="EmailMessageProvider" type="Client.Message.EmailMessageProvider, FrameworkV2" from="webmaster@houniao.com" uid="webmaster" to="" smtp="mail.houniao.com" port="25" pwd="" attachement="/attachement/"  />
                                 <add name="MsmqMessageProvider" type="Client.Message.MsmqMessageProvider,FrameworkV2" />
                                <add name="XMLMessageProvider" type="Client.Message.XMLMessageProvider, FrameworkV2" fileName="log.xml" />
                                <add name="EventLogMessageProvider" type="Client.Message.EventLogMessageProvider, FrameworkV2" logName="Framework" source="SF"  />
                                <add name="MessageTemplateProvider" type="Client.Message.ClientMessageTemplateProvider,FrameworkV2" />
                            </providers>
                </message>
            </configuration>
            </code>
            </example>
            </summary>
        </member>
        <member name="T:Framework.Configuration.ConfigurationWithProvidersBase">
            <summary>
            采用提供者模型模块（带有<Providers/> <Events />这类子节点）的配置基类
            </summary>
        </member>
        <member name="T:Framework.Configuration.ConfigurationBase">
            <summary>
            配置基类
            </summary>
        </member>
        <member name="M:Framework.Configuration.ConfigurationBase.GetConfig(System.Type,System.String,System.String,System.Boolean)">
            <summary>
            读取指定的配置节
            </summary>
            <param name="type"></param>
            <param name="rootName"></param>
            <param name="sectionName"></param>
            <param name="useCache"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Configuration.ConfigurationBase.GetConfig(System.Type,System.Xml.XmlNode,System.Boolean)">
            <summary>
            读取指定的配置节
            </summary>
            <param name="type"></param>
            <param name="node"></param>
            <param name="useCache"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Configuration.ConfigurationBase.LoadValuesFromConfigurationXml(System.Xml.XmlNode)">
            <summary>
            从XML中解析配置值
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Framework.Configuration.ConfigurationBase.GetConfig``1(System.Xml.XmlNode,System.Boolean)">
            <summary>
            通过指定的节获得配置项（泛型）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="section"></param>
            <param name="useCache"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Configuration.ConfigurationBase.GetConfig``1(System.String,System.String,System.Boolean)">
            <summary>
            通过指定的节获得配置项（泛型）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rootName"></param>
            <param name="sectionName"></param>
            <param name="useCache"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Configuration.ConfigurationBase.GetStringAttribute(System.Xml.XmlAttributeCollection,System.String,System.String)">
            <summary>
            获取属性（string类型）
            </summary>
        </member>
        <member name="M:Framework.Configuration.ConfigurationBase.GetIntAttribute(System.Xml.XmlAttributeCollection,System.String,System.Int32)">
            <summary>
            获取属性（int类型）
            </summary>
        </member>
        <member name="M:Framework.Configuration.ConfigurationBase.GetBoolAttribute(System.Xml.XmlAttributeCollection,System.String,System.Boolean)">
            <summary>
            获取属性（bool类型）
            </summary>
        </member>
        <member name="M:Framework.Configuration.ConfigurationBase.LoadModules``1(System.Xml.XmlNode)">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Configuration.ConfigurationWithProvidersBase.providers">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Configuration.ConfigurationWithProvidersBase.attributes">
            <summary>
            扩展属性
            </summary>
        </member>
        <member name="F:Framework.Configuration.ConfigurationWithProvidersBase.defaultProvider">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Configuration.ConfigurationWithProvidersBase.configName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Framework.Configuration.ConfigurationWithProvidersBase.LoadValuesFromConfigurationXml(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Framework.Configuration.ConfigurationWithProvidersBase.LoadConfigsFromConfigurationXml(System.Xml.XmlNode)">
            <summary>
            需要重写的方法，用来读取其他节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Framework.Configuration.ConfigurationWithProvidersBase.GetProviders(System.Xml.XmlNode)">
            <summary>
            获取Providers配置
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:Framework.Configuration.ConfigurationWithProvidersBase.DefaultProvider">
            <summary>
            默认提供者
            </summary>
        </member>
        <member name="P:Framework.Configuration.ConfigurationWithProvidersBase.Providers">
            <summary>
            Providers
            </summary>
        </member>
        <member name="P:Framework.Configuration.ConfigurationWithProvidersBase.ConfigName">
            <summary>
            配置名
            </summary>
        </member>
        <member name="M:Framework.Message.MessageConfiguration.GetConfig">
            <summary>
            获得配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageConfiguration.LoadConfigsFromConfigurationXml(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Framework.Components.ExceptionEntity">
            <summary>
            异常实体类
            </summary>
        </member>
        <member name="P:Framework.Components.ExceptionEntity.SettingsID">
            <summary>
            站点
            </summary>
        </member>
        <member name="P:Framework.Components.ExceptionEntity.Message">
            <summary>
            异常消息
            </summary>
        </member>
        <member name="P:Framework.Components.ExceptionEntity.UserAgent">
            <summary>
            客户端浏览器的原始用户代理信息
            </summary>
        </member>
        <member name="P:Framework.Components.ExceptionEntity.ExceptionHash">
            <summary>
            Exception Hash
            </summary>
        </member>
        <member name="P:Framework.Components.ExceptionEntity.Category">
            <summary>
            异常类型
            </summary>
        </member>
        <member name="P:Framework.Components.ExceptionEntity.IPAddress">
            <summary>
            远程客户端的 IP 主机地址
            </summary>
        </member>
        <member name="P:Framework.Components.ExceptionEntity.HttpReferrer">
            <summary>
            客户端上次请求的 URL 的信息，该请求链接到当前的 URL
            </summary>
        </member>
        <member name="P:Framework.Components.ExceptionEntity.HttpVerb">
            <summary>
            客户端使用的 HTTP 数据传输方法（GET 或 POST）
            </summary>
        </member>
        <member name="P:Framework.Components.ExceptionEntity.HttpPathAndQuery">
            <summary>
            用问号 (?) 分隔的 System.Uri.AbsolutePath 和 System.Uri.Query 属性
            </summary>
        </member>
        <member name="P:Framework.Components.ExceptionEntity.DateCreated">
            <summary>
            生成日期
            </summary>
        </member>
        <member name="P:Framework.Components.ExceptionEntity.DateLastOccurred">
            <summary>
            最后发生日期
            </summary>
        </member>
        <member name="P:Framework.Components.ExceptionEntity.Frequency">
            <summary>
            发生同样异样次数
            </summary>
        </member>
        <member name="P:Framework.Components.ExceptionEntity.LoggedStackTrace">
            <summary>
            Ｔrace
            </summary>
        </member>
        <member name="P:Framework.Components.ExceptionEntity.ExceptionID">
            <summary>
            异常ID
            </summary>
        </member>
        <member name="P:Framework.Components.ExceptionEntity.StackTrace">
            <summary>
            错误的代码段信息
            </summary>
        </member>
        <member name="T:Framework.Configuration.JobConfiguration">
            <summary>
            计划任务的配置信息处理
            </summary>
        </member>
        <member name="F:Framework.Configuration.JobConfiguration.jobs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Configuration.JobConfiguration.minutes">
            <summary>
            默认执行时间间隔
            </summary>
        </member>
        <member name="F:Framework.Configuration.JobConfiguration.singleThread">
            <summary>
            默认是否单线程
            </summary>
        </member>
        <member name="F:Framework.Configuration.JobConfiguration.configName">
            <summary>
            配置名称
            </summary>
        </member>
        <member name="M:Framework.Configuration.JobConfiguration.LoadValuesFromConfigurationXml(System.Xml.XmlNode)">
            <summary>
            从ＸＭＬ中读取相关配置
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Framework.Configuration.JobConfiguration.LoadConfigsFromConfigurationXml(System.Xml.XmlNode)">
            <summary>
            需要重写的方法，用来读取其他节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Framework.Configuration.JobConfiguration.GetJobs(System.Xml.XmlNode)">
            <summary>
            获取JOB配置
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:Framework.Configuration.JobConfiguration.Jobs">
            <summary>
            Providers
            </summary>
        </member>
        <member name="P:Framework.Configuration.JobConfiguration.ConfigName">
            <summary>
            配置名
            </summary>
        </member>
        <member name="T:Framework.Events.SFEventLog">
            <summary>
            事件内容
            </summary>
        </member>
        <member name="P:Framework.Events.SFEventLog.EventLogID">
            <summary>
            EventLogID
            </summary>
        </member>
        <member name="P:Framework.Events.SFEventLog.EventID">
            <summary>
            EventID
            </summary>
        </member>
        <member name="P:Framework.Events.SFEventLog.SettingsID">
            <summary>
            SettingsID
            </summary>
        </member>
        <member name="P:Framework.Events.SFEventLog.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="P:Framework.Events.SFEventLog.Category">
            <summary>
            Category
            </summary>
        </member>
        <member name="P:Framework.Events.SFEventLog.EventType">
            <summary>
            EventType
            </summary>
        </member>
        <member name="P:Framework.Events.SFEventLog.EventDate">
            <summary>
            EventDate
            </summary>
        </member>
        <member name="P:Framework.Events.SFEventLog.MachineName">
            <summary>
            MachineName
            </summary>
        </member>
        <member name="P:Framework.Events.SFEventLog.OperatorID">
            <summary>
            OperatorID
            </summary>
        </member>
        <member name="P:Framework.Events.SFEventLog.UserID">
            <summary>
            UserID
            </summary>
        </member>
        <member name="T:Framework.Enumerations.LoginUserStatus">
            <summary>
            用户登录状态
            </summary>
        </member>
        <member name="F:Framework.Enumerations.LoginUserStatus.InvalidCredentials">
            <summary>
            用户名和密码不匹配
            </summary>
        </member>
        <member name="F:Framework.Enumerations.LoginUserStatus.Success">
            <summary>
            用户名和密码匹配
            </summary>
        </member>
        <member name="F:Framework.Enumerations.LoginUserStatus.UnknownError">
            <summary>
            Unknown situation possibly generated by un-syncronization beteen 
            data layer and business layer.
            </summary>
        </member>
        <member name="T:Framework.Components.OnlineUserCacheInfo">
            <summary>
            在线用户信息（缓存）
            </summary>
        </member>
        <member name="P:Framework.Components.OnlineUserCacheInfo.UserID">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:Framework.Components.OnlineUserCacheInfo.UserIP">
            <summary>
            用户IP
            </summary>
        </member>
        <member name="P:Framework.Components.OnlineUserCacheInfo.LastUpdateTime">
            <summary>
            最后更新时间
            </summary>
        </member>
        <member name="T:Framework.Components.Hit">
            <summary>
            Hits 的摘要说明。
            </summary>
        </member>
        <member name="P:Framework.Components.Hit.HitID">
            <summary>
            HitID
            </summary>
        </member>
        <member name="P:Framework.Components.Hit.CellID">
            <summary>
            CellID
            </summary>
        </member>
        <member name="P:Framework.Components.Hit.PageID">
            <summary>
            PageID
            </summary>
        </member>
        <member name="P:Framework.Components.Hit.HitTime">
            <summary>
            HitTime
            </summary>
        </member>
        <member name="P:Framework.Components.Hit.HitUserID">
            <summary>
            HitUserID
            </summary>
        </member>
        <member name="P:Framework.Components.Hit.IP">
            <summary>
            IP
            </summary>
        </member>
        <member name="P:Framework.Components.Hit.IsIPCount">
            <summary>
            IsIPCount
            </summary>
        </member>
        <member name="T:Framework.Components.Common">
            <summary>
            公用处理的部分代码，如生成随机码等。
            </summary>
        </member>
        <member name="M:Framework.Components.Common.GenerateRandomString(System.Int32,System.Boolean)">
            <summary>
            随机生成数字或字母字符串
            </summary>
            <param name="length">字符串长度</param>
            <param name="numberOnly">生成数字串</param>
            <returns>生成的随机字符串</returns>
        </member>
        <member name="M:Framework.Components.Common.GetDataRandom">
            <summary>
            获得一个随机值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Common.GetCheckBoxStatus(System.Object)">
            <summary>
            返回复选框状态
            </summary>
            <param name="isChecked"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Common.GetDiffArray``1(``0[],``0[])">
            <summary>
            返回两个数组不同成员部分
            以第一个数组为参考返回不相同成员
            </summary>
            <typeparam name="T">数组成员类型</typeparam>
            <param name="arrays1">数组1</param>
            <param name="arrays2">数组2</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Common.GetDiffArray``1(``0[],``0[],System.Boolean)">
            <summary>
            返回两个数组不同成员部分
            </summary>
            <typeparam name="T">数组成员类型</typeparam>
            <param name="arrays1">数组1</param>
            <param name="arrays2">数组2</param>
            <param name="allDiff">true返回全部不相同的成员,false则以第一个数组为参考返回不相同成员</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Common.GetDeepClone``1(``0)">
            <summary>
            返回深拷贝对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">要拷贝的对象</param>
            <returns>深拷贝对象</returns>
        </member>
        <member name="P:Framework.Components.Common.ApplicationPath">
            <summary>
            应用程序路径
            </summary>
        </member>
        <member name="P:Framework.Components.Common.IsMobile">
            <summary>
            Gets a value indicating whether the client is a mobile device.
            </summary>
            <value><c>true</c> if this instance is mobile; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Framework.Components.Common.IsMono">
            <summary>
            Gets a value indicating whether we're running under Mono.
            </summary>
            <value><c>true</c> if Mono; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Framework.Components.Common.IsLinux">
            <summary>
            Gets a value indicating whether we're running under Linux or a Unix variant.
            </summary>
            <value><c>true</c> if Linux/Unix; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Framework.Search.SqlColumnTypeParse">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="M:Framework.Search.SqlColumnTypeParse.CanBeUpdate(System.Int32,System.Boolean)">
            <summary>
            是否可以直接更新
            </summary>
            <param name="lngTypeID"></param>
            <param name="isAutoValue"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.SqlColumnTypeParse.IsBlobType(System.Int32)">
            <summary>
            是否为二进制长变量
            </summary>
            <param name="lngTypeID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.SqlColumnTypeParse.IsFixedSize(System.Int32)">
            <summary>
            是否为固定长度
            </summary>
            <param name="lngTypeID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.SqlColumnTypeParse.ColumnTypeNullValue(System.Int32)">
            <summary>
            空值表达式
            </summary>
            <param name="lngTypeID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.SqlColumnTypeParse.ColumnTypeIsHasDec(System.Int32)">
            <summary>
            在长度中是否有小数位
            </summary>
            <param name="lngTypeID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.SqlColumnTypeParse.ColumnTypeIsString(System.Int32)">
            <summary>
            是否为字符串
            </summary>
            <param name="lngTypeID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.SqlColumnTypeParse.ColumnTypeIsDateTime(System.Int32)">
            <summary>
            是否为日期
            </summary>
            <param name="lngTypeID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.SqlColumnTypeParse.ColumnTypeIsBool(System.Int32)">
            <summary>
            是否为ＢＯＯＬ
            </summary>
            <param name="lngTypeID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.SqlColumnTypeParse.ColumnTypeIsNumeric(System.Int32)">
            <summary>
            是否为数字
            </summary>
            <param name="lngTypeID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.SqlColumnTypeParse.ColumnTypeIsBinary(System.Int32)">
            <summary>
            是否二进制字节组
            </summary>
            <param name="lngTypeID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.SqlColumnTypeParse.ParseName(System.String)">
            <summary>
            转换
            </summary>
            <param name="columnTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.SqlColumnTypeParse.ParseNameNew(System.String)">
            <summary>
            转换
            </summary>
            <param name="columnTypeName"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Search.ISearchFactory">
            <summary>
            搜索工厂类
            </summary>
        </member>
        <member name="M:Framework.Search.ISearchFactory.GetByUserID(System.Int32)">
            <summary>
            获得拥护ＩＤ
            </summary>
            <param name="userID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.ISearchFactory.Get(System.Int32)">
            <summary>
            获得方案ＩＤ
            </summary>
            <param name="caseID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.ISearchFactory.Save(Framework.Search.SearchCase)">
            <summary>
             保存
            </summary>
            <param name="searchCase">查询方案</param>
        </member>
        <member name="M:Framework.Search.ISearchFactory.GetResult(Framework.Search.SearchCase,System.Int32,System.Int32)">
            <summary>
            获得结果
            </summary>
            <param name="searchCase"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.ISearchFactory.GetWhereClause(Framework.Search.SearchCase)">
            <summary>
            获得查询条件
            </summary>
            <param name="searchCase"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Search.FilterItem">
            <summary>
            基本查询条件单元
            </summary>
        </member>
        <member name="F:Framework.Search.FilterItem.XMLScheme">
            <summary>
            Ｓｃｈｅｍｅ
            </summary>
        </member>
        <member name="F:Framework.Search.FilterItem.conditionField">
            <summary>
            条件字段
            </summary>
        </member>
        <member name="F:Framework.Search.FilterItem.compareType">
            <summary>
            比较运算符
            </summary>
        </member>
        <member name="F:Framework.Search.FilterItem.valueSyntax">
            <summary>
            值表达式
            </summary>
        </member>
        <member name="F:Framework.Search.FilterItem.tableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="F:Framework.Search.FilterItem.columnType">
            <summary>
            字段类型
            </summary>
        </member>
        <member name="M:Framework.Search.FilterItem.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.FilterItem.ToXML">
            <summary>
            转换成ＸＭＬ
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.FilterItem.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Framework.Search.FilterItem.#ctor(Framework.Search.FieldItem)">
            <summary>
            构造函数
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Framework.Search.FilterItem.Field">
            <summary>
            字段
            </summary>
        </member>
        <member name="P:Framework.Search.FilterItem.IsNull">
            <summary>
            值是否为空
            </summary>
        </member>
        <member name="P:Framework.Search.FilterItem.CompareType">
            <summary>
            比较类型
            </summary>
        </member>
        <member name="P:Framework.Search.FilterItem.ValueSyntax">
            <summary>
            值表达式
            </summary>
        </member>
        <member name="P:Framework.Search.FilterItem.TableName">
            <summary>
            表名或对像名
            </summary>
        </member>
        <member name="P:Framework.Search.FilterItem.ColumnType">
            <summary>
            字段在数据库中的类型
            </summary>
        </member>
        <member name="T:Framework.Remoting.RemotingChannelType">
            <summary>
            远程信号类型
            </summary>
        </member>
        <member name="F:Framework.Remoting.RemotingChannelType.TCP">
            <summary>
            Tcp Channel
            </summary>
        </member>
        <member name="F:Framework.Remoting.RemotingChannelType.HTTP">
            <summary>
            Http Channel
            </summary>
        </member>
        <member name="T:Framework.Message.IEventHelper">
            <summary>
            事件接口
            事件保存处理
            异步事件处理
            </summary>
        </member>
        <member name="M:Framework.Message.IEventHelper.CreateEventEntity(Framework.Events.EventEntity,System.String,System.String)">
            <summary>
            创建一种事件
            </summary>
            <param name="ee"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IEventHelper.DeleteEventEntity(Framework.Events.EventEntity,System.String,System.String)">
            <summary>
            删除一种事件
            </summary>
            <param name="ee"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IEventHelper.DeleteEventEntity(System.Int32,System.String,System.String)">
            <summary>
            删除一种事件
            </summary>
            <param name="eventEntityID"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IEventHelper.GetEventDescription(System.Int32,System.String,System.String)">
            <summary>
            读取一种事件内容
            </summary>
            <param name="eventEntityID"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IEventHelper.GetEventEntities(System.Int32,System.String,System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            读取事件列表
            </summary>
            <param name="isAsynchronized">-1表示所有，0表示同步，1表是异步</param>
            <param name="eventType"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IEventHelper.GetLogCount(System.Int32,System.String,System.String)">
            <summary>
            该事件下的日志数量
            </summary>
            <param name="eventEntityID"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IEventHelper.GetAsynchronizeEventCount(System.Int32,System.String,System.String)">
            <summary>
            该事件下的异步事务数据
            </summary>
            <param name="eventEntityID"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IEventHelper.CreateAsynchronizeEvent(Framework.Events.AsynchronizeEvent,System.String,System.String)">
            <summary>
            创建一个异步事件
            </summary>
            <param name="asynEvent"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IEventHelper.DeleteAsynchronizeEvent(Framework.Events.AsynchronizeEvent,System.String,System.String)">
            <summary>
            删除一个异步事件
            </summary>
            <param name="asynEvent"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IEventHelper.DeleteAsynchronizeEvent(System.Int32,System.String,System.String)">
            <summary>
            根据ID删除一个异步事件
            </summary>
            <param name="asynEventID"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IEventHelper.GetAsynchronizeEvents(System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            获得异步事件列表
            </summary>
            <param name="settingsID">站点ID，默认填0</param>
            <param name="eventID">事件ID，即事件的说明ID</param>
            <param name="eventType">事件类型</param>
            <param name="eventTitle">标题</param>
            <param name="minRetries">最小重试次数，填零表示所有</param>
            <param name="isExecuted">是否已经执行？填－1表示所有，0表示未执行，1表示已经执行</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="totalCount">记录总数，用于返回</param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="T:Framework.Components.AppException">
            <summary>
            自定义应用程序异常
            </summary>
        </member>
        <member name="M:Framework.Components.AppException.#ctor(Framework.Components.ExceptionType)">
            <summary>
            构造函数
            </summary>
            <param name="t">异常类型</param>
        </member>
        <member name="M:Framework.Components.AppException.#ctor(Framework.Components.ExceptionType,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="t">异常类型</param>
            <param name="msg">异常消息</param>
        </member>
        <member name="M:Framework.Components.AppException.#ctor(Framework.Components.ExceptionType,System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="t">异常类型</param>
            <param name="msg">异常消息</param>
            <param name="inner">内部异常</param>
        </member>
        <member name="M:Framework.Components.AppException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info">存储对象序列化和反序列化所需的全部数据</param>
            <param name="context">描述给定的序列化流的源和目标，并提供一个由调用方定义的附加上下文</param>
        </member>
        <member name="M:Framework.Components.AppException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            重载GetObjectData方法
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Framework.Components.AppException.ExceptionType">
            <summary>
            异常类型
            </summary>
        </member>
        <member name="T:Framework.Enumerations.ApplicationType">
            <summary>
            应用程序类型
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ApplicationType.All">
            <summary>
            所有
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ApplicationType.Forum">
            <summary>
            论坛
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ApplicationType.Weblog">
            <summary>
            博客
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ApplicationType.Gallery">
            <summary>
            相册
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ApplicationType.GuestBook">
            <summary>
            留言本
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ApplicationType.Calendar">
            <summary>
            日历
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ApplicationType.Channel">
            <summary>
            频道
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ApplicationType.FileGallery">
            <summary>
            文件管理
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ApplicationType.FeedReader">
            <summary>
            ＲＳＳ
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ApplicationType.BlogRoller">
            <summary>
            博客订阅
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ApplicationType.Ads">
            <summary>
            广告
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ApplicationType.Spam">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ApplicationType.ContentManagement">
            <summary>
            内容管理
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ApplicationType.MyKB">
            <summary>
            MYKB
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ApplicationType.Wiki">
            <summary>
            WIKI 维基百科
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ApplicationType.Shop">
            <summary>
            商城
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ApplicationType.Product">
            <summary>
            产品
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ApplicationType.JobSeek">
            <summary>
            劳务通
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ApplicationType.Train">
            <summary>
            培训通
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ApplicationType.Agnecy">
            <summary>
            中介通
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ApplicationType.Store">
            <summary>
            店铺
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ApplicationType.Installer">
            <summary>
            安装
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ApplicationType.Admin">
            <summary>
            管理中心
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ApplicationType.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="T:Framework.Events.UserQueryCallBackArgs">
            <summary>
            用户查询回调参数
            
            </summary>
        </member>
        <member name="T:Framework.Search.QueryCallBackArgs">
            <summary>
            用户榄回调参数
            
            </summary>
        </member>
        <member name="F:Framework.Search.QueryCallBackArgs._attributes">
            <summary>
            扩展属性
            </summary>
        </member>
        <member name="F:Framework.Search.QueryCallBackArgs._pageIndex">
            <summary>
            当前页,从0开始
            </summary>
        </member>
        <member name="F:Framework.Search.QueryCallBackArgs._pageSize">
            <summary>
            每页大小
            </summary>
        </member>
        <member name="F:Framework.Search.QueryCallBackArgs._obj">
            <summary>
            
            </summary>
        </member>
        <member name="M:Framework.Search.QueryCallBackArgs.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Framework.Search.QueryCallBackArgs.#ctor(System.Int32,System.Int32,System.Collections.Specialized.NameValueCollection)">
            <summary>
            构造函数
            </summary>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="attributes"></param>
        </member>
        <member name="M:Framework.Search.QueryCallBackArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
        </member>
        <member name="M:Framework.Search.QueryCallBackArgs.#ctor(System.Int32,System.Int32,System.Collections.Specialized.NameValueCollection,System.Object)">
            <summary>
            构造一个参数
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="attributes"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Framework.Search.QueryCallBackArgs.SetDateTime(System.String,System.DateTime)">
            <summary>
            存储日期
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Framework.Search.QueryCallBackArgs.SetInt(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Framework.Search.QueryCallBackArgs.SetString(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Framework.Search.QueryCallBackArgs.SetBoolean(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Framework.Search.QueryCallBackArgs.GetDateTime(System.String,System.DateTime)">
            <summary>
            从中读取日期型值
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.QueryCallBackArgs.GetBool(System.String,System.Boolean)">
            <summary>
            获取扩展属性值（布尔类型值）
            </summary>
        </member>
        <member name="M:Framework.Search.QueryCallBackArgs.GetInt(System.String,System.Int32)">
            <summary>
            获取扩展属性值（整型值）
            </summary>
        </member>
        <member name="M:Framework.Search.QueryCallBackArgs.GetString(System.String,System.String)">
            <summary>
            获取扩展属性值（字符串类型值）
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.QueryCallBackArgs.GetExtendedAttribute(System.String)">
            <summary>
            获取扩展属性值
            </summary>
        </member>
        <member name="P:Framework.Search.QueryCallBackArgs.ComplexFilter">
            <summary>
            复合条件
            </summary>
        </member>
        <member name="P:Framework.Search.QueryCallBackArgs.SimpleFilter">
            <summary>
            简单条件
            </summary>
        </member>
        <member name="P:Framework.Search.QueryCallBackArgs.PageIndex">
            <summary>
            页号，从0开始
            </summary>
        </member>
        <member name="P:Framework.Search.QueryCallBackArgs.PageSize">
            <summary>
            每页数据大小
            </summary>
        </member>
        <member name="P:Framework.Search.QueryCallBackArgs.Obj">
            <summary>
            传入的参数
            </summary>
        </member>
        <member name="P:Framework.Search.QueryCallBackArgs.Attributes">
            <summary>
            扩展属性
            </summary>
        </member>
        <member name="M:Framework.Events.UserQueryCallBackArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
        </member>
        <member name="M:Framework.Events.UserQueryCallBackArgs.#ctor(System.String,System.String,System.DateTime,System.DateTime,Framework.Enumerations.UserType,Framework.Enumerations.UserStatus,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="userName"></param>
            <param name="email"></param>
            <param name="begin"></param>
            <param name="end"></param>
            <param name="uType"></param>
            <param name="status"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
        </member>
        <member name="M:Framework.Events.UserQueryCallBackArgs.#ctor(System.Int32,System.Int32,System.Collections.Specialized.NameValueCollection)">
            <summary>
            
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="attributes"></param>
        </member>
        <member name="P:Framework.Events.UserQueryCallBackArgs.UserNameToMatch">
            <summary>
            用户登录名匹配
            </summary>
        </member>
        <member name="P:Framework.Events.UserQueryCallBackArgs.EmailToMatch">
            <summary>
            用于匹配的Email字符，可以为部分
            </summary>
        </member>
        <member name="P:Framework.Events.UserQueryCallBackArgs.BeginTime">
            <summary>
            注册开始时间
            </summary>
        </member>
        <member name="P:Framework.Events.UserQueryCallBackArgs.EndTime">
            <summary>
            注册结束时间
            </summary>
        </member>
        <member name="P:Framework.Events.UserQueryCallBackArgs.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:Framework.Events.UserQueryCallBackArgs.UserType">
            <summary>
            用户类型
            </summary>
        </member>
        <member name="T:Framework.Events.EventEntity">
            <summary>
            事件类型说明
            </summary>
        </member>
        <member name="M:Framework.Events.EventEntity.CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Events.EventEntity.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Framework.Events.EventEntity.EventID">
            <summary>
            EventID
            </summary>
        </member>
        <member name="P:Framework.Events.EventEntity.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Framework.Events.EventEntity.IsAsynchronize">
            <summary>
            IsAsynchronize
            </summary>
        </member>
        <member name="P:Framework.Events.EventEntity.EventType">
            <summary>
            EventType
            </summary>
        </member>
        <member name="P:Framework.Events.EventEntity.EventDescription">
            <summary>
            EventDescription
            </summary>
        </member>
        <member name="P:Framework.Events.EventEntity.IsDeleted">
            <summary>
            是否已经被删除
            </summary>
        </member>
        <member name="T:Framework.Components.SFEventArgs">
            <summary>
            事件参数
            </summary>
        </member>
        <member name="M:Framework.Components.SFEventArgs.#ctor(Framework.Enumerations.ObjectState,Framework.Enumerations.ApplicationType)">
            <summary>
            构造函数
            </summary>
            <param name="state"></param>
            <param name="appType"></param>
        </member>
        <member name="M:Framework.Components.SFEventArgs.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Framework.Components.SFEventArgs.State">
            <summary>
            对像状态：创建、修改、删除等
            </summary>
        </member>
        <member name="P:Framework.Components.SFEventArgs.ApplicationType">
            <summary>
            应用程序类型
            </summary>
        </member>
        <member name="T:Framework.Components.Entities.Base.SiteCensorshipBase">
            <summary>
            表《SiteCensorship》对应的基类
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteCensorshipBase.OrgWordID">
            <summary>
            WordID
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteCensorshipBase.WordID">
            <summary>
            WordID
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteCensorshipBase.SettingsID">
            <summary>
            SettingsID
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteCensorshipBase.Word">
            <summary>
            Word
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteCensorshipBase.Replacement">
            <summary>
            Replacement
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteCensorshipBase.Level">
            <summary>
            Level
            </summary>
        </member>
        <member name="T:Framework.Components.Entities.Base.SiteAnonymousUserBase">
            <summary>
            表《SiteAnonymousUsers》对应的基类
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteAnonymousUserBase.OrgAnonymousUserID">
            <summary>
            AnonymousUserID
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteAnonymousUserBase.AnonymousUserID">
            <summary>
            AnonymousUserID
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteAnonymousUserBase.SettingsID">
            <summary>
            SettingsID
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteAnonymousUserBase.UserID">
            <summary>
            UserID
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteAnonymousUserBase.LastLogin">
            <summary>
            LastLogin
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteAnonymousUserBase.LastAction">
            <summary>
            LastAction
            </summary>
        </member>
        <member name="T:Framework.Components.IPScanner">
            <summary>
            从 qqwry.dat 查询IP地理位置
            </summary>
        </member>
        <member name="M:Framework.Components.IPScanner.IPLocation(System.String)">
            <summary>
            ANF调用的方法 by venjiang 2005/01/24
            </summary>
            <param name="ip">要查询的IP地址</param>
            <returns>返回IP真实地理位置</returns>
        </member>
        <member name="P:Framework.Components.IPScanner.Country">
            <summary>
            IP地址位置
            </summary>
        </member>
        <member name="P:Framework.Components.IPScanner.Local">
            <summary>
            上网方式
            </summary>
        </member>
        <member name="T:Framework.Components.IdentifyEncoding">
            <summary>
            检测字符编码的类
            <seealso cref="T:System.IO.Stream"/>
            <seealso cref="T:System.Uri"/>
            <seealso cref="T:System.IO.FileInfo"/>
            </summary>
            <remarks>
            <![CDATA[
            <strong>IdentifyEncoding</strong> 用来检测 <see cref="Uri"/>,<see cref="System.IO.FileInfo"/>,<see cref="sbyte"/> 字节数组的编码．
            Create By lion  <br/>
            2005-02-21 22:00  <br/>
            Support .Net Framework v1.1.4322 <br/> 
            WebSite：www.lionsky.net(lion-a AT sohu.com) <br/> 
            ]]>
            </remarks>
        </member>
        <member name="M:Framework.Components.IdentifyEncoding.#ctor">
            <summary>
            初始化 <see cref="T:Framework.Components.IdentifyEncoding"/> 的实例
            </summary>
        </member>
        <member name="M:Framework.Components.IdentifyEncoding.GetEncodingName(System.Uri)">
            <summary>
            从指定的 <see cref="T:System.Uri"/> 中判断编码类型
            </summary>
            <param name="testurl">要判断的 <see cref="T:System.Uri"/> </param>
            <returns>返回编码类型("GB2312", "GBK", "HZ", "Big5", "CNS 11643", "ISO 2022CN", "UTF-8", "Unicode", "ASCII", "OTHER")</returns>
            <example>
            以下示例演示了如何调用 <see cref="M:Framework.Components.IdentifyEncoding.GetEncodingName(System.Uri)"/> 方法：
            <code>
             IdentifyEncoding ide = new IdentifyEncoding();
             Response.Write(ide.GetEncodingName(new Uri("http://china5.nikkeibp.co.jp/china/news/com/200307/pr_com200307170131.html")));  
            </code>
            </example>
        </member>
        <member name="M:Framework.Components.IdentifyEncoding.GetEncodingName(System.IO.FileInfo)">
            <summary>
            从指定的 <see cref="T:System.IO.FileInfo"/> 中判断编码类型
            </summary>
            <param name="testfile">要判断的 <see cref="T:System.IO.FileInfo"/> </param>
            <returns>返回编码类型("GB2312", "GBK", "HZ", "Big5", "CNS 11643", "ISO 2022CN", "UTF-8", "Unicode", "ASCII", "OTHER")</returns>
            <example>
            以下示例演示了如何调用 <see cref="M:Framework.Components.IdentifyEncoding.GetEncodingName(System.Uri)"/> 方法：
            <code>
             IdentifyEncoding ide = new IdentifyEncoding();
             Response.Write(ide.GetEncodingName(new System.IO.FileInfo(@"C:\test.txt")));  
            </code>
            </example>
        </member>
        <member name="M:Framework.Components.IdentifyEncoding.GetEncodingName(System.SByte[])">
            <summary>
            从指定的 <see cref="T:System.SByte"/> 字节数组中判断编码类型
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.IO.FileInfo"/> </param>
            <returns>返回编码类型("GB2312", "GBK", "HZ", "Big5", "CNS 11643", "ISO 2022CN", "UTF-8", "Unicode", "ASCII", "OTHER")</returns>
            <example>
            以下示例演示了如何调用 <see cref="M:Framework.Components.IdentifyEncoding.GetEncodingName(System.Uri)"/> 方法：
            <code>
             IdentifyEncoding ide = new IdentifyEncoding();
             Response.Write(ide.GetEncodingName(IdentifyEncoding.ToSByteArray(System.Text.Encoding.GetEncoding("gb2312").GetBytes("Lion互动网络(www.lionsky.net)")))); 
            </code>
            </example>
        </member>
        <member name="M:Framework.Components.IdentifyEncoding.GB2312Probability(System.SByte[])">
            <summary>
            判断是GB2312编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:Framework.Components.IdentifyEncoding.GBKProbability(System.SByte[])">
            <summary>
            判断是GBK编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:Framework.Components.IdentifyEncoding.HZProbability(System.SByte[])">
            <summary>
            判断是HZ编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:Framework.Components.IdentifyEncoding.BIG5Probability(System.SByte[])">
            <summary>
            判断是BIG5编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:Framework.Components.IdentifyEncoding.ENCTWProbability(System.SByte[])">
            <summary>
            判断是CNS11643(台湾)编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:Framework.Components.IdentifyEncoding.ISO2022CNProbability(System.SByte[])">
            <summary>
            判断是ISO2022CN编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:Framework.Components.IdentifyEncoding.UTF8Probability(System.SByte[])">
            <summary>
            判断是UTF8编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:Framework.Components.IdentifyEncoding.UnicodeProbability(System.SByte[])">
            <summary>
            判断是Unicode编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:Framework.Components.IdentifyEncoding.ASCIIProbability(System.SByte[])">
            <summary>
            判断是ASCII编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:Framework.Components.IdentifyEncoding.Initialize_Frequencies">
            <summary>
            初始化必要的条件
            </summary>
        </member>
        <member name="M:Framework.Components.IdentifyEncoding.ToByteArray(System.SByte[])">
            <summary>
            将此实例中的指定 <see cref="T:System.SByte"/> 字符数组转换到 <see cref="T:System.Byte"/> 字符数组。
            </summary>
            <param name="sbyteArray">要转换的 <see cref="T:System.SByte"/> 字符数组</param>
            <returns>返回转换后的 <see cref="T:System.Byte"/> 字符数组</returns>
        </member>
        <member name="M:Framework.Components.IdentifyEncoding.ToByteArray(System.String)">
            <summary>
            将此实例中的指定字符串转换到 <see cref="T:System.Byte"/> 字符数组。
            </summary>
            <param name="sourceString">要转换的字符串</param>
            <returns>返回转换后的 <see cref="T:System.Byte"/> 字符数组</returns>
        </member>
        <member name="M:Framework.Components.IdentifyEncoding.ToByteArray(System.Object[])">
            <summary>
            将此实例中的指定 <see cref="T:System.Object"/> 数组转换到 <see cref="T:System.Byte"/> 字符数组。
            </summary>
            <param name="tempObjectArray">要转换的 <see cref="T:System.Object"/> 字符数组</param>
            <returns>返回转换后的 <see cref="T:System.Byte"/> 字符数组</returns>
        </member>
        <member name="M:Framework.Components.IdentifyEncoding.ToSByteArray(System.Byte[])">
            <summary>
            将此实例中的指定 <see cref="T:System.Byte"/> 字符数组转换到 <see cref="T:System.SByte"/> 字符数组。
            </summary>
            <param name="byteArray">要转换的 <see cref="T:System.Byte"/> 字符数组</param>
            <returns>返回转换后的 <see cref="T:System.SByte"/> 字符数组</returns>
        </member>
        <member name="M:Framework.Components.IdentifyEncoding.ReadInput(System.IO.Stream,System.SByte[]@,System.Int32,System.Int32)">
            <summary>从流读取字节序列,并将此流中的位置提升读取的字节数.</summary>
            <param name="sourceStream">要读取的流.</param>
            <param name="target">字节数组。此方法返回时,该缓冲区包含指定的字符数组,该数组的 start 和 (start + count-1) 之间的值由从当前源中读取的字节替换。</param>
            <param name="start">buffer 中的从零开始的字节偏移量,从此处开始存储从当前流中读取的数据。.</param>
            <param name="count">要从当前流中最多读取的字节数。</param>
            <returns>读入缓冲区中的总字节数。如果当前可用的字节数没有请求的字节数那么多,则总字节数可能小于请求的字节数,或者如果已到达流的末尾,则为零 (0)。</returns>
            <exception cref="T:System.ArgumentException">start 与 count 的和大于缓冲区长度。</exception>
            <exception cref="T:System.ArgumentNullException">target 为空引用(Visual Basic 中为 Nothing)。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset 或 count 为负。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Framework.Components.IdentifyEncoding.ReadInput(System.IO.TextReader,System.SByte[]@,System.Int32,System.Int32)">
            <summary>从字符系列读取字节序列,并将此字符系列中的位置提升读取的字节数。</summary>
            <param name="sourceTextReader">要读取的流。</param>
            <param name="target">字节数组。此方法返回时,该缓冲区包含指定的字符数组,该数组的 start 和 (start + count-1) 之间的值由从当前源中读取的字节替换。</param>
            <param name="start">buffer 中的从零开始的字节偏移量,从此处开始存储从当前流中读取的数据。.</param>
            <param name="count">要从当前流中最多读取的字节数。</param>
            <returns>读入缓冲区中的总字节数。如果当前可用的字节数没有请求的字节数那么多,则总字节数可能小于请求的字节数,或者如果已到达流的末尾,则为零 (0)。</returns>
            <exception cref="T:System.ArgumentException">start 与 count 的和大于缓冲区长度。</exception>
            <exception cref="T:System.ArgumentNullException">target 为空引用(Visual Basic 中为 Nothing)。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset 或 count 为负。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Framework.Components.IdentifyEncoding.FileLength(System.IO.FileInfo)">
            <summary>
            检测当前文件的大小
            </summary>
            <param name="file">被检测的文件</param>
            <returns>当前文件的大小。</returns>
        </member>
        <member name="M:Framework.Components.IdentifyEncoding.Identity(System.Int64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:Framework.Components.IdentifyEncoding.Identity(System.UInt64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:Framework.Components.IdentifyEncoding.Identity(System.Single)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:Framework.Components.IdentifyEncoding.Identity(System.Double)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="T:Client.Components.EventEntityProvider">
            <summary>
            事件类型数据提供器
            
            </summary>
        </member>
        <member name="T:Framework.Caching.ICache">
            <summary>
            通用Cache接口
            </summary>
        </member>
        <member name="M:Framework.Caching.ICache.Remove(System.String)">
            <summary>
            根据键值移除Cache
            </summary>
            <param name="key">键值</param>
        </member>
        <member name="M:Framework.Caching.ICache.RemoveByPattern(System.String)">
            <summary>
            根据正则表达式的模式移除Cache
            </summary>
            <param name="pattern">模式</param>
        </member>
        <member name="M:Framework.Caching.ICache.RemoveCacheByHead(System.String)">
            <summary>
            根据Key的前几个字符匹配来处理
            </summary>
            <param name="headKey"></param>
        </member>
        <member name="M:Framework.Caching.ICache.Insert(System.String,System.Object)">
            <summary>
            把对象加载到Cache
            </summary>
            <param name="key">键</param>
            <param name="obj">对象</param>
        </member>
        <member name="M:Framework.Caching.ICache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)">
            <summary>
            把对象加载到Cache,附加缓存依赖信息
            </summary>
            <param name="key">键值</param>
            <param name="obj">缓存对象</param>
            <param name="dep">依赖对象</param>
        </member>
        <member name="M:Framework.Caching.ICache.Insert(System.String,System.Object,System.Int32)">
            <summary>
            把对象加载到Cache,附加过期时间信息
            </summary>
            <param name="key">键值</param>
            <param name="obj">缓存对象</param>
            <param name="seconds">过期时间</param>
        </member>
        <member name="M:Framework.Caching.ICache.Insert(System.String,System.Object,System.DateTime)">
            <summary>
            把对象加载到Cache,附加过期日期时间
            </summary>
            <param name="key">键值</param>
            <param name="obj">缓存对象</param>
            <param name="expiresAt">过期具体日期</param>
        </member>
        <member name="M:Framework.Caching.ICache.Insert(System.String,System.Object,System.Int32,System.Web.Caching.CacheItemPriority)">
            <summary>
            把对象加载到Cache,附加过期时间信息和优先级
            </summary>
            <param name="key">键值</param>
            <param name="obj">缓存对象</param>
            <param name="seconds">过期时间</param>
            <param name="priority"></param>
        </member>
        <member name="M:Framework.Caching.ICache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.Int32)">
            <summary>
            把对象加载到Cache,附加缓存依赖和过期时间(多少秒后过期)
            (默认优先级为Normal)
            </summary>
            <param name="key">键值</param>
            <param name="obj">缓存对象</param>
            <param name="dep">依赖对象</param>
            <param name="seconds">过期时间</param>
        </member>
        <member name="M:Framework.Caching.ICache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.Int32,System.Web.Caching.CacheItemPriority)">
            <summary>
            把对象加载到Cache,附加缓存依赖和过期时间(多少秒后过期)及优先级
            </summary>
            <param name="key">键值</param>
            <param name="obj">缓存对象</param>
            <param name="dep">依赖对象</param>
            <param name="seconds">过期时间</param>
            <param name="priority"></param>
        </member>
        <member name="M:Framework.Caching.ICache.Get(System.String)">
            <summary>
            根据键获取被缓存的对象
            </summary>
            <param name="key">键值</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Caching.ICache.Get``1(System.String)">
            <summary>
            根据键获取被缓存的泛型对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键值</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Caching.MemCache.#ctor(System.String)">
            <summary>
            构造器
            </summary>
            <param name="providerName">提供者名称</param>
        </member>
        <member name="M:Framework.Caching.MemCache.#ctor(Framework.Components.Provider)">
            <summary>
            构造器
            </summary>
            <param name="provider">提供者</param>
        </member>
        <member name="T:Framework.Components.ExceptionType">
            <summary>
            异常类型
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.All">
            <summary>
            未知异常
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.DataAccess">
            <summary>
            数据库访问异常
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.DataBind">
            <summary>
            从数据集合或数据绑定时出现的异常
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.DataProvider">
            <summary>
            数据提供器初始化过程出错
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.NoData">
            <summary>
            没有对应数据
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.NoCurrentUser">
            <summary>
            没有对应用户
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.NoCurrentRole">
            <summary>
            没有对应角色
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.DataConvertError">
            <summary>
            数据转换错误
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.NoPermission">
            <summary>
            没有权限
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.ConfigurationError">
            <summary>
            配置错误
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.UserInvalidCredentials">
            <summary>
            错误的用户凭证
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.FileNotFound">
            <summary>
            文件没有找到
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.LoginFailure">
            <summary>
            登录失败
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.ReadCookieError">
            <summary>
            从Cookie中读取数据失败
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.UserResgister">
            <summary>
            用户注册失败
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.ResourceFileMissing">
            <summary>
            资源文件不存在
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.UserLoginDisabled">
            <summary>
            不准用户登录
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.AccessDenied">
            <summary>
            请求被拒绝
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.GeneralAccessDenied">
            <summary>
            访问被拒绝
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.ModerateAccessDenied">
            <summary>
            管理权限被拒绝
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.ResourceNotFound">
            <summary>
            资源描述没有找到
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.UnRegisteredSite">
            <summary>
            未注册站点
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.SiteUrlDataProvider">
            <summary>
            URL地址管理器失败
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.SiteSettingsInvalidXML">
            <summary>
            错误的站点设置XML
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.NotLogin">
            <summary>
            未登录
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.InvalidParameters">
            <summary>
            非法参数
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.UpdateDataError">
            <summary>
            数据出错
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.UnknownCell">
            <summary>
            未知栏位
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.UnkownPackage">
            <summary>
            未知配置包
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.CellConfigError">
            <summary>
            栏位配置错误
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.PackageConfigError">
            <summary>
            同步包配置错误
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.DataListError">
            <summary>
            列表出错
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.DataNotFind">
            <summary>
            数据没有找到
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.UserNotSelectPortal">
            <summary>
            用户没有选择站点
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.InValidClientRequest">
            <summary>
            非法用户请求，客户端没有通过验证。
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.DependenceDenied">
            <summary>
            缓存依赖被禁止
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.MembershipProvider">
            <summary>
            Sinomen成员服务提供者异常 
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.SinomenRoleProvider">
            <summary>
            Sinomen角色服务提供者异常
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.CreateRemoteObjectError">
            <summary>
            创建远程对像失败
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.SendUserMessageError">
            <summary>
            发送用户消息失败
            </summary>
        </member>
        <member name="F:Framework.Components.ExceptionType.HasReferenceData">
            <summary>
            有关联的数据
            </summary>
        </member>
        <member name="T:Framework.Message.MessageBoxType">
            <summary>
            收件箱，发件箱之类的
            </summary>
        </member>
        <member name="F:Framework.Message.MessageBoxType.InBox">
            <summary>
            收件箱
            </summary>
        </member>
        <member name="F:Framework.Message.MessageBoxType.OutBox">
            <summary>
            发件箱
            </summary>
        </member>
        <member name="F:Framework.Message.MessageBoxType.DraftBox">
            <summary>
            草稿箱，即未发信
            </summary>
        </member>
        <member name="F:Framework.Message.MessageBoxType.RecycleBox">
            <summary>
            垃圾箱
            </summary>
        </member>
        <member name="T:Framework.Message.IEventLogHelper">
            <summary>
            事件日志接口
            </summary>
        </member>
        <member name="M:Framework.Message.IEventLogHelper.LogEvent(Framework.Events.SFEventLog,System.String,System.String)">
            <summary>
            记录事件日志
            </summary>
            <param name="msg"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IEventLogHelper.LogEventAsynchronized(Framework.Events.SFEventLog,System.String,System.String)">
            <summary>
            异步调用日志记录模块
            </summary>
            <param name="msg"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IEventLogHelper.DeleteEvent(System.Int32,System.String,System.String)">
            <summary>
            删除事件日志
            </summary>
            <param name="logID"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IEventLogHelper.DeleteEvent(Framework.Events.SFEventLog,System.String,System.String)">
            <summary>
            删除事件日志
            </summary>
            <param name="msg"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IEventLogHelper.ClearEvents(System.DateTime,System.DateTime,System.Int32,System.String,System.String)">
            <summary>
            清除一段时间内的某种类型事件
            </summary>
            <param name="beginTime"></param>
            <param name="endTime"></param>
            <param name="eventID"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IEventLogHelper.GetEvent(System.Int32,System.String,System.String)">
            <summary>
            读取日志
            </summary>
            <param name="logID"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IEventLogHelper.GetLogs(System.Int32,System.Int32,System.String,System.Int32,Framework.Message.MessageOrder,System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            读取事件日志列表
            </summary>
            <param name="userID">用户ID（即被针对的用户ID），传入0或负值，表示所有用户</param>
            <param name="operatorID">操作员ID，传入0或负值，表示所有操作员</param>
            <param name="machine">机器，传入空值，表示所有机器</param>
            <param name="eventID">事件类型</param>
            <param name="order">排序</param>
            <param name="pageSize">每页大小</param>
            <param name="pageIndex">页号，从0开始</param>
            <param name="totalCount">总记录数，输出</param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="T:Framework.Message.LogMessageEntity">
            <summary>
            消息日志
            </summary>
        </member>
        <member name="M:Framework.Message.LogMessageEntity.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Framework.Message.LogMessageEntity.OperatorID">
            <summary>
            操作人员ID
            </summary>
        </member>
        <member name="P:Framework.Message.LogMessageEntity.UserID">
            <summary>
            操作对像的用户ID
            </summary>
        </member>
        <member name="T:Framework.Message.MessageConfigurationHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Framework.Message.MessageConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Components.LocalizationConfigurationHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Framework.Components.LocalizationConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Create
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Components.ISiteProvider">
            <summary>
            站点处理接口
            如站点设置及其它公用处理接口
            </summary>
        </member>
        <member name="M:Framework.Components.ISiteProvider.CalculateSiteStatistics(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            统计站点信息
            </summary>
            <param name="settingsID"></param>
            <param name="updateWindow"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
        </member>
        <member name="M:Framework.Components.ISiteProvider.LoadSiteSettings(System.String,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            读取站点配置
            </summary>
            <param name="application"></param>
            <param name="settingsID"></param>
            <param name="returnAll"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ISiteProvider.LoadAllSiteSettings(System.String,System.String)">
            <summary>
            获得站点设置列表
            </summary>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ISiteProvider.SaveSiteSettings(Framework.Components.SiteSettings,System.String,System.String)">
            <summary>
            保存站点设置
            </summary>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <param name="siteSettings"></param>
        </member>
        <member name="M:Framework.Components.ISiteProvider.GetAllCensors(System.String,System.String)">
            <summary>
            获得敏感词汇列表
            </summary>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ISiteProvider.GetCensorsByLevel(System.Int16,System.String,System.String)">
            <summary>
            根据严重级别获得敏感词汇列表
            </summary>
            <param name="levelID">严重级别</param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ISiteProvider.CreateCensor(Framework.Components.Censor,System.String,System.String)">
            <summary>
            创建敏感词汇
            </summary>
            <param name="censor"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ISiteProvider.DeleteCensor(Framework.Components.Censor,System.String,System.String)">
            <summary>
            删除敏感词汇
            </summary>
            <param name="censor"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ISiteProvider.UpdateCensor(Framework.Components.Censor,System.String,System.String)">
            <summary>
            修改敏感词汇
            </summary>
            <param name="censor"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ISiteProvider.CensorContent(System.String,System.String,System.String)">
            <summary>
            用敏感词汇格式化文本
            支持正则表达式
            </summary>
            <param name="formattedContent">需要检查的文本</param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ISiteProvider.CensorContent(System.String,System.Collections.Generic.IList{Framework.Components.Censor},System.String,System.String)">
            <summary>
            用指定敏感词汇格式化文本
            </summary>
            <param name="formattedContent">需要检查的文本</param>
            <param name="censors"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ISiteProvider.ContainCensors(System.String,System.String,System.String)">
            <summary>
            检查是否包含敏感词汇
            </summary>
            <param name="formattedContent">需要检查的文本</param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ISiteProvider.ContainCensors(System.String,System.Collections.Generic.IList{Framework.Components.Censor},System.String,System.String)">
            <summary>
            检查是否包含敏感词汇
            </summary>
            <param name="formattedContent">需要检查的文本</param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <param name="censors"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ISiteProvider.GetDisallowedNames(System.String,System.String)">
            <summary>
            获得不允许使用的用户名清单
            </summary>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ISiteProvider.CreateUpdateDeleteDisallowedName(System.String,Framework.Enumerations.DataProviderAction,System.String,System.String)">
            <summary>
            添加删除修改不允许使用的用户名清单
            </summary>
            <param name="name"></param>
            <param name="action"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ISiteProvider.GetDisallowedName(System.String,System.String,System.String)">
            <summary>
            获得某个不允许使用的用户名清单
            </summary>
            <param name="name"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ISiteProvider.CreateUpdateDeleteBlockedIpAddress(Framework.Components.Entities.SiteBannedAddress,Framework.Enumerations.DataProviderAction,System.String,System.String)">
            <summary>
            封锁某个IP，将其加入到封锁列表中
            </summary>
            <param name="b"></param>
            <param name="action"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ISiteProvider.GetBlockedIpAddresses(System.String,System.String)">
            <summary>
            获得封锁的IP列表
            </summary>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ISiteProvider.GetBlockedIpAddress(System.Int64,System.String,System.String)">
            <summary>
            获得某一项封锁记录
            </summary>
            <param name="ipID"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ISiteProvider.GetBlockedIpAddress(System.String,System.String,System.String)">
            <summary>
            获得某一项封锁记录
            </summary>
            <param name="ipAddressToValid"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ISiteProvider.CreateUpdateDeleteSiteAnonymousUser(Framework.Components.Entities.SiteAnonymousUser,Framework.Enumerations.DataProviderAction,System.String,System.String)">
            <summary>
            维护匿名用户信息
            </summary>
            <param name="sau"></param>
            <param name="action"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ISiteProvider.GetSiteAnonymousUsers(System.String,System.String)">
            <summary>
            获得匿名用户列表
            </summary>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ISiteProvider.ClearSiteAnonymousUsers(System.DateTime,System.String,System.String)">
            <summary>
            清除某个时间范围以前的匿名用户
            </summary>
            <param name="endTime"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ISiteProvider.GetSiteAnonymousUser(System.String,System.String,System.String)">
            <summary>
            获得某个匿名用户信息
            </summary>
            <param name="sn">系统分配给匿名用户的唯一识别ID</param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ISiteProvider.ValidVerifyCode(System.String,System.String,System.String,System.String)">
            <summary>
            验证用户认证码，主要防止使用机器来群发消息
            </summary>
            <param name="sn">根据认证生成的序列号</param>
            <param name="code">认证码</param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns>成功或失败</returns>
        </member>
        <member name="M:Framework.Components.ISiteProvider.GetVerifyCode(System.String,System.String,System.String)">
            <summary>
            获得用户验证吗
            </summary>
            <param name="sn">用户端识别标志</param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="T:Framework.Events.CommandCallBack">
            <summary>
            命令回调事件委托
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Framework.Events.CommandCallBackArgs">
            <summary>
            命令回调参数
            
            </summary>
        </member>
        <member name="F:Framework.Events.CommandCallBackArgs._attributes">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Events.CommandCallBackArgs._commandName">
            <summary>
            命令名称
            </summary>
        </member>
        <member name="F:Framework.Events.CommandCallBackArgs._data">
            <summary>
            
            </summary>
        </member>
        <member name="M:Framework.Events.CommandCallBackArgs.#ctor(System.String,System.Object,System.Collections.Specialized.NameValueCollection)">
            <summary>
            构造函数
            </summary>
            <param name="commandName"></param>
            <param name="data"></param>
            <param name="attributes"></param>
        </member>
        <member name="M:Framework.Events.CommandCallBackArgs.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="commandName"></param>
            <param name="data"></param>
        </member>
        <member name="M:Framework.Events.CommandCallBackArgs.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="commandName"></param>
        </member>
        <member name="M:Framework.Events.CommandCallBackArgs.SetDateTime(System.String,System.DateTime)">
            <summary>
            存储日期
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Framework.Events.CommandCallBackArgs.SetInt(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Framework.Events.CommandCallBackArgs.SetString(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Framework.Events.CommandCallBackArgs.SetBoolean(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Framework.Events.CommandCallBackArgs.GetDateTime(System.String,System.DateTime)">
            <summary>
            从中读取日期型值
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Events.CommandCallBackArgs.GetBool(System.String,System.Boolean)">
            <summary>
            获取扩展属性值（布尔类型值）
            </summary>
        </member>
        <member name="M:Framework.Events.CommandCallBackArgs.GetInt(System.String,System.Int32)">
            <summary>
            获取扩展属性值（整型值）
            </summary>
        </member>
        <member name="M:Framework.Events.CommandCallBackArgs.GetString(System.String,System.String)">
            <summary>
            获取扩展属性值（字符串类型值）
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Events.CommandCallBackArgs.GetExtendedAttribute(System.String)">
            <summary>
            获取扩展属性值
            </summary>
        </member>
        <member name="P:Framework.Events.CommandCallBackArgs.CommandName">
            <summary>
            命令名称
            </summary>
        </member>
        <member name="P:Framework.Events.CommandCallBackArgs.Data">
            <summary>
            对象
            </summary>
        </member>
        <member name="P:Framework.Events.CommandCallBackArgs.Attributes">
            <summary>
            扩展属性
            </summary>
        </member>
        <member name="T:Framework.Enumerations.UserType">
            <summary>
            用户类型
            </summary>
        </member>
        <member name="F:Framework.Enumerations.UserType.Personal">
            <summary>
            会员
            </summary>
        </member>
        <member name="F:Framework.Enumerations.UserType.NotSet">
            <summary>
            未设
            </summary>
        </member>
        <member name="F:Framework.Enumerations.UserType.Editor">
            <summary>
            编辑
            </summary>
        </member>
        <member name="F:Framework.Enumerations.UserType.Manager">
            <summary>
            管理人员
            </summary>
        </member>
        <member name="F:Framework.Enumerations.UserType.Business">
            <summary>
            商务人员
            </summary>
        </member>
        <member name="T:Framework.Enumerations.PermissionType">
            <summary>
            权限类型
            </summary>
        </member>
        <member name="T:Framework.Components.QueryParameters">
            <summary>
            查询参数设置
            </summary>
        </member>
        <member name="M:Framework.Components.QueryParameters.GetEnumOptions(System.Type,System.Int32)">
            <summary>
            读取枚举类型的复合值
            前提是枚举类型的值可以按位来与及或
            </summary>
            <param name="enumType">枚举类型的Type</param>
            <param name="status">当前值</param>
            <returns></returns>
        </member>
        <member name="P:Framework.Components.QueryParameters.OperatorID">
            <summary>
            操作员ID
            </summary>
        </member>
        <member name="T:Framework.Components.Entities.SiteAnonymousUserSet">
            <summary>
            Summary description for UserSet.
            </summary>
        </member>
        <member name="M:Framework.Components.Entities.SiteAnonymousUserSet.Add(Framework.Components.Entities.SiteAnonymousUser)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Entities.SiteAnonymousUserSet.Contains(Framework.Components.Entities.SiteAnonymousUser)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Entities.SiteAnonymousUserSet.IndexOf(Framework.Components.Entities.SiteAnonymousUser)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Entities.SiteAnonymousUserSet.Insert(System.Int32,Framework.Components.Entities.SiteAnonymousUser)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Framework.Components.Entities.SiteAnonymousUserSet.Remove(Framework.Components.Entities.SiteAnonymousUser)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Framework.Components.Entities.SiteAnonymousUserSet.CurrentPos">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.SiteAnonymousUserSet.TotalRecordCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.SiteAnonymousUserSet.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:CompressionSink.CompressionServerSinkProvider">
            <summary>
            CompressionServerSinkProvider
            </summary>
        </member>
        <member name="M:CompressionSink.CompressionServerSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            CompressionServerSinkProvider
            </summary>
            <param name="properties"></param>
            <param name="providerData"></param>
        </member>
        <member name="M:CompressionSink.CompressionServerSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelReceiver)">
            <summary>
            CreateSink
            </summary>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="M:CompressionSink.CompressionServerSinkProvider.GetChannelData(System.Runtime.Remoting.Channels.IChannelDataStore)">
            <summary>
            GetChannelData
            </summary>
            <param name="channelData"></param>
        </member>
        <member name="P:CompressionSink.CompressionServerSinkProvider.Next">
            <summary>
            Next
            </summary>
        </member>
        <member name="T:Framework.Components.InputValid">
            <summary>
            通用验证机制
            </summary>
            <Author>Daniel</Author>
            <DateTime>2007-04-21</DateTime>
        </member>
        <member name="F:Framework.Components.InputValid.REGEXP_IS_VALID_EMAIL">
            <summary>
            电子邮件校验常量
            </summary>
        </member>
        <member name="F:Framework.Components.InputValid.REGEXP_IS_VALID_URL">
            <summary>
            网址校验常量
            </summary>
        </member>
        <member name="F:Framework.Components.InputValid.REGEXP_IS_IPADDRESS">
            <summary>
            检查是否为一个IP地址
            </summary>
        </member>
        <member name="F:Framework.Components.InputValid.REGEXP_IS_VALID_SSN">
            <summary>
            身份证校验常量 
            </summary>
        </member>
        <member name="F:Framework.Components.InputValid.REGEXP_IS_VALID_DEMICAL">
            <summary>
            数值校验常量
            </summary>
        </member>
        <member name="F:Framework.Components.InputValid.REGEXP_IS_VALID_DATE">
            <summary>
            日期校验常量(2000-1-1)为标准格式
            </summary>
        </member>
        <member name="F:Framework.Components.InputValid.REGEXP_IS_VALID_QQ">
            <summary>
            QQ号码校验常量
            </summary>
        </member>
        <member name="F:Framework.Components.InputValid.REGEXP_IS_VALID_MOBILEPHONE">
            <summary>
            手机号码验证常量
            </summary>
        </member>
        <member name="M:Framework.Components.InputValid.IsValidEmail(System.String)">
            <summary>
            校验 电子邮件 格式
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.InputValid.IsValidSSN(System.String)">
            <summary>
            校验 身份证 格式
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.InputValid.IsValidUrl(System.String)">
            <summary>
            校验 网址 格式
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.InputValid.IsValidIP(System.String)">
            <summary>
            校验 IP 格式
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.InputValid.IsValidDate(System.String)">
            <summary>
            校验 日期 格式
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.InputValid.IsValidInt(System.String)">
            <summary>
            校验 整数 格式
            </summary>
            <param name="value">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.InputValid.IsValidDouble(System.String)">
            <summary>
            校验 双精度小数 格式
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.InputValid.IsValidQQ(System.String)">
            <summary>
            校验 QQ 格式
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.InputValid.IsValidMobilephone(System.String)">
            <summary>
            校验 手机 格式
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.InputValid.IsValidDecimal(System.String)">
            <summary>
            是否有效小数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.InputValid.IsValidUnsignedInt(System.String)">
            <summary>
            是否有效无符号整型
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.InputValid.IsValid(System.String,System.String)">
            <summary>
            根据数据类型检查值是否合法
            NULL值被认为是合法的
            </summary>
            <param name="value">值</param>
            <param name="typeName">类型名，如int,long,int32等等</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.InputValid.IsUndotInt(System.String)">
            <summary>
            整数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.InputValid.IsUnsignInt(System.String)">
            <summary>
            无符号整数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.InputValid.IsNumeric(System.String)">
            <summary>
            浮点型
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.InputValid.IsInt(System.String)">
            <summary>
            整型
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.InputValid.IsUnsign(System.String)">
            <summary>
            无符号数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Client.Message.EmailMessageProvider">
            <summary>
            邮件处理库
            系统将邮件写到用户消息中，系统后台服务将自动将邮件发送出去。
            </summary>
        </member>
        <member name="T:Framework.Message.MessageProvider">
            <summary>
            消息提供者抽象类
            </summary>
        </member>
        <member name="M:Framework.Message.MessageProvider.Instance(Framework.Message.MessageStorage,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="ms"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageProvider.Instance(Framework.Message.MessageStorage,System.Collections.Generic.IDictionary{System.String,Framework.Components.Provider},System.String,System.String)">
            <summary>
            
            </summary>
            <param name="ms"></param>
            <param name="providers"></param>
            <param name="guid">请求方唯一识别码</param>
            <param name="ipAddress">请求方IP</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageProvider.Send(Framework.Message.MessageEntity,System.String,System.String)">
            <summary>
            发送消息
            </summary>
            <param name="msg">消息实体</param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageProvider.Create(System.Int32,System.Int32,Framework.Message.MessageEntity,System.String,System.String)">
            <summary>
            创建消息，但不一定发送，即时消息将会立即发送
            </summary>
            <param name="settingsID">站点ＩＤ</param>
            <param name="userID">用户ＩＤ</param>
            <param name="msg">消息实体</param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageProvider.Parse(System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>
            从XML文档中转换成消息实体
            </summary>
            <param name="doc"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageProvider.CreateMessageNode(System.Xml.XmlDocument,Framework.Message.MessageEntity)">
            <summary>
            将消息实体转换成XML文档
            </summary>
            <param name="doc"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageProvider.ToException(Framework.Message.MessageEntity)">
            <summary>
            将消息转换成为异常
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageProvider.Parse(Framework.Components.SFException)">
            <summary>
            将异常转化为消息
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageProvider.Parse(Framework.Events.SFEventLog)">
            <summary>
            将日志转化为消息
            </summary>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageProvider.ToEventLog(Framework.Message.MessageEntity)">
            <summary>
            将日志转化为消息
            </summary>
            <param name="me"></param>
            <returns></returns>
        </member>
        <member name="M:Client.Message.EmailMessageProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="config"></param>
        </member>
        <member name="M:Client.Message.EmailMessageProvider.Send(Framework.Message.MessageEntity,System.String,System.String)">
            <summary>
            邮件发送
            系统将邮件写到用户消息中，系统后台服务将自动将邮件发送出去。
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Client.Components.ClientConfiguration">
            <summary>
            客户端系统配置
            配置文件名默认为：ClientConfiguration.xml
            位于客户端运行目录下。
            </summary>
        </member>
        <member name="F:Client.Components.ClientConfiguration.CacheKey">
            <summary>
            缓冲ＫＥＹ
            </summary>
        </member>
        <member name="F:Client.Components.ClientConfiguration.remoteObjects">
            <summary>
            适配器部分配置
            </summary>
        </member>
        <member name="F:Client.Components.ClientConfiguration.messageProviders">
            <summary>
            消息处理
            </summary>
        </member>
        <member name="F:Client.Components.ClientConfiguration.providers">
            <summary>
            适配器部分配置
            </summary>
        </member>
        <member name="F:Client.Components.ClientConfiguration.membership">
            <summary>
            用户membership配置
            </summary>
        </member>
        <member name="F:Client.Components.ClientConfiguration.htmlEditor">
            <summary>
            文本编辑器
            </summary>
        </member>
        <member name="F:Client.Components.ClientConfiguration.roleManager">
            <summary>
            用户roleManager配置
            </summary>
        </member>
        <member name="F:Client.Components.ClientConfiguration.profile">
            <summary>
            用户profile配置
            </summary>
        </member>
        <member name="F:Client.Components.ClientConfiguration.anonymousIdentification">
            <summary>
            匿名用户配置
            </summary>
        </member>
        <member name="F:Client.Components.ClientConfiguration.XmlDoc">
            <summary>
            ＤＯＣ文档
            </summary>
        </member>
        <member name="F:Client.Components.ClientConfiguration.cacheFactor">
            <summary>
            缓冲时间
            </summary>
        </member>
        <member name="F:Client.Components.ClientConfiguration.callRemoteObject">
            <summary>
            是否远程调用，即物理三层，应用服务器与表现层的服务器分离
            </summary>
        </member>
        <member name="M:Client.Components.ClientConfiguration.GetConfigSection(System.String)">
            <summary>
            Enables reading of the configuration file's XML without reloading the file
            </summary>
            <param name="nodePath"></param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.ClientConfiguration.LoadValuesFromConfigurationXml">
            <summary>
            Loads the forums configuration values.
            </summary>
            
        </member>
        <member name="M:Client.Components.ClientConfiguration.GetUserProviders(System.Xml.XmlNode)">
            <summary>
            Internal class used to populate the available providers.
            </summary>
            <param name="node">XmlNode of the providers to add/remove/clear.</param>
            
        </member>
        <member name="M:Client.Components.ClientConfiguration.GetProviders(System.Xml.XmlNode,System.Collections.Generic.IDictionary{System.String,Framework.Components.Provider})">
            <summary>
            Internal class used to populate the available providers.
            </summary>
            <param name="node">XmlNode of the providers to add/remove/clear.</param>
            
        </member>
        <member name="M:Client.Components.ClientConfiguration.GetMessageProviders(System.Xml.XmlNode,System.Collections.Generic.IDictionary{System.String,Framework.Components.Provider})">
            <summary>
            Internal class used to populate the available providers.
            </summary>
            <param name="node">XmlNode of the providers to add/remove/clear.</param>
            
        </member>
        <member name="M:Client.Components.ClientConfiguration.GetRemoteObjects(System.Xml.XmlNode,System.Collections.Generic.IDictionary{System.String,Framework.Remoting.ServiceModule})">
            <summary>
            Internal class used to populate the available providers.
            </summary>
            <param name="node">XmlNode of the providers to add/remove/clear.</param>
            
        </member>
        <member name="P:Client.Components.ClientConfiguration.RemoteObjects">
            <summary>
            远程对像提供器配置
            </summary>
        </member>
        <member name="P:Client.Components.ClientConfiguration.MessageProviders">
            <summary>
            消息处理提供器
            </summary>
        </member>
        <member name="P:Client.Components.ClientConfiguration.Providers">
            <summary>
            数据提供器配置
            </summary>
        </member>
        <member name="P:Client.Components.ClientConfiguration.CacheFactor">
            <summary>
            缓冲时间
            </summary>
        </member>
        <member name="P:Client.Components.ClientConfiguration.IsDebug">
            <summary>
            是否在调试程序
            </summary>
        </member>
        <member name="P:Client.Components.ClientConfiguration.CallRemoteObject">
            <summary>
            是否调用远程对像
            如果不调用，说明系统布署为逻辑三层
            </summary>
        </member>
        <member name="P:Client.Components.ClientConfiguration.FilesPath">
            <summary>
            系统根目录所在
            </summary>
        </member>
        <member name="P:Client.Components.ClientConfiguration.ApplicationOverride">
            <summary>
            ApplicationＵＲＬ根重写
            </summary>
        </member>
        <member name="P:Client.Components.ClientConfiguration.EnableVirtualization">
            <summary>
            允许虚拟化
            </summary>
        </member>
        <member name="P:Client.Components.ClientConfiguration.Membership">
            <summary>
            用户membership配置
            </summary>
        </member>
        <member name="P:Client.Components.ClientConfiguration.RoleManager">
            <summary>
            用户roleManager配置
            </summary>
        </member>
        <member name="P:Client.Components.ClientConfiguration.HtmlEditor">
            <summary>
            文本编辑器配置
            </summary>
        </member>
        <member name="P:Client.Components.ClientConfiguration.Profile">
            <summary>
            用户profile配置
            </summary>
        </member>
        <member name="P:Client.Components.ClientConfiguration.AnonymousIdentification">
            <summary>
            匿名用户配置
            </summary>
        </member>
        <member name="P:Client.Components.ClientConfiguration.DefaultLanguage">
            <summary>
            用户默认语种
            </summary>
        </member>
        <member name="P:Client.Components.ClientConfiguration.SettingsID">
            <summary>
            当前系统ＩＤ
            </summary>
        </member>
        <member name="P:Client.Components.ClientConfiguration.SiteDomain">
            <summary>
            当前站点域名
            </summary>
        </member>
        <member name="P:Client.Components.ClientConfiguration.TockenKey">
            <summary>
            Key
            </summary>
        </member>
        <member name="T:Framework.Securities.MD5">
            <summary>
            MD5加密
            </summary>
        </member>
        <member name="M:Framework.Securities.MD5.GeneratePasswordSalt">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Securities.MD5.GeneratePasswordHash(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="password"></param>
            <param name="passwordSalt"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Securities.MD5.GeneratePasswordAnswerHash(System.String)">
            <summary>
            
            </summary>
            <param name="answer"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Securities.MD5.DecodePassword(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="passwordHash"></param>
            <param name="passwordSalt"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Remoting.RemotingHelper">
            <summary>
            根据传入的Type类型，从Hashtable中获取WellKnownClientTypeEntry，
            然后通过调用Activator.GetObject()方法，得到需要的Remote Object。
            </summary>
        </member>
        <member name="M:Framework.Remoting.RemotingHelper.GetObject(System.Type)">
            <summary>
            　获得对象
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Remoting.RemotingHelper.InitTypeCache">
            <summary>
            负责初始化Hashtable, 
            并根据Remoting Configuration配置文件填入Remote Object Type和WellKnownClientTypeEntry
            </summary>
        </member>
        <member name="T:Framework.Search.DefaultPeopleSearchFactory">
            <summary>
            搜索查询的所有字段
            </summary>
        </member>
        <member name="M:Framework.Search.DefaultPeopleSearchFactory.GetByUserID(System.Int32)">
            <summary>
            用户ＩＤ
            </summary>
            <param name="userID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.DefaultPeopleSearchFactory.Get(System.Int32)">
            <summary>
            事件ＩＤ
            </summary>
            <param name="caseID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.DefaultPeopleSearchFactory.Save(Framework.Search.SearchCase)">
            <summary>
            保存
            </summary>
            <param name="searchCase"></param>
        </member>
        <member name="M:Framework.Search.DefaultPeopleSearchFactory.GetResult(Framework.Search.SearchCase,System.Int32,System.Int32)">
            <summary>
            获得结果
            </summary>
            <param name="searchCase"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.DefaultPeopleSearchFactory.GetWhereClause(Framework.Search.SearchCase)">
            <summary>
            用于构造分页查询中的条件
            也可以在此检查条件值是否正确
            </summary>
            <param name="searchCase"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Search.DefaultPeopleFieldFactory">
            <summary>
            获得查询的所有字段
            </summary>
        </member>
        <member name="T:Framework.Search.IFieldFactory">
            <summary>
            字段的处理
            涉及到某个方案使用的可选条件的处理
            如：1、所有的可选择条件，及条件类型
            2、条件字段所属的表
            </summary>
        </member>
        <member name="M:Framework.Search.IFieldFactory.GetFields">
            <summary>
            获得字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.IFieldFactory.GetCompareOperate(Framework.Search.FieldItem)">
            <summary>
            获得比较符操作
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.DefaultPeopleFieldFactory.GetFields">
            <summary>
            获得信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:Framework.Message.MessageTemplateProvider">
            <summary>
            消息格式及格式化处理提供器
            此类使用则必须在app.config（ＣＳ程序）或web.config（ＢＳ程序）中加入相关的配置选项
            详情请见MessageConfiguration文件中的说明
            此类无法直接使用，请使用此类的实现类，可以参见Framework.Client.ClientMessageTemplateProvider，或者其它相关文件
            对应的消息格式一般存在于当前目录下的\languages\zh-CN\emails\XXXXs.xml中XXXX的名称与MessageCategory中的名称一样。
            </summary>
        </member>
        <member name="T:Framework.Remoting.RemoteObject">
            <summary>
            远程业务对象基类
            </summary>
        </member>
        <member name="F:Framework.Message.MessageTemplateProvider.MessageTemplateProviderName">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:Framework.Message.MessageTemplateProvider.Instance">
            <summary>
            Returns an instance of the user-specified data provider class.
            </summary>
            <returns>An instance of the user-specified data provider class.  This class must inherit the
            CommonDataProvider interface.</returns>
        </member>
        <member name="M:Framework.Message.MessageTemplateProvider.Instance(Framework.Components.Provider)">
            <summary>
            格式文档
            </summary>
            <param name="dataProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageTemplateProvider.CreateDefaultCommonProvider">
            <summary>
            Creates the Default CommonDataProvider
            </summary>
        </member>
        <member name="M:Framework.Message.MessageTemplateProvider.GetTemplate(Framework.Message.MessageCategory,Framework.Message.MessageTemplateType,System.String)">
            <summary>
            获得消息模板
            </summary>
            <param name="mc">消息类型：如日志、短信、邮件等，见MessageCategory</param>
            <param name="mtp">模块类型</param>
            <param name="language">语言：如中文、英文等,一般为“en-Us,zh-CN"等</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageTemplateProvider.GetMicroValue(System.String,System.String)">
            <summary>
            独得某个表达式对应的值
            </summary>
            <param name="name"></param>
            <param name="language">语言：如中文、英文等,一般为“en-Us,zh-CN"等</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageTemplateProvider.LoadMessageTemplates(Framework.Message.MessageCategory,System.String)">
            <summary>
            从模板文件中Ｌｏａｄ模板
            １：有语言版本
            ２：不同的类型的消息存在不同的文件中
            </summary>
            <param name="mc">消息类型：如日志、短信、邮件等，见MessageCategory</param>
            <param name="language">语言：如中文、英文等,一般为“en-Us,zh-CN"等</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageTemplateProvider.LoadMicroTemplates(System.String)">
            <summary>
            从模板文件中Ｌｏａｄ宏替换的模板
            １：有语言版本
            ２：不同的类型的消息存在不同的文件中
            </summary>
            <param name="language">语言：如中文、英文等,一般为“en-Us,zh-CN"等</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageTemplateProvider.FormatMessage(Framework.Message.MessageEntity,Framework.Components.UserInfo)">
            <summary>
            根据现有消息及用户相关信息格式化消息
            </summary>
            <param name="me"></param>
            <param name="userSendTo"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageTemplateProvider.FormatMessage(Framework.Message.MessageTemplate,Framework.Components.UserInfo)">
            <summary>
            根据模板格式化消息
            </summary>
            <param name="mt"></param>
            <param name="userSendTo"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageTemplateProvider.FormatMessage(Framework.Message.MessageEntity,Framework.Components.UserInfo,System.String)">
            <summary>
            根据现有消息及用户相关信息格式化消息
            </summary>
            <param name="me"></param>
            <param name="userSendTo"></param>
             <param name="attachementFile">附件</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageTemplateProvider.FormatMessage(Framework.Message.MessageTemplate,Framework.Components.UserInfo,System.String)">
            <summary>
            根据模板格式化消息
            </summary>
            <param name="mt"></param>
            <param name="userSendTo"></param>
            <param name="attachementFile">附件</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageTemplateProvider.FormatMessageContent(System.String,System.Object)">
            <summary>
            根据指定对像格式化数据
            </summary>
            <param name="message"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageTemplateProvider.SaveTemplate(Framework.Message.MessageCategory,Framework.Message.MessageTemplateType,System.String,System.String,System.String,System.String)">
            <summary>
            保存格式
            </summary>
            <param name="mc"></param>
            <param name="mt"></param>
            <param name="title"></param>
            <param name="from"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageTemplateProvider.FormatPlainTextAsHtml(System.String)">
            <summary>
            文本格式转化成html格式
            </summary>
            <param name="stringToFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageTemplateProvider.FormatHtmlAsPlainText(System.String)">
            <summary>
            html转化成文本格式
            </summary>
            <param name="stringToFormat"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Enumerations.AccountActivation">
            <summary>
            帐户激活类型
            </summary>
        </member>
        <member name="F:Framework.Enumerations.AccountActivation.Automatic">
            <summary>
            自动激活
            </summary>
        </member>
        <member name="F:Framework.Enumerations.AccountActivation.Email">
            <summary>
            邮件
            </summary>
        </member>
        <member name="F:Framework.Enumerations.AccountActivation.AdminApproval">
            <summary>
            批准
            </summary>
        </member>
        <member name="F:Framework.Enumerations.AccountActivation.InvitationOnly">
            <summary>
            仅通过邀请
            </summary>
        </member>
        <member name="T:Framework.Components.IContent">
            <summary>
            内容处理接口
            </summary>
        </member>
        <member name="P:Framework.Components.IContent.Body">
            <summary>
            Returns the body of the post.
            </summary>
            <remarks>
            The body of the post is stored in a raw format in the database.
            </remarks>
        </member>
        <member name="P:Framework.Components.IContent.FormattedBody">
            <summary>
            Returns a pre-formatted version of the body of the post.
            </summary>
            <remarks>
            The FormattedBody of the post is stored in a pre-formatted HTML.
            </remarks>
        </member>
        <member name="T:Framework.Events.UserLoginCallBack">
            <summary>
            用户登录回调事件委托
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Framework.Events.UserLoginCallBackArgs">
            <summary>
            用户登录回调参数
            
            </summary>
        </member>
        <member name="M:Framework.Events.UserLoginCallBackArgs.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="userID">用户ID</param>
            <param name="loginName">登录名</param>
            <param name="password">密码</param>
            <param name="serverName">应用服务器名称</param>
            <param name="publicKey">公用认证Key</param>
            <param name="ipAddress">客户端IP</param>
        </member>
        <member name="M:Framework.Events.UserLoginCallBackArgs.#ctor(System.Int32,System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="userID">用户ID</param>
            <param name="loginName">登录名</param>
            <param name="password">密码</param>
            <param name="serverName">应用服务器名称</param>
            <param name="publicKey">公用认证Key</param>
            <param name="ipAddress">客户端IP</param>
            <param name="settingsID">当前站点ID</param>
        </member>
        <member name="P:Framework.Events.UserLoginCallBackArgs.LoginName">
            <summary>
            用户登录名
            </summary>
        </member>
        <member name="P:Framework.Events.UserLoginCallBackArgs.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:Framework.Events.UserLoginCallBackArgs.ServerName">
            <summary>
            应用服务器名称
            </summary>
        </member>
        <member name="P:Framework.Events.UserLoginCallBackArgs.UserID">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:Framework.Events.UserLoginCallBackArgs.PublicKey">
            <summary>
            公用KEy
            </summary>
        </member>
        <member name="P:Framework.Events.UserLoginCallBackArgs.IPAddress">
            <summary>
            IPAddress
            </summary>
        </member>
        <member name="P:Framework.Events.UserLoginCallBackArgs.SettingsID">
            <summary>
            站点设置ID
            </summary>
        </member>
        <member name="T:Framework.Components.CDataSet`1">
            <summary>
            扩展数据集类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Framework.Components.CDataSet`1.Title">
            <summary>
            数据标题，描述数据集的内容
            </summary>
        </member>
        <member name="P:Framework.Components.CDataSet`1.RowCount">
            <summary>
            数据项总数
            </summary>
        </member>
        <member name="P:Framework.Components.CDataSet`1.HasData">
            <summary>
            是否有数据项
            </summary>
        </member>
        <member name="T:Framework.Server.SqlHelperParameterCache">
            <summary>
            SQL参数缓存组件
            </summary>
        </member>
        <member name="T:Framework.Components.Cooperate">
            <summary>
            合作伙伴
            </summary>
        </member>
        <member name="F:Framework.Components.Cooperate.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="F:Framework.Components.Cooperate.IP">
            <summary>
            IP
            </summary>
        </member>
        <member name="F:Framework.Components.Cooperate.KEY">
            <summary>
            Key
            </summary>
        </member>
        <member name="F:Framework.Components.Cooperate.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:Framework.Components.Cooperate.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Framework.Components.Cooperate.#ctor(System.Data.DataRow)">
            <summary>
            从DataRow中读取合作者信息
            </summary>
            <param name="row"></param>
        </member>
        <member name="T:Framework.Components.Entities.SiteStatistic">
            <summary>
            表《SiteStatistics》对应的类
            </summary>
        </member>
        <member name="T:Framework.Components.Entities.Base.SiteStatisticBase">
            <summary>
            表《SiteStatistics》对应的基类
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteStatisticBase.OrgDateCreated">
            <summary>
            DateCreated
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteStatisticBase.DateCreated">
            <summary>
            DateCreated
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteStatisticBase.SettingsID">
            <summary>
            SettingsID
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteStatisticBase.TotalUsers">
            <summary>
            TotalUsers
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteStatisticBase.TotalArticles">
            <summary>
            TotalArticles
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteStatisticBase.TotalPosts">
            <summary>
            TotalPosts
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteStatisticBase.TotalTrades">
            <summary>
            TotalTrades
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteStatisticBase.DaysPosts">
            <summary>
            DaysPosts
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteStatisticBase.DaysArticles">
            <summary>
            DaysArticles
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteStatisticBase.DaysUsers">
            <summary>
            DaysUsers
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteStatisticBase.DaysTrades">
            <summary>
            DaysTrades
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteStatisticBase.DaysViews">
            <summary>
            DaysViews
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteStatisticBase.DaysIPs">
            <summary>
            DaysIPs
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteStatisticBase.ExtendData">
            <summary>
            ExtendData
            </summary>
        </member>
        <member name="M:Framework.Components.Entities.SiteStatistic.CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Entities.SiteStatistic.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Entities.SiteStatistic.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Framework.Components.Entities.Base.SiteSettingBase">
            <summary>
            表《SiteSettings》对应的基类
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteSettingBase.OrgSettingsID">
            <summary>
            SettingsID
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteSettingBase.SettingsID">
            <summary>
            SettingsID
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteSettingBase.Disabled">
            <summary>
            Disabled
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteSettingBase.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteSettingBase.SettingsXML">
            <summary>
            SettingsXML
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteSettingBase.SettingsKey">
            <summary>
            SettingsKey
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteSettingBase.ApplicationName">
            <summary>
            ApplicationName
            </summary>
        </member>
        <member name="T:CompressionSink.CompressionClientSink">
            <summary>
            CompressionClientSink
            </summary>
        </member>
        <member name="M:CompressionSink.CompressionClientSink.#ctor(System.Runtime.Remoting.Channels.IClientChannelSink)">
            <summary>
            CompressionClientSink
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:CompressionSink.CompressionClientSink.AsyncProcessRequest(System.Runtime.Remoting.Channels.IClientChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>
            AsyncProcessRequest
            </summary>
            <param name="sinkStack"></param>
            <param name="msg"></param>
            <param name="headers"></param>
            <param name="stream"></param>
        </member>
        <member name="M:CompressionSink.CompressionClientSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>
            AsyncProcessResponse
            </summary>
            <param name="sinkStack"></param>
            <param name="state"></param>
            <param name="headers"></param>
            <param name="stream"></param>
        </member>
        <member name="M:CompressionSink.CompressionClientSink.GetRequestStream(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>
            GetRequestStream
            </summary>
            <param name="msg"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:CompressionSink.CompressionClientSink.ProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>
            ProcessMessage
            </summary>
            <param name="msg"></param>
            <param name="requestHeaders"></param>
            <param name="requestStream"></param>
            <param name="responseHeaders"></param>
            <param name="responseStream"></param>
        </member>
        <member name="P:CompressionSink.CompressionClientSink.NextChannelSink">
            <summary>
            IClientChannelSink
            </summary>
        </member>
        <member name="T:Client.Components.ClientSearchCaseProvider">
            <summary>
            本地搜索方案处理类
            一般情况下，系统将搜索方案存储在数据库中
            </summary>
        </member>
        <member name="T:Framework.Search.ISearchCaseProvider">
            <summary>
            搜索方案数据处理器
            </summary>
        </member>
        <member name="M:Framework.Search.ISearchCaseProvider.GetSearchCases(System.String,System.Int32)">
            <summary>
            获得所有指定范围的Ｃａｓｅ
            </summary>
            <param name="queryName">查询列表的名称或者文件名（当Ｃａｓｅ保存为ＸＭＬ时）</param>
            <param name="operatorID">操作员，小于０表示不限</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.ISearchCaseProvider.GetFilterCase(System.String,System.Int32,System.Int32)">
            <summary>
            获得某个Ｃａｓｅ
            </summary>
            <param name="caseID"></param>
            <param name="queryName">查询列表的名称或者文件名（当Ｃａｓｅ保存为ＸＭＬ时）</param> 
            <param name="operatorID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.ISearchCaseProvider.GetFilterCase(System.String,System.String,System.Int32)">
            <summary>
            获得某个Ｃａｓｅ
            </summary>
            <param name="caseName"></param>
            <param name="queryName">查询列表的名称或者文件名（当Ｃａｓｅ保存为ＸＭＬ时）</param>
            <param name="operatorID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.ISearchCaseProvider.AddSearchCase(System.String,Framework.Search.SearchCase,System.Int32)">
            <summary>
            添加一个Ｃａｓｅ
            </summary>
            <param name="searchCase"></param>
            <param name="queryName">查询列表的名称或者文件名（当Ｃａｓｅ保存为ＸＭＬ时）</param>
            <param name="operatorID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.ISearchCaseProvider.DeleteSearchCase(System.String,Framework.Search.SearchCase,System.Int32)">
            <summary>
            删除Ｃａｓｅ
            </summary>
            <param name="searchCase"></param>
            <param name="operatorID"></param>
            <param name="queryName"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.ISearchCaseProvider.UpdateSearchCase(System.String,System.Int32,Framework.Search.SearchCase,System.Int32)">
            <summary>
            修改Ｃａｓｅ
            </summary>
            <param name="caseID"></param>
            <param name="queryName">查询列表的名称或者文件名（当Ｃａｓｅ保存为ＸＭＬ时）</param>
            <param name="searchCase"></param>
            <param name="operatorID"></param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.ClientSearchCaseProvider.#ctor">
            <summary>
            构造函数
            创建远程对像时极可能出错，当出错时，系统将错误写入日志，并偿试不同的方式，找到一种可行的方案。
            最后的方案是写入Windws日志
            </summary>
        </member>
        <member name="T:Framework.Caching.TableDependency">
            <summary>
            This is the base class for SQL2KCacheDependency implementation that encapsulates common
            algorithm to retrieve database and table names from configuration file and create
            the necessary AggregateCacheDependency object
            </summary>
        </member>
        <member name="T:Framework.Caching.ICacheDependency">
            <summary>
            This is the interface that the DependencyFactory (Factory Pattern) returns.
            Developers could implement this interface to add different types of Cache Dependency to sf.
            </summary>
        </member>
        <member name="M:Framework.Caching.ICacheDependency.GetDependency">
            <summary>
            Method to create the appropriate implementation of Cache Dependency
            </summary>
            <returns>CacheDependency object(s) embedded in AggregateCacheDependency</returns>
        </member>
        <member name="F:Framework.Caching.TableDependency.configurationSeparator">
            <summary>
            配置分隔符
            </summary>
        </member>
        <member name="F:Framework.Caching.TableDependency.dependency">
            <summary>
            依赖对像
            </summary>
        </member>
        <member name="M:Framework.Caching.TableDependency.#ctor(System.String)">
            <summary>
            The constructor retrieves all related configuration and add CacheDependency object accordingly
            默认指向Authentication数据
            </summary>
            <param name="configKey">Configuration key for specific derived class implementation</param>
        </member>
        <member name="M:Framework.Caching.TableDependency.#ctor(System.String,System.String)">
            <summary>
            建立一个表的缓存依赖关系
            </summary>
            <param name="databaseName"></param>
            <param name="configKey"></param>
        </member>
        <member name="M:Framework.Caching.TableDependency.GetDependency">
            <summary>
            获得依赖对像
            </summary>
            <returns></returns>
        </member>
        <member name="T:Framework.Components.SerializationFilerHelper">
            <summary>
            将对像串行化并存放于文件，或者从文件中将对像读出来。
            </summary>
        </member>
        <member name="M:Framework.Components.SerializationFilerHelper.Load(System.Type,System.String)">
            <summary>
            从文件中加载对像
            </summary>
            <param name="type"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.SerializationFilerHelper.Save(System.Object,System.String)">
            <summary>
            将对像保存成文件
            </summary>
            <param name="obj"></param>
            <param name="filename"></param>
        </member>
        <member name="T:Framework.Search.SqlColumnType">
            <summary>
            数据库字段类型
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.Image">
            <summary>
            图像
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.Text">
            <summary>
            文字
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.Uniqueidentifier">
            <summary>
            标记
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.Tinyint">
            <summary>
            单字节整型
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.Smallint">
            <summary>
            短整型
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.Int">
            <summary>
            整型
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.Smalldatetime">
            <summary>
            短日期
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.Real">
            <summary>
            实数型
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.Money">
            <summary>
            金额型
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.Datetime">
            <summary>
            日期型
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.Float">
            <summary>
            浮点型
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.Sql_variant">
            <summary>
            变量
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.Ntext">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.Bit">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.Decimal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.Numeric">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.Smallmoney">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.Bigint">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.Varbinary">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.Varchar">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.Binary">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.Char">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.Timestamp">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.Sysname">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.Nvarchar">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.Nchar">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.DataSet">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Search.SqlColumnType.DataReader">
            <summary>
            
            </summary>
        </member>
        <member name="T:Framework.Components.ResourceType">
            <summary>
            资源类型
            </summary>
        </member>
        <member name="F:Framework.Components.ResourceType.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:Framework.Components.ResourceType.ErrorMessage">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="F:Framework.Components.ResourceType.Summary">
            <summary>
            系统注释
            </summary>
        </member>
        <member name="F:Framework.Components.ResourceType.Template">
            <summary>
            模板
            </summary>
        </member>
        <member name="T:Framework.Components.ResourceManager">
            <summary>
            资源管理类
            </summary>
        </member>
        <member name="M:Framework.Components.ResourceManager.#cctor">
            <summary>
            静态构造,用于实例化上下文引用对象
            </summary>
        </member>
        <member name="M:Framework.Components.ResourceManager.GetFilePath">
            <summary>
            获得配置文件位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ResourceManager.GetFilePath(System.String,System.String)">
            <summary>
            获得配置文件位置
            </summary>
            <param name="language"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ResourceManager.GetLanguage">
            <summary>
            获得当前需要使用的语种
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ResourceManager.GetSupportedLanguages">
            <summary>
            从语言声明文件中获取支持的所有语言
            </summary>
            <returns>支持的所有语言的名称-值对</returns>
        </member>
        <member name="M:Framework.Components.ResourceManager.GetLanguageCharsets">
            <summary>
            获取语言字符集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ResourceManager.GetSupportedLanguage(System.String)">
            <summary>
            根据语言名称获取语言值
            如果不能获取,则使用默认语言
            </summary>
            <param name="language">语言名称</param>
            <returns>语言值</returns>
        </member>
        <member name="M:Framework.Components.ResourceManager.GetString(System.String)">
            <summary>
            根据资源名称从资源文件中获取相应资源文本
            </summary>
            <param name="name">资源名称</param>
            <returns>资源文本</returns>
        </member>
        <member name="M:Framework.Components.ResourceManager.GetString(System.String,System.Boolean)">
            <summary>
            根据资源名称从资源文件中获取相应资源文本
            </summary>
            <param name="name">资源名称</param>
            <param name="defaultOnly">只选择默认语言</param>
            <returns>资源文本</returns>
        </member>
        <member name="M:Framework.Components.ResourceManager.GetString(System.String,System.String)">
            <summary>
            根据资源名称从资源文件中获取相应资源文本
            </summary>
            <param name="name">资源名称</param>
            <param name="fileName">资源文件名</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ResourceManager.GetString(System.String,System.String,System.Boolean)">
            <summary>
            根据资源名称从资源文件中获取相应资源文本
            </summary>
            <param name="name">资源名称</param>
            <param name="fileName">资源文件名</param>
            <param name="defaultOnly">使用默认语言</param>
            <returns>资源文本</returns>
        </member>
        <member name="M:Framework.Components.ResourceManager.GetResource(Framework.Components.ResourceType,System.String,System.String,System.Boolean)">
            <summary>
            获取资源
            </summary>
            <param name="resourceType">资源类型</param>
            <param name="userLanguage">用户语言</param>
            <param name="fileName">资源文件名</param>
            <param name="defaultOnly">只使用默认语言</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ResourceManager.LoadResource(Framework.Components.ResourceType,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.String)">
            <summary>
            加载资源
            </summary>
        </member>
        <member name="M:Framework.Components.ResourceManager.GetSummary(System.String,System.Type)">
            <summary>
            从系统Library生成的XML查询相关的信息
            主要用于枚举类型
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ResourceManager.LoadSummaryResource(System.Type)">
            <summary>
            从程序文件生成的XML文档中读取相关资料
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Components.ConfigHelper">
            <summary>
            配置文件读写帮助类
            </summary>
        </member>
        <member name="M:Framework.Components.ConfigHelper.ReadConfig``1(System.String)">
            <summary>
            读配置
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configFilePath"></param>
            <returns></returns>
            <example>
            <code>
                ConfigProvider.ReadConfig(Server.MapPath("~/config/global.xml"))
            </code>
            </example>
        </member>
        <member name="M:Framework.Components.ConfigHelper.WriteConfig``1(System.Object,System.String)">
            <summary>
            写配置
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="configFilePath"></param>
            <example>
            <code>
                string path = Server.MapPath("~/config/global.xml");
                SiteConfig site = new SiteConfig();
                site.Language = "zh-CN";
                ConfigProvider.WriteConfig(site,path)
            </code>
            </example>
        </member>
        <member name="T:Framework.Components.SiteSettings">
            <summary>
            站点设置
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.TermsOfServiceUrl">
            <summary>
            服务条款ＵＲＬ
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableEula">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableInk">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableSectionLocalization">
            <summary>
            不同版块的语言种类
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableDisplayNames">
            <summary>
            使用昵称
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.RequireAuthenticationForProfiles">
            <summary>
            需要验证来处理扩展信息
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.NntpServerLocation">
            <summary>
            NNTP服务器位置
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnablePointSystem">
            <summary>
            充许积分系统
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.PointsPostFactor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.PointsReplyFactor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.PointsReplierFactor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.PointsRatingFactor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.PointsDownloadFactor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.PointsDownloaderFactor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.PointsFavoritePostFactor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.PointsFavoriteUserFactor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.PointsRaterFactor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableDefaultRole">
            <summary>
            Should users be given a default role as they are added to the system
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.SiteSettingsCacheWindowInMinutes">
            <summary>
            系统配置缓冲时间
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.SearchMetaDescription">
            <summary>
            ＭｅｔａＤｅｓｃｒｉｐｔｉｏｎ
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.SearchMetaKeywords">
            <summary>
            Keywords
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.Copyright">
            <summary>
            版权
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.SiteUrl">
            <summary>
            站点地址
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.AdminEmailAddress">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.CompanyName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.CompanyContactUs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.CompanyFaxNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.CompanyAddress">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.RssCacheWindowInSeconds">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableSecureSyndication">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableRssSearch">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnablePublicMemberList">
            <summary>
            允许显示成员列表
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableBirthdays">
            <summary>
            允许使用生日
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableCurrentTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableSiteStatistics">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableWhoIsOnline">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableUsernameChange">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.AccountActivation">
            <summary>
            帐号激活方式
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.AllowUserSignatures">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.AllowNewUserRegistration">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.AllowLogin">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableUserSignatures">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.UserSignatureMaxLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.UsernameMaxLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.UsernameMinLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.UsernameRegex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.PasswordRegex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.AllowGender">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.ShowContactCheckboxes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.MaxTopPostersToDisplay">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.MembersPerPage">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnablePublicAdvancedMemberSearch">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableTrackPostsByIP">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.DisplayPostIP">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.DisplayPostIPAdminsModeratorsOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.SearchPostsPerPage">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.SettingsID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.SiteID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.SiteDomain">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.SiteDomainUrl">
            <summary>
            returns the site domain in a format suitable for creating a uri
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.SiteDomainHostUrl">
            <summary>
            returns the protocol and dns name of the current site domain in url format
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.ApplicationName">
            <summary>
            Property ApplicationName (string)
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.PublicSiteKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.SecureKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableVersionCheck">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableEmail">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableMailGateway">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EmailThrottle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EmailEncoding">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableAntiSpamProtection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.DefaultTheme">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableUserThemeSelection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.DomainName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.SiteName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableSiteDescription">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.SiteDescription">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.RawAdditionalHeader">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.DateFormat">
            <summary>
            日期格式
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.TimeFormat">
            <summary>
            时间格式
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.SmtpServer">
            <summary>
            SMTP
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.TimezoneOffset">
            <summary>
            时区
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableAnonymousUserTracking">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.AvatarHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.AvatarWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.RoleCookieName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.RoleCookieExpiration">
            <summary>
            角色Ｃｏｏｋｉｅ失效期
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.AnonymousCookieName">
            <summary>
            匿名用户Ｃｏｏｋｉｅ名称
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.CookieDomain">
            <summary>
            Ｃｏｏｋｉｅ的域
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.AnonymousCookieExpiration">
            <summary>
            匿名用户Ｃｏｋｋｉｅ有效时间
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.AnonymousUserOnlineTimeWindow">
            <summary>
            在线匿名的用户
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.UserOnlineTimeWindow">
            <summary>
            用户在线数
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableEmoticons">
            <summary>
            允计表情
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableAvatars">
            <summary>
            允许头像
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableRemoteAvatars">
            <summary>
            允许删除头像
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableRoleCookie">
            <summary>
            允许角色Ｃｏｏｋｉｅ
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableDebugMode">
            <summary>
            允许调试模式
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.SmtpServerUsingNtlm">
            <summary>
            Using Ntlm
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.SmtpServerUserName">
            <summary>
            SMTP用户名
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.SmtpServerPassword">
            <summary>
            ＳＭＴＰ密码
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.SmtpServerRequiredLogin">
            <summary>
            ＳＭＴＰ是否需要登录
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.SmtpPortNumber">
            <summary>
            ＳＭＴＰ端口
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableCensorship">
            <summary>
            找开敏感词汇检查
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.DisplayUserRankAsPicture">
            <summary>
            用图形方式显示用户等级
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableBannedUsersToLogin">
            <summary>
            允许被阻止的用户登录
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableUserModerationCounters">
            <summary>
            允许用户管理计数
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.AttachmentsPath">
            <summary>
            附件保存路径
            </summary>
        </member>
        <member name="P:Framework.Components.SiteSettings.EnableExif">
            <summary>
            是否显示照片的Exif信息
            </summary>
        </member>
        <member name="T:Framework.Enumerations.UserSex">
            <summary>
            性别代码
            </summary>
        </member>
        <member name="F:Framework.Enumerations.UserSex.NotSet">
            <summary>
            未设
            </summary>
        </member>
        <member name="F:Framework.Enumerations.UserSex.Man">
            <summary>
            男
            </summary>
        </member>
        <member name="F:Framework.Enumerations.UserSex.Woman">
            <summary>
            女
            </summary>
        </member>
        <member name="T:Framework.Configuration.CustomConfiguration">
            <summary>
            用户自定义的配置延长代码
            </summary>
        </member>
        <member name="M:Framework.Configuration.CustomConfiguration.GetConfig(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="rootName"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Configuration.CustomConfiguration.LoadValuesFromConfigurationXml(System.Xml.XmlNode)">
            <summary>
            从XML中加载值
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Framework.Configuration.CustomConfiguration.GetSection(System.String)">
            <summary>
            读取一个节点。
            </summary>
            <param name="nodePath"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“T:Framework.Server.ReverserIList`1”忽略有格式错误的 XML 注释 -->
        <member name="M:Framework.Server.ReverserIList`1.#ctor(System.Type,System.String,Framework.Server.ReverserInfo.Direction)">
            <summary>
            构造函数
            </summary>
            <param name="type">进行比较的类类型</param>
            <param name="name">进行比较对象的属性名称</param>
            <param name="direction">比较方向(升序/降序)</param>
        </member>
        <member name="M:Framework.Server.ReverserIList`1.#ctor(System.String,System.String,Framework.Server.ReverserInfo.Direction)">
            <summary>
            构造函数
            </summary>
            <param name="className">进行比较的类名称</param>
            <param name="name">进行比较对象的属性名称</param>
            <param name="direction">比较方向(升序/降序)</param>
        </member>
        <member name="M:Framework.Server.ReverserIList`1.#ctor(`0,System.String,Framework.Server.ReverserInfo.Direction)">
            
            <summary>
            构造函数
            </summary>
            <param name="t">进行比较的类型的实例</param>
            <param name="name">进行比较对象的属性名称</param>
            <param name="direction">比较方向(升序/降序)</param>
        </member>
        <member name="T:Framework.Server.ReverserInfo">
            <summary>
            对象比较时使用的信息类
            </summary>
        </member>
        <member name="T:Framework.Server.ReverserInfo.Direction">
            <summary>
            比较的方向，如下：
            ASC：升序
            DESC：降序
            </summary>
        </member>
        <member name="T:Framework.Components.Entities.SiteSettingSet">
            <summary>
            Summary description for .
            </summary>
        </member>
        <member name="M:Framework.Components.Entities.SiteSettingSet.Add(Framework.Components.Entities.SiteSetting)">
            <summary>
            加入到队列
            </summary>
        </member>
        <member name="M:Framework.Components.Entities.SiteSettingSet.Contains(Framework.Components.Entities.SiteSetting)">
            <summary>
            是否包含某个对像
            </summary>
        </member>
        <member name="M:Framework.Components.Entities.SiteSettingSet.IndexOf(Framework.Components.Entities.SiteSetting)">
            <summary>
            对象所有位置
            </summary>
        </member>
        <member name="M:Framework.Components.Entities.SiteSettingSet.Insert(System.Int32,Framework.Components.Entities.SiteSetting)">
            <summary>
            插入对像到集合中
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Entities.SiteSettingSet.Remove(Framework.Components.Entities.SiteSetting)">
            <summary>
            从集合中删除对像
            </summary>
            <returns></returns>
        </member>
        <member name="P:Framework.Components.Entities.SiteSettingSet.CurrentPos">
            <summary>
            当前指针位置
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.SiteSettingSet.TotalRecordCount">
            <summary>
            所有的记录数
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.SiteSettingSet.Item(System.Int32)">
            <summary>
            引用
            </summary>
        </member>
        <member name="T:Framework.Components.EmailTemplate">
            <summary>
            根据系统配置模板，读取邮件格式。
            </summary>
        </member>
        <member name="M:Framework.Components.EmailTemplate.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Framework.Components.EmailTemplate.#ctor(System.Xml.XmlNode)">
            <summary>
            构造函数
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:Framework.Components.EmailTemplate.EmailType">
            <summary>
            邮件类型
            </summary>
        </member>
        <member name="P:Framework.Components.EmailTemplate.EmailID">
            <summary>
            邮件ＩＤ
            </summary>
        </member>
        <member name="P:Framework.Components.EmailTemplate.NumberOfTries">
            <summary>
            重发次数
            </summary>
        </member>
        <member name="T:Framework.Caching.CacheConfiguration">
            <summary>
            Cache的配置信息
            </summary>
        </member>
        <member name="M:Framework.Caching.CacheConfiguration.GetConfig">
            <summary>
            获取缓存配置信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Caching.CacheConfiguration.LoadConfigsFromConfigurationXml(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Framework.Securities.MD5OldEncrypt">
            <summary>
            老系统的密码加密方式
            </summary>
        </member>
        <member name="M:Framework.Securities.MD5OldEncrypt.GeneratePasswordSalt">
            <summary>
            生成一个Password Salt
            </summary>
            <returns>Password Salt</returns>
        </member>
        <member name="M:Framework.Securities.MD5OldEncrypt.GeneratePasswordHash(System.String,System.String)">
            <summary>
            生成密码Hash字符串
            </summary>
            <param name="password">原始密码</param>
            <param name="passwordSalt">Password Salt</param>
            <returns>密码Hash字符串</returns>
        </member>
        <member name="M:Framework.Securities.MD5OldEncrypt.GeneratePasswordAnswerHash(System.String)">
            <summary>
            生成密码安全问题答案Hash字符串
            </summary>
            <param name="answer">密码安全问题答案</param>
            <returns>密码安全问题答案Hash字符串</returns>
        </member>
        <member name="M:Framework.Securities.MD5OldEncrypt.DecodePassword(System.String,System.String)">
            <summary>
            解密密码
            </summary>
            <param name="passwordHash"></param>
            <param name="passwordSalt"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Server.SiteDataProvider">
            <summary>
            站点相关数据提供器
            此提供器提供站点配置管理及相关的异常保存等
            The DataProvider class contains a single method, Instance(), which returns an instance of the
            user-specified data provider class.
            </summary>
            <remarks>  The data provider class must inherit the CommonDataProvider
            interface.</remarks>
        </member>
        <member name="M:Framework.Server.SiteDataProvider.Instance">
            <summary>
            Returns an instance of the user-specified data provider class.
            </summary>
            <returns>An instance of the user-specified data provider class.  This class must inherit the
            CommonDataProvider interface.</returns>
        </member>
        <member name="M:Framework.Server.SiteDataProvider.CreateDefaultSiteProvider">
            <summary>
            Creates the Default CommonDataProvider
            </summary>
        </member>
        <member name="M:Framework.Server.SiteDataProvider.CalculateSiteStatistics(System.Int32,System.Int32)">
            <summary>
            重新计算站点统计信息
            </summary>
            <param name="settingsID"></param>
            <param name="updateWindow"></param>
        </member>
        <member name="M:Framework.Server.SiteDataProvider.LoadSiteSettings(System.String,System.Int32,System.Boolean)">
            <summary>
            提取站点设置
            可以通过ＳｅｔｔｉｎｇｓＩＤ或Ａｐｐｌｉｃａｔｉｏｎ来作为查询条件
            </summary>
            <param name="application"></param>
            <param name="settingsID"></param>
            <param name="returnAll"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.SiteDataProvider.LoadAllSiteSettings">
            <summary>
            提取所有站点设置
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.SiteDataProvider.SaveSiteSettings(Framework.Components.Entities.SiteSetting)">
            <summary>
            保存站点设置
            </summary>
            <param name="siteSettings"></param>
        </member>
        <member name="M:Framework.Server.SiteDataProvider.ValidVerifyCode(System.String,System.String)">
            <summary>
            验证用户认证码，主要防止使用机器来群发消息
            </summary>
            <param name="sn">根据认证生成的序列号</param>
            <param name="code">认证码</param>
            <returns>成功或失败</returns>
        </member>
        <member name="M:Framework.Server.SiteDataProvider.GetVerifyCode(System.String)">
            <summary>
            获得用户验证吗
            </summary>
            <param name="sn"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.SiteDataProvider.GetDisallowedNames">
            <summary>
            获得不允许使用的用户名清单
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.SiteDataProvider.CreateUpdateDeleteDisallowedName(System.String,Framework.Enumerations.DataProviderAction)">
            <summary>
            添加删除修改不允许使用的用户名清单
            </summary>
            <param name="name"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.SiteDataProvider.GetDisallowedName(System.String)">
            <summary>
            获得某个不允许使用的用户名清单
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.SiteDataProvider.CreateUpdateDeleteBlockedIpAddress(Framework.Components.Entities.SiteBannedAddress,Framework.Enumerations.DataProviderAction)">
            <summary>
            封锁某个IP，将其加入到封锁列表中
            </summary>
            <param name="b"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.SiteDataProvider.GetBlockedIpAddresses">
            <summary>
            获得封锁的IP列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.SiteDataProvider.GetBlockedIpAddress(System.Int64)">
            <summary>
            获得某一项封锁记录
            </summary>
            <param name="ipID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.SiteDataProvider.GetBlockedIpAddress(System.String)">
            <summary>
            获得某一项封锁记录
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.SiteDataProvider.CreateUpdateDeleteSiteAnonymousUser(Framework.Components.Entities.SiteAnonymousUser,Framework.Enumerations.DataProviderAction)">
            <summary>
            维护匿名用户信息
            </summary>
            <param name="sau"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.SiteDataProvider.GetSiteAnonymousUsers">
            <summary>
            获得匿名用户列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.SiteDataProvider.ClearSiteAnonymousUsers(System.DateTime)">
            <summary>
            清除某个时间范围以前的匿名用户
            </summary>
            <param name="endTime"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.SiteDataProvider.GetSiteAnonymousUser(System.String)">
            <summary>
            获得某个匿名用户信息
            </summary>
            <param name="guid">系统分配给匿名用户的唯一识别ID</param>
            <returns></returns>
        </member>
        <member name="T:Framework.Search.SearchCase">
            <summary>
            查询方案
            </summary>
        </member>
        <member name="F:Framework.Search.SearchCase.item">
            <summary>
            条件树
            </summary>
        </member>
        <member name="F:Framework.Search.SearchCase.orders">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:Framework.Search.SearchCase.IsPublic">
            <summary>
            是否公开
            </summary>
        </member>
        <member name="P:Framework.Search.SearchCase.QueryName">
            <summary>
            查询列表名称
            </summary>
        </member>
        <member name="P:Framework.Search.SearchCase.CaseTitle">
            <summary>
            方案名
            </summary>
        </member>
        <member name="P:Framework.Search.SearchCase.ID">
            <summary>
            方案ID
            </summary>
        </member>
        <member name="P:Framework.Search.SearchCase.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Framework.Search.SearchCase.UsedTimes">
            <summary>
            使用次数
            </summary>
        </member>
        <member name="P:Framework.Search.SearchCase.LastModified">
            <summary>
            最后修改时间
            </summary>
        </member>
        <member name="P:Framework.Search.SearchCase.LastUsedTime">
            <summary>
            最后一次使用
            </summary>
        </member>
        <member name="P:Framework.Search.SearchCase.CreateUserID">
            <summary>
            创建人
            </summary>
        </member>
        <member name="P:Framework.Search.SearchCase.Item">
            <summary>
            条件树
            </summary>
        </member>
        <member name="P:Framework.Search.SearchCase.OrderFields">
            <summary>
            排序字段
            </summary>
        </member>
        <member name="P:Framework.Search.SearchCase.FilterContent">
            <summary>
            过滤字段表达式
            </summary>
        </member>
        <member name="P:Framework.Search.SearchCase.OrderContent">
            <summary>
            排序表达式
            </summary>
        </member>
        <member name="T:Framework.Message.MessageTemplate">
            <summary>
            消息格式模板
            </summary>
        </member>
        <member name="M:Framework.Message.MessageTemplate.#ctor">
            <summary>
            邮件模板构造函数
            </summary>
        </member>
        <member name="M:Framework.Message.MessageTemplate.#ctor(System.Xml.XmlNode)">
            <summary>
            构造函数
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Framework.Message.MessageTemplate.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Framework.Message.MessageTemplate.BodyEncoding">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:Framework.Message.MessageTemplate.From">
            <summary>
            发送者
            </summary>
        </member>
        <member name="P:Framework.Message.MessageTemplate.MessageContentType">
            <summary>
            消息类型：如注册消息、找回密码消息等。
            </summary>
        </member>
        <member name="P:Framework.Message.MessageTemplate.ContentTypeID">
            <summary>
            消息模板类型的ID
            </summary>
        </member>
        <member name="P:Framework.Message.MessageTemplate.MessageType">
            <summary>
            消息类型：如邮件，ＳＭＳ等
            </summary>
        </member>
        <member name="P:Framework.Message.MessageTemplate.Priority">
            <summary>
            优先级
            </summary>
        </member>
        <member name="P:Framework.Message.MessageTemplate.NumberOfTries">
            <summary>
            重试次数
            </summary>
        </member>
        <member name="P:Framework.Message.MessageTemplate.Id">
            <summary>
            模板ID，与枚举类型一致
            </summary>
        </member>
        <member name="P:Framework.Message.MessageTemplate.Name">
            <summary>
            模板名称，与枚举类型的Name一致
            </summary>
        </member>
        <member name="P:Framework.Message.MessageTemplate.Body">
            <summary>
            模板的格式代码
            </summary>
        </member>
        <member name="P:Framework.Message.MessageTemplate.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Framework.Message.MessageTemplate.IsHtml">
            <summary>
            是否HTML格式
            </summary>
        </member>
        <member name="P:Framework.Message.MessageTemplate.HasAttachement">
            <summary>
            是否有附件
            </summary>
        </member>
        <member name="P:Framework.Message.MessageTemplate.TemplateTypeName">
            <summary>
            类型说明
            </summary>
        </member>
        <member name="T:Framework.Enumerations.UserStatus">
            <summary>
            用户帐号状态
            待审核，正常，阻止，锁定，删除
            </summary>
        </member>
        <member name="F:Framework.Enumerations.UserStatus.NotSet">
            <summary>
            未设
            </summary>
        </member>
        <member name="F:Framework.Enumerations.UserStatus.NeedApproval">
            <summary>
            待审核
            </summary>
        </member>
        <member name="F:Framework.Enumerations.UserStatus.Enabled">
            <summary>
            正常
            </summary>
        </member>
        <member name="F:Framework.Enumerations.UserStatus.Banned">
            <summary>
            阻止
            </summary>
        </member>
        <member name="F:Framework.Enumerations.UserStatus.Locked">
            <summary>
            锁定
            </summary>
        </member>
        <member name="F:Framework.Enumerations.UserStatus.Deleted">
            <summary>
            删除
            </summary>
        </member>
        <member name="T:Framework.Components.Job">
            <summary>
            计划任务ＪＯＢ
            </summary>
        </member>
        <member name="M:Framework.Components.Job.#ctor(System.Xml.XmlAttributeCollection)">
            <summary>
            
            </summary>
            <param name="attributes"></param>
        </member>
        <member name="P:Framework.Components.Job.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.Job.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.Job.SingleThread">
            <summary>
            是否单线程运行
            </summary>
        </member>
        <member name="P:Framework.Components.Job.Minutes">
            <summary>
            每隔多少分钟执行一次计划
            </summary>
        </member>
        <member name="P:Framework.Components.Job.Enabled">
            <summary>
            是否可用
            </summary>
        </member>
        <member name="P:Framework.Components.Job.EnableShutDown">
            <summary>
            是否可以终止
            </summary>
        </member>
        <member name="P:Framework.Components.Job.FailureInterval">
            <summary>
            出错后重试间隔时间
            </summary>
        </member>
        <member name="P:Framework.Components.Job.NumberOfTries">
            <summary>
            重试次数
            </summary>
        </member>
        <member name="P:Framework.Components.Job.Attributes">
            <summary>
            
            </summary>
        </member>
        <member name="T:Framework.Enumerations.YesOrNo">
            <summary>
            是与否的问题
            </summary>
        </member>
        <member name="F:Framework.Enumerations.YesOrNo.No">
            <summary>
            否
            </summary>
        </member>
        <member name="F:Framework.Enumerations.YesOrNo.Yes">
            <summary>
            是
            </summary>
        </member>
        <member name="T:Framework.Enumerations.ObjectType">
            <summary>
            内容类型
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.NaN">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.NotSet">
            <summary>
            全部
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Scene">
            <summary>
            景点
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Region">
            <summary>
            地区
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Hotel">
            <summary>
            客栈
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Food">
            <summary>
            美食
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Line">
            <summary>
            路线
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Traffic">
            <summary>
            交通,景点之间的交通
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Tip">
            <summary>
            小贴士
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.TrainStation">
            <summary>
            火车站
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.BusStation">
            <summary>
            汽车站
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Aireport">
            <summary>
            飞机场
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.HotelRoom">
            <summary>
            酒店房间
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.TravelNotes">
            <summary>
             游记
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Address">
            <summary>
            地址
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Goods">
            <summary>
            商品
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Product">
            <summary>
            产品
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.ProductClass">
            <summary>
            商品分类
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Brand">
            <summary>
            品牌
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Coupon">
            <summary>
            优惠券
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Promotion">
            <summary>
            促销活动
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Snapup">
            <summary>
            抢购
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Person">
            <summary>
            简历
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Enterprise">
            <summary>
            企业
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Train">
            <summary>
            培训机构
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Agency">
            <summary>
            中介
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.OtherOrg">
            <summary>
            其他组织
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.JobApply">
            <summary>
            求职意向
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Engage">
            <summary>
            招工信息
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.TrainClass">
            <summary>
            培训课程
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Contactor">
            <summary>
            联系人
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.GraduactionPerson">
            <summary>
            毕业生
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Category">
            <summary>
            分类
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Tag">
            <summary>
            标签
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Article">
            <summary>
            文章
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Image">
            <summary>
            图片
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Blog">
            <summary>
            博客
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Comment">
            <summary>
            评论
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Media">
            <summary>
            媒体
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Vote">
            <summary>
            投票
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Discuz">
            <summary>
            论坛
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Subject">
            <summary>
            专题
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Album">
            <summary>
            专辑相册
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.GuestBook">
            <summary>
            留言
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.GuestBookReply">
            <summary>
            留言回复
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Keyword">
            <summary>
            关键字
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Question">
            <summary>
            问题
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Thesis">
            <summary>
            辩论
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.AD">
            <summary>
            广告
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Topic">
            <summary>
            主题
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.User">
            <summary>
            用户
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Friends">
            <summary>
            好友
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Moods">
            <summary>
            心情
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.FellowGroup">
            <summary>
            好友组
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Group">
            <summary>
            圈子
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Package">
            <summary>
            包
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Role">
            <summary>
            角色
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Rights">
            <summary>
            权限
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Module">
            <summary>
            模块
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectType.Action">
            <summary>
            动作
            </summary>
        </member>
        <member name="T:Framework.Enumerations.SearchWhatEnum">
            <summary>
            Indicates how to interpret the search terms.
            </summary>
        </member>
        <member name="F:Framework.Enumerations.SearchWhatEnum.SearchAllWords">
            <summary>
            Searches for all words entered into the search terms.
            </summary>
        </member>
        <member name="F:Framework.Enumerations.SearchWhatEnum.SearchAnyWord">
            <summary>
            Searches for any word entered as search terms.
            </summary>
        </member>
        <member name="F:Framework.Enumerations.SearchWhatEnum.SearchExactPhrase">
            <summary>
            Searches for the EXACT search phrase entered in the search terms.
            </summary>
        </member>
        <member name="T:Framework.Components.Entities.SiteAnonymousUser">
            <summary>
            表《SiteAnonymousUsers》对应的类
            </summary>
        </member>
        <member name="M:Framework.Components.Entities.SiteAnonymousUser.CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Entities.SiteAnonymousUser.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Entities.SiteAnonymousUser.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Client.Message.MsmqMessageProvider">
            <summary>
            WindowMSMQ消息
            消息将自动通过数据发送到服务数据
            服务程序将从数据库中自动提出数据，并进行处理。
            </summary>
        </member>
        <member name="M:Client.Message.MsmqMessageProvider.Send(Framework.Message.MessageEntity,System.String,System.String)">
            <summary>
            发送消息
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Framework.Account.SongItem">
            <summary>
            歌曲在划价时的对像
            </summary>
        </member>
        <member name="P:Framework.Account.SongItem.Id">
            <summary>
            歌曲ID，8.3规范
            </summary>
        </member>
        <member name="P:Framework.Account.SongItem.Type">
            <summary>
            类型，指文件类型
            </summary>
        </member>
        <member name="P:Framework.Account.SongItem.Fee">
            <summary>
            费用
            </summary>
        </member>
        <member name="P:Framework.Account.SongItem.Saved">
            <summary>
            节约（优惠）
            </summary>
        </member>
        <member name="P:Framework.Account.SongItem.IsHQ">
            <summary>
            是否高音质
            </summary>
        </member>
        <member name="P:Framework.Account.SongItem.Size">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:Framework.Account.SongItem.PackageID">
            <summary>
            音乐包ID
            </summary>
        </member>
        <member name="T:Framework.Account.PaymentItem">
            <summary>
            歌曲之外的支付对像
            </summary>
        </member>
        <member name="P:Framework.Account.PaymentItem.Id">
            <summary>
            ID,对像有ID
            </summary>
        </member>
        <member name="P:Framework.Account.PaymentItem.Type">
            <summary>
            对像类型，具体描述详见相关文档
            </summary>
        </member>
        <member name="P:Framework.Account.PaymentItem.Fee">
            <summary>
            支付的费用
            </summary>
        </member>
        <member name="P:Framework.Account.PaymentItem.Saved">
            <summary>
            节约（优惠）
            </summary>
        </member>
        <member name="T:Framework.Components.ConvertHelper">
            <summary>
            类型转换组件
            </summary>
        </member>
        <member name="M:Framework.Components.ConvertHelper.StringToInt(System.String,System.Int32)">
            <summary>
            string型转换为int型
            </summary>
            <param name="strValue">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:Framework.Components.ConvertHelper.StringToShort(System.String,System.Int16)">
            <summary>
            string型转换为short型
            </summary>
            <param name="strValue">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:Framework.Components.ConvertHelper.StringToFloat(System.String,System.Single)">
            <summary>
            string型转换为float型
            </summary>
            <param name="strValue">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:Framework.Components.ConvertHelper.StringToDateTime(System.String,System.DateTime)">
            <summary>
            
            </summary>
            <param name="strValue"></param>
            <param name="defValue"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ConvertHelper.ArrayToString``1(``0[])">
            <summary>
            数组转换成字符串
            数组成员需实现ToString方法,以逗号分隔
            </summary>
            <typeparam name="T">数组成员类型</typeparam>
            <param name="array">数组</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ConvertHelper.ArrayToString``1(``0[],System.String)">
            <summary>
            数组转换成字符串
            数组成员需实现ToString方法
            </summary>
            <typeparam name="T">数组成员类型</typeparam>
            <param name="array">数组</param>
            <param name="seperator">分隔符</param>
            <returns></returns>
        </member>
        <member name="T:Framework.Search.FilterItemSet">
            <summary>
            过滤项设置
            </summary>
        </member>
        <member name="M:Framework.Search.FilterItemSet.Add(Framework.Search.FilterItem)">
            <summary>
            增加
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Framework.Search.FilterItemSet.Remove(Framework.Search.FilterItem)">
            <summary>
            删除
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Framework.Search.FilterItemSet.Contains(Framework.Search.FilterItem)">
            <summary>
            返回内容
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.FilterItemSet.IndexOf(Framework.Search.FilterItem)">
            <summary>
            返回索引
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Framework.Search.FilterItemSet.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Events.MessageCallBack">
            <summary>
            消息显示回调事件委托
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Framework.Events.MessageCallBackArgs">
            <summary>
            消息显示回调参数
            
            </summary>
        </member>
        <member name="M:Framework.Events.MessageCallBackArgs.#ctor(Framework.Message.MessageEntity)">
            <summary>
            构造函数
            </summary>
            <param name="me"></param>
        </member>
        <member name="M:Framework.Events.MessageCallBackArgs.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Framework.Events.MessageCallBackArgs.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="T:Framework.Message.MessageConvert">
            <summary>
            消息格式转换
            </summary>
        </member>
        <member name="M:Framework.Message.MessageConvert.ConvertSFExceptionToMessageEntity(Framework.Components.SFException)">
            <summary>
            将异常转化成为消息
            </summary>
            <returns></returns>
        </member>
        <member name="T:Framework.Message.IExceptionHelper">
            <summary>
            异常管理接口
            </summary>
        </member>
        <member name="M:Framework.Message.IExceptionHelper.LogException(System.Int32,Framework.Components.SFException,System.String,System.String)">
            <summary>
            记录错误日志
            </summary>
            <param name="settingsID"></param>
            <param name="ex"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IExceptionHelper.LogException(System.Int32,System.Exception,System.String,System.String)">
            <summary>
            记录错误日志
            </summary>
            <param name="settingsID"></param>
            <param name="ex"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IExceptionHelper.LogExceptionToWindowsEvent(System.Int32,System.String,System.String,System.String)">
            <summary>
            将异常写入到Windows日志中
            </summary>
            <param name="settingsID"></param>
            <param name="message"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IExceptionHelper.LogExceptionToWindowsEvent(System.Int32,Framework.Components.SFException,System.String,System.String)">
            <summary>
            将异常写入到Windows日志中
            </summary>
            <param name="settingsID"></param>
            <param name="ex"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IExceptionHelper.GetExceptions(System.Int32,System.Int32,System.String,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            获得指定的异常信息列表
            </summary>
            <param name="exceptionType"></param>
            <param name="minFrequency"></param>
            <param name="sortOrder"></param>
            <param name="includeUnknown"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IExceptionHelper.GetExceptions(System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            获得指定异常信息列表
            </summary>
            <param name="settingsID">站点ID</param>
            <param name="exceptionType"></param>
            <param name="minFrequency"></param>
            <param name="sortOrder"></param>
            <param name="includeUnknown"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalCount">总记录数</param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IExceptionHelper.GetExceptionEntities(System.Int32,System.Int32,System.String,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            获得指定的异常信息列表
            </summary>
            <param name="exceptionType"></param>
            <param name="minFrequency"></param>
            <param name="sortOrder"></param>
            <param name="includeUnknown"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IExceptionHelper.GetExceptionEntities(System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            获得指定异常信息列表
            </summary>
            <param name="settingsID">站点ID</param>
            <param name="exceptionType"></param>
            <param name="minFrequency"></param>
            <param name="sortOrder"></param>
            <param name="includeUnknown"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalCount">总记录数</param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IExceptionHelper.GetExceptionEntities(System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            获得指定异常信息列表
            </summary>
            <param name="settingsID">站点ID</param>
            <param name="exceptionType"></param>
            <param name="minFrequency"></param>
            <param name="sortOrder"></param>
            <param name="includeUnknown"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalCount">总记录数</param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IExceptionHelper.DeleteExceptions(System.Int32,System.Collections.Generic.IList{Framework.Components.SFException},System.String,System.String)">
            <summary>
            删除指定的异常信息
            </summary>
            <param name="settingsID"></param>
            <param name="deleteList"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IExceptionHelper.DeleteException(System.Int32,System.String,System.String)">
            <summary>
            删除指定异常信息
            </summary>
            <param name="exceptionID"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IExceptionHelper.GetExceptionEntity(System.Int32,System.String,System.String)">
            <summary>
            查找指定异常信息
            </summary>
            <param name="exceptionID"></param>
            <param name="guid"></param>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IExceptionHelper.GetException(System.Int32,System.String,System.String)">
            <summary>
            查找指定异常信息
            </summary>
            <param name="exceptionID"></param>
            <param name="guid"></param>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Components.ProviderHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Framework.Components.ProviderHelper.CreateProvider(System.Configuration.Provider.ProviderBase,Framework.Configuration.ConfigurationWithProvidersBase)">
            <summary>
            
            </summary>
            <param name="objProvider"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ProviderHelper.CreateProvider(System.String,System.Configuration.Provider.ProviderBase,Framework.Configuration.ConfigurationWithProvidersBase)">
            <summary>
            
            </summary>
            <param name="providerName"></param>
            <param name="objProvider"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ProviderHelper.CreateProvider(System.String,System.Configuration.Provider.ProviderBase,System.Collections.Generic.IDictionary{System.String,Framework.Components.Provider})">
            <summary>
            创建Ｐｒｏｖｉｄｅｒ实例
            </summary>
            <param name="providerName">名称</param>
            <param name="objProvider">对像基类</param>
            <param name="providers">Ｐｒｏｖｉｄｅｒ配置集合</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ProviderHelper.GetConnectionString(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="configValues"></param>
            <param name="connectionStringKey"></param>
            <param name="connectionStringNameKey"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Components.Provider">
            <summary>
            提供器Provider
            </summary>
        </member>
        <member name="M:Framework.Components.Provider.#ctor(System.Xml.XmlAttributeCollection)">
            <summary>
            构造函数
            </summary>
            <param name="attributes"></param>
        </member>
        <member name="M:Framework.Components.Provider.ToString">
            <summary>
            自定义的ＴｏＳｔｒｉｎｇ，简洁地显示对象的信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:Framework.Components.Provider.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Framework.Components.Provider.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:Framework.Components.Provider.Attributes">
            <summary>
            属性
            </summary>
        </member>
        <member name="P:Framework.Components.Provider.PackageID">
            <summary>
            包ID
            </summary>
        </member>
        <member name="P:Framework.Components.Provider.DatabaseOwner">
            <summary>
            数据库所有者
            </summary>
        </member>
        <member name="P:Framework.Components.Provider.ConnectionString">
            <summary>
            数据库
            </summary>
        </member>
        <member name="T:Framework.Enumerations.CellDataGetType">
            <summary>
            CellDataGetType 的摘要说明。
            </summary>
        </member>
        <member name="T:Framework.Components.Entities.SiteSetting">
            <summary>
            表《SiteSettings》对应的类
            </summary>
        </member>
        <member name="M:Framework.Components.Entities.SiteSetting.CompareTo(System.Object)">
            <summary>
            比较
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Entities.SiteSetting.Equals(System.Object)">
            <summary>
            比较两个对像
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Entities.SiteSetting.GetHashCode">
            <summary>
            GetHashCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Entities.SiteSetting.ToSiteSettings">
            <summary>
            将SiteSetting数据库ORM对像转换成SiteSettings对像
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Entities.SiteSetting.Parse(Framework.Components.SiteSettings)">
            <summary>
            将SiteSettings对像转换成SiteSetting数据库对像
            </summary>
            <param name="sss"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Components.Entities.SiteDisallowedName">
            <summary>
            表《SiteDisallowedNames》对应的类
            </summary>
        </member>
        <member name="T:Framework.Components.Entities.Base.SiteDisallowedNameBase">
            <summary>
            表《SiteDisallowedNames》对应的基类
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteDisallowedNameBase.OrgSettingsID">
            <summary>
            SettingsID
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteDisallowedNameBase.SettingsID">
            <summary>
            SettingsID
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteDisallowedNameBase.DisallowedName">
            <summary>
            DisallowedName
            </summary>
        </member>
        <member name="M:Framework.Components.Entities.SiteDisallowedName.CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Entities.SiteDisallowedName.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Entities.SiteDisallowedName.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Framework.Components.Censor">
            <summary>
            敏感词汇
            分为两种处理：１只要有就不能存在，２可以有，但必须进行替换。根据严重级别来进行判断。
            </summary>
        </member>
        <member name="M:Framework.Components.Censor.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Censor.CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Censor.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Censor.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Framework.Components.Censor.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="l_word"></param>
            <param name="l_replacement"></param>
        </member>
        <member name="M:Framework.Components.Censor.#ctor(System.String,System.String,Framework.Enumerations.CensorType)">
            <summary>
            构造函数
            </summary>
            <param name="l_word"></param>
            <param name="l_replacement"></param>
            <param name="type"></param>
        </member>
        <member name="P:Framework.Components.Censor.CensorType">
            <summary>
            词汇程度
            </summary>
        </member>
        <member name="T:Client.Message.TextMessageProvider">
            <summary>
            消息提供器，消息存储在本地文本文件中
            </summary>
        </member>
        <member name="M:Client.Message.TextMessageProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
            <param name="config"></param>
        </member>
        <member name="M:Client.Message.TextMessageProvider.Send(Framework.Message.MessageEntity,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Client.Message.DBMessageProvider">
            <summary>
             将消息存储在数据库中
            此类通过调用UserMessageProvider调用远程类来存储数据
            </summary>
        </member>
        <member name="M:Client.Message.DBMessageProvider.Send(Framework.Message.MessageEntity,System.String,System.String)">
            <summary>
            存储在数据库中的消息
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Client.Message.DBMessageProvider.Create(System.Int32,System.Int32,Framework.Message.MessageEntity,System.String,System.String)">
            <summary>
            存储在数据库中的消息
            </summary>
            <param name="settingsID"></param>
            <param name="userID"></param>
            <param name="msg"></param>
            <param name="guid"></param>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Account.FeeItem">
            <summary>
            计费项目
            可能有按次计费，按时间计费，按流量计费等情况
            </summary>
        </member>
        <member name="P:Framework.Account.FeeItem.Title">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Framework.Account.FeeItem.IsValid">
            <summary>
            是否有效
            </summary>
        </member>
        <member name="P:Framework.Account.FeeItem.Priority">
            <summary>
            优先级
            </summary>
        </member>
        <member name="P:Framework.Account.FeeItem.DateCreated">
            <summary>
            创建日期
            </summary>
        </member>
        <member name="P:Framework.Account.FeeItem.DateBegin">
            <summary>
            开始日期（有效期）
            </summary>
        </member>
        <member name="P:Framework.Account.FeeItem.DateEnd">
            <summary>
            结束日期
            </summary>
        </member>
        <member name="P:Framework.Account.FeeItem.BillingType">
            <summary>
            计费方式
            </summary>
        </member>
        <member name="T:Framework.Components.Serializer">
            <summary>
            序列化类
            </summary>
        </member>
        <member name="M:Framework.Components.Serializer.#cctor">
            <summary>
            Static Constructor is used to set the CanBinarySerialize value only once for the given security policy
            </summary>
        </member>
        <member name="F:Framework.Components.Serializer.CanBinarySerialize">
            <summary>
            Readonly value indicating if Binary Serialization (using BinaryFormatter) is allowed
            </summary>
        </member>
        <member name="M:Framework.Components.Serializer.ConvertToBytes(System.Object)">
            <summary>
            Converts a .NET object to a byte array. Before the conversion happens, a check with 
            Serializer.CanBinarySerialize will be made
            </summary>
            <param name="objectToConvert">Object to convert</param>
            <returns>A byte arry representing the object paramter. Null will be return if CanBinarySerialize is false</returns>
        </member>
        <member name="M:Framework.Components.Serializer.SaveAsBinary(System.Object,System.String)">
            <summary>
            Saves an object to disk as a binary file. 
            </summary>
            <param name="objectToSave">Object to Save</param>
            <param name="path">Location of the file</param>
            <returns>true if the save was succesful.</returns>
        </member>
        <member name="M:Framework.Components.Serializer.ConvertToString(System.Object)">
            <summary>
            Converts a .NET object to a string of XML. The object must be marked as Serializable or an exception
            will be thrown.
            </summary>
            <param name="objectToConvert">Object to convert</param>
            <returns>A xml string represting the object parameter. The return value will be null of the object is null</returns>
        </member>
        <member name="M:Framework.Components.Serializer.SaveAsXML(System.Object,System.String)">
            <summary>
            序列化到XML文件
            </summary>
            <param name="objectToConvert"></param>
            <param name="path"></param>
        </member>
        <member name="M:Framework.Components.Serializer.ConvertToObject(System.Byte[])">
            <summary>
            Converts a byte array to a .NET object. You will need to cast this object back to its expected type. 
            If the array is null or empty, it will return null.
            </summary>
            <param name="byteArray">An array of bytes represeting a .NET object</param>
            <returns>The byte array converted to an object or null if the value of byteArray is null or empty</returns>
        </member>
        <member name="M:Framework.Components.Serializer.ConvertFileToObject(System.String,System.Type)">
            <summary>
            反序列化，文件转换为对象
            </summary>
            <param name="path"></param>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Serializer.ConvertToObject(System.String,System.Type)">
            <summary>
            Converts a string of xml to the supplied object type. 
            </summary>
            <param name="xml">Xml representing a .NET object</param>
            <param name="objectType">The type of object which the xml represents</param>
            <returns>A instance of object or null if the value of xml is null or empty</returns>
        </member>
        <member name="M:Framework.Components.Serializer.LoadBinaryFile(System.String)">
            <summary>
            加载二进制文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Server.CachingProvider">
            <summary>
            缓存适配器
            </summary>
        </member>
        <member name="M:Framework.Server.CachingProvider.Instance">
            <summary>
            Returns an instance of the user-specified data provider class.
            </summary>
            <returns>An instance of the user-specified data provider class.  This class must inherit the
            CommonDataProvider interface.</returns>
        </member>
        <member name="M:Framework.Server.CachingProvider.CreateDefaultProvider">
            <summary>
            Creates the Default CommonDataProvider
            </summary>
        </member>
        <member name="T:Framework.Search.CompareType">
            <summary>
            条件选择时的几种不同的比较类型
            等于，不等于，大于，小于，大于或等于，小于或等于，包含，像，不像，存在，不存在等
            </summary>
        </member>
        <member name="F:Framework.Search.CompareType.Equal">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:Framework.Search.CompareType.NotEqual">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:Framework.Search.CompareType.LargerThan">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:Framework.Search.CompareType.SmallerThan">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:Framework.Search.CompareType.LargerOrEqual">
            <summary>
            大于或等于
            </summary>
        </member>
        <member name="F:Framework.Search.CompareType.SmallerOrEqual">
            <summary>
            小于或等于
            </summary>
        </member>
        <member name="F:Framework.Search.CompareType.Between">
            <summary>
            在..之间
            </summary>
        </member>
        <member name="F:Framework.Search.CompareType.ContainsIn">
            <summary>
            包含
            </summary>
        </member>
        <member name="F:Framework.Search.CompareType.Like">
            <summary>
            像
            </summary>
        </member>
        <member name="F:Framework.Search.CompareType.NotLike">
            <summary>
            不像
            </summary>
        </member>
        <member name="F:Framework.Search.CompareType.Exists">
            <summary>
            存在
            </summary>
        </member>
        <member name="F:Framework.Search.CompareType.NotExists">
            <summary>
            不存在
            </summary>
        </member>
        <member name="F:Framework.Search.CompareType.IsNULL">
            <summary>
            NULL
            </summary>
        </member>
        <member name="F:Framework.Search.CompareType.NotIN">
            <summary>
            Not In
            </summary>
        </member>
        <member name="T:Framework.Components.UserShortInfo">
            <summary>
            用户简明信息
            </summary>
        </member>
        <member name="P:Framework.Components.UserShortInfo.UserStatus">
            <summary>
            用户状态
            </summary>
        </member>
        <member name="P:Framework.Components.UserShortInfo.RoleProvinceID">
            <summary>
            用户所属角色的分站ID
            0 表示不限权限
            -1表示权限检查需要通过地区列表来完成，即可能有多个地区
            >0表示限定了某特定权限
            </summary>
        </member>
        <member name="P:Framework.Components.UserShortInfo.RoleRegionIDList">
            <summary>
            用户所属角色的地区列表
            </summary>
        </member>
        <member name="P:Framework.Components.UserShortInfo.IPLocation">
            <summary>
            当前IP所在地址
            </summary>
        </member>
        <member name="P:Framework.Components.UserShortInfo.Platform">
            <summary>
            原为平台，现更改为签名
            </summary>
        </member>
        <member name="P:Framework.Components.UserShortInfo.Signature">
            <summary>
            签名
            </summary>
        </member>
        <member name="P:Framework.Components.UserShortInfo.Sex">
            <summary>
            性别 0未设1男2女
            </summary>
        </member>
        <member name="P:Framework.Components.UserShortInfo.CityID">
            <summary>
            用户注册的城市ID
            </summary>
        </member>
        <member name="P:Framework.Components.UserShortInfo.Cityname">
            <summary>
            用户注册的城市名称
            </summary>
        </member>
        <member name="T:Framework.Message.MessageOrder">
            <summary>
            消息及异常排序规则
            </summary>
        </member>
        <member name="F:Framework.Message.MessageOrder.DateTime">
            <summary>
            时间倒序
            </summary>
        </member>
        <member name="F:Framework.Message.MessageOrder.Category">
            <summary>
            分类正序
            </summary>
        </member>
        <member name="F:Framework.Message.MessageOrder.Occurrencies">
            <summary>
            发生次数
            </summary>
        </member>
        <member name="F:Framework.Message.MessageOrder.User">
            <summary>
            用户名
            </summary>
        </member>
        <member name="F:Framework.Message.MessageOrder.Levels">
            <summary>
            级别
            </summary>
        </member>
        <member name="F:Framework.Message.MessageOrder.DateTimeAsc">
            <summary>
            时间倒序
            </summary>
        </member>
        <member name="T:Framework.Securities.MD5_ASP">
            <summary>
            MD5加密
            </summary>
        </member>
        <member name="M:Framework.Securities.MD5_ASP.GeneratePasswordSalt">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Securities.MD5_ASP.GeneratePasswordHash(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="password"></param>
            <param name="passwordSalt"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Securities.MD5_ASP.GeneratePasswordAnswerHash(System.String)">
            <summary>
            
            </summary>
            <param name="answer"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Securities.MD5_ASP.DecodePassword(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="passwordHash"></param>
            <param name="passwordSalt"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.ExcelData.ExcelDataEntity">
            <summary>
            Excel表中数据项涉及的对像
            </summary>
        </member>
        <member name="T:Framework.Enumerations.UserBanPeriod">
            <summary>
            用户禁止时间
            </summary>
        </member>
        <member name="T:Framework.Components.Entities.SiteStatisticSet">
            <summary>
            Summary description for UserSet.
            </summary>
        </member>
        <member name="M:Framework.Components.Entities.SiteStatisticSet.Add(Framework.Components.Entities.SiteStatistic)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Entities.SiteStatisticSet.Contains(Framework.Components.Entities.SiteStatistic)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Entities.SiteStatisticSet.IndexOf(Framework.Components.Entities.SiteStatistic)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Entities.SiteStatisticSet.Insert(System.Int32,Framework.Components.Entities.SiteStatistic)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Framework.Components.Entities.SiteStatisticSet.Remove(Framework.Components.Entities.SiteStatistic)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Framework.Components.Entities.SiteStatisticSet.CurrentPos">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.SiteStatisticSet.TotalRecordCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.SiteStatisticSet.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Components.ComplexEnum">
            <summary>
            多个枚举类型的值混合时，求其个别值。这种求值要求枚举类型的值按位来设置，如1,2,4,8,16等等
            如传参数时：MessageStatus.Delete|MessageStatus.Send，这种情况需要如此处理
            </summary>
        </member>
        <member name="M:Framework.Components.ComplexEnum.GetEnumOptions(System.Type,System.Int32)">
            <summary>
            读取枚举类型的复合值
            </summary>
            <param name="enumType">枚举类型的Type</param>
            <param name="status">当前值</param>
            <returns></returns>
        </member>
        <member name="T:Client.Components.EventLogProvider">
            <summary>
            事件日志记录Wrapper
            </summary>
        </member>
        <member name="M:Client.Components.EventLogProvider.AsynLog(System.String,System.Int32)">
            <summary>
            记录日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Client.Components.EventLogProvider.AsynLog(System.String,System.Int32,System.Int32)">
            <summary>
            记录日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Client.Components.EventLogProvider.AsynLog(Framework.Events.SFEventLog)">
            <summary>
            记录日志
            </summary>
            <param name="me"></param>
        </member>
        <member name="T:Client.Message.ClientMessageTemplateProvider">
            <summary>
            客户端读取消息模板的实现类
            </summary>
        </member>
        <member name="M:Client.Message.ClientMessageTemplateProvider.GetProvider">
            <summary>
            根据情况提取处理器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Client.Message.ClientMessageTemplateProvider.FormatMessage(Framework.Message.MessageEntity,Framework.Components.UserInfo)">
            <summary>
            格式化消息
            </summary>
            <param name="me"></param>
            <param name="userSendTo"></param>
            <returns></returns>
        </member>
        <member name="M:Client.Message.ClientMessageTemplateProvider.FormatMessage(Framework.Message.MessageTemplate,Framework.Components.UserInfo)">
            <summary>
            根据模板格式化消息
            </summary>
            <param name="mt"></param>
            <param name="userSendTo"></param>
            <returns></returns>
        </member>
        <member name="M:Client.Message.ClientMessageTemplateProvider.FormatBody(System.String,Framework.Components.UserInfo)">
            <summary>
            格式化消息内容
            </summary>
            <param name="body"></param>
            <param name="userSendTo"></param>
            <returns></returns>
        </member>
        <member name="M:Client.Message.ClientMessageTemplateProvider.FormatTitle(System.String,Framework.Components.UserInfo)">
            <summary>
            格式化标题
            </summary>
            <param name="title"></param>
            <param name="userSendTo"></param>
            <returns></returns>
        </member>
        <member name="M:Client.Message.ClientMessageTemplateProvider.SaveTemplate(Framework.Message.MessageCategory,Framework.Message.MessageTemplateType,System.String,System.String,System.String,System.String)">
            <summary>
            保存格式
            </summary>
            <param name="mc"></param>
            <param name="mt"></param>
            <param name="title"></param>
            <param name="from"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Account.SongItems">
            <summary>
            支付中歌曲集合
            </summary>
        </member>
        <member name="M:Framework.Account.SongItems.Clear">
            <summary>
            清除列表
            </summary>
        </member>
        <member name="M:Framework.Account.SongItems.Add(Framework.Account.SongItem)">
            <summary>
            新增一个音乐，系统自动进行排重处理
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Framework.Account.SongItems.Calculate">
            <summary>
            计算集合内的所有应付款项
            </summary>
        </member>
        <member name="M:Framework.Account.SongItems.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Framework.Account.SongItems.#ctor(System.String,System.String,System.Decimal)">
            <summary>
            构造函数
            </summary>
            <param name="id1"></param>
            <param name="type1"></param>
            <param name="fee1"></param>
        </member>
        <member name="P:Framework.Account.SongItems.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:Framework.Account.SongItems.Type">
            <summary>
            类型，如常规音乐列表，音乐包或其它支付项目等。
            </summary>
        </member>
        <member name="P:Framework.Account.SongItems.Fee">
            <summary>
            合计费用
            </summary>
        </member>
        <member name="P:Framework.Account.SongItems.Saved">
            <summary>
            节约（优惠）
            </summary>
        </member>
        <member name="P:Framework.Account.SongItems.Size">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:Framework.Account.SongItems.Items">
            <summary>
            歌曲
            </summary>
        </member>
        <member name="T:Framework.Account.Payment">
            <summary>
            支付结果
            <Payment total="6.0" recharge="6.0" balance="0" save="" />
            </summary>
        </member>
        <member name="P:Framework.Account.Payment.Total">
            <summary>
            需支付总额 
            </summary>
        </member>
        <member name="P:Framework.Account.Payment.Recharge">
            <summary>
            充值
            </summary>
        </member>
        <member name="P:Framework.Account.Payment.Balance">
            <summary>
            余额
            </summary>
        </member>
        <member name="P:Framework.Account.Payment.Saved">
            <summary>
            节约（优惠）
            </summary>
        </member>
        <member name="P:Framework.Account.Payment.Size">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:Framework.Account.Payment.SizeBalance">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="T:Framework.Components.BinarySerializer">
            <summary>
            Summary description for BinarySerializer.
            </summary>
        </member>
        <member name="M:Framework.Components.BinarySerializer.Serialize(System.Object)">
            <summary>
            将对象串行化
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.BinarySerializer.Deserializer(System.Byte[])">
            <summary>
            还原对像
            </summary>
            <param name="serializedExtendedAttributes"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Securities.ClearTextEncrypt">
            <summary>
            老系统的密码加密方式
            </summary>
        </member>
        <member name="M:Framework.Securities.ClearTextEncrypt.GeneratePasswordSalt">
            <summary>
            生成一个Password Salt
            </summary>
            <returns>Password Salt</returns>
        </member>
        <member name="M:Framework.Securities.ClearTextEncrypt.GeneratePasswordHash(System.String,System.String)">
            <summary>
            生成密码Hash字符串
            </summary>
            <param name="password">原始密码</param>
            <param name="passwordSalt">Password Salt</param>
            <returns>密码Hash字符串</returns>
        </member>
        <member name="M:Framework.Securities.ClearTextEncrypt.GeneratePasswordAnswerHash(System.String)">
            <summary>
            生成密码安全问题答案Hash字符串
            </summary>
            <param name="answer">密码安全问题答案</param>
            <returns>密码安全问题答案Hash字符串</returns>
        </member>
        <member name="M:Framework.Securities.ClearTextEncrypt.DecodePassword(System.String,System.String)">
            <summary>
            解密密码
            </summary>
            <param name="passwordHash">密码Hash字符串</param>
            <param name="passwordSalt">Password Salt</param>
            <returns></returns>
        </member>
        <member name="T:Framework.Components.SFException">
            <summary>
            Sinomen Exception[no use]
            </summary>
        </member>
        <member name="F:Framework.Components.SFException.ExtendAttributes">
            <summary>
            扩展信息存储之地
            </summary>
        </member>
        <member name="F:Framework.Components.SFException.exceptionType">
            <summary>
            错误类型
            </summary>
        </member>
        <member name="F:Framework.Components.SFException.errorInfo">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="M:Framework.Components.SFException.#ctor(Framework.Components.ExceptionType)">
            <summary>
            构造函数
            </summary>
            <param name="t">异常类型</param>
        </member>
        <member name="M:Framework.Components.SFException.#ctor(Framework.Components.ExceptionType,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="t">异常类型</param>
            <param name="msg">异常消息</param>
        </member>
        <member name="M:Framework.Components.SFException.#ctor(Framework.Components.ExceptionType,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="t">异常类型</param>
            <param name="msg">异常消息</param>
            <param name="errInfo">显示给用户看的友好的错误信息</param>
        </member>
        <member name="M:Framework.Components.SFException.#ctor(Framework.Components.ExceptionType,System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="t">异常类型</param>
            <param name="msg">异常消息</param>
            <param name="inner">内部异常</param>
        </member>
        <member name="M:Framework.Components.SFException.#ctor(Framework.Components.ExceptionType,System.String,System.Exception,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="t">异常类型</param>
            <param name="msg">异常消息</param>
            <param name="inner">内部异常</param>
            <param name="errInfo">显示给用户看的友好的错误信息</param>
        </member>
        <member name="M:Framework.Components.SFException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info">存储对象序列化和反序列化所需的全部数据</param>
            <param name="context">描述给定的序列化流的源和目标，并提供一个由调用方定义的附加上下文</param>
        </member>
        <member name="M:Framework.Components.SFException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            重载GetObjectData方法
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Framework.Components.SFException.ExceptionType">
            <summary>
            异常类型
            </summary>
        </member>
        <member name="P:Framework.Components.SFException.ErrorInfo">
            <summary>
            显示给用户看的友好的错误信息
            </summary>
        </member>
        <member name="P:Framework.Components.SFException.UserAgent">
            <summary>
            用户使用的游览器等信息
            </summary>
        </member>
        <member name="P:Framework.Components.SFException.Category">
            <summary>
            分类信息
            </summary>
        </member>
        <member name="P:Framework.Components.SFException.IPAddress">
            <summary>
            ＩＰ地址
            </summary>
        </member>
        <member name="P:Framework.Components.SFException.HttpReferrer">
            <summary>
            引用页面地址
            </summary>
        </member>
        <member name="P:Framework.Components.SFException.HttpVerb">
            <summary>
            HTTPVerb
            </summary>
        </member>
        <member name="P:Framework.Components.SFException.HttpPathAndQuery">
            <summary>
            页面地址及参数
            </summary>
        </member>
        <member name="P:Framework.Components.SFException.DateCreated">
            <summary>
            生成日期
            </summary>
        </member>
        <member name="P:Framework.Components.SFException.DateLastOccurred">
            <summary>
            最后发生日期
            </summary>
        </member>
        <member name="P:Framework.Components.SFException.Frequency">
            <summary>
            发生同样异样次数
            </summary>
        </member>
        <member name="P:Framework.Components.SFException.LoggedStackTrace">
            <summary>
            Ｔｒａｃｅ
            </summary>
        </member>
        <member name="P:Framework.Components.SFException.ExceptionID">
            <summary>
            异常ＩＤ
            </summary>
        </member>
        <member name="T:Framework.Securities.ClientValid">
            <summary>
            客户端请求验证，以确定客户端的请求是否被截获后改装，还是伪装成合法的客户端
            </summary>
        </member>
        <member name="M:Framework.Securities.ClientValid.IsValid(System.String,System.String)">
            <summary>
            验证客户端请求是否合法
            此种情况下，只能用于一台应用服务器。如需处理，需将此值存储在数据服务器上。
            </summary>
            <param name="publicKey">公共密钥</param>
            <param name="ipAddress">ＩＰ地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Securities.ClientValid.GetPublicKey(System.String)">
            <summary>
            读取有效全局客户端ID，用于以后的请求认证
            此种情况下，只能用于一台应用服务器。如需处理，需将此值存储在数据服务器上。
            </summary>
            <param name="ipAddress">ＩＰ地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Securities.ClientValid.GetPublicKey(System.String,System.String@)">
            <summary>
            读取有效全局客户端ID，用于以后的请求认证
            此种情况下，只能用于一台应用服务器。如需处理，需将此值存储在数据服务器上。
            </summary>
            <param name="ipAddress"></param>
            <param name="serverName">应用服务器名称或地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Securities.ClientValid.GetClientKey">
            <summary>
            获得当前机器在服务器上注册的公用键值。
            此值将用于与服务器进行通讯时的联接验证。
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Securities.ClientValid.SetClientKey(System.String)">
            <summary>
            设定客户端ID到缓冲中
            </summary>
            <param name="guid"></param>
        </member>
        <member name="M:Framework.Securities.ClientValid.GetIPAddress">
            <summary>
            读取当前IP
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Securities.ClientValid.IsIPAddress(System.String)">
            
            <summary>
            判断是否是IP地址格式 0.0.0.0
            </summary>
            <param name="str1">待判断的IP地址</param>
            <returns>true or false</returns>
        </member>
        <member name="T:Framework.Server.CensorShipProvider">
            <summary>
            敏感词汇接口
            </summary>
            <remarks>  The data provider class must inherit the CensorShipProvider
            interface.</remarks>
        </member>
        <member name="F:Framework.Server.CensorShipProvider.ProviderType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Server.CensorShipProvider.providerPath">
            <summary>
            
            </summary>
        </member>
        <member name="M:Framework.Server.CensorShipProvider.Instance">
            <summary>
            Returns an instance of the user-specified data provider class.
            </summary>
            <returns>An instance of the user-specified data provider class.  This class must inherit the
            CommonDataProvider interface.</returns>
        </member>
        <member name="M:Framework.Server.CensorShipProvider.CreateDefaultCensorProvider">
            <summary>
            Creates the Default CommonDataProvider
            </summary>
        </member>
        <member name="M:Framework.Server.CensorShipProvider.GetCensors">
            <summary>
            Gets the <see cref="T:System.Collections.ArrayList"/> of the current <see cref="T:Framework.Components.Censor"/> objects stored in the database.
            </summary>
            <returns>The <see cref="T:System.Collections.ArrayList"/> that represents the Censors stored in the database.</returns>
        </member>
        <member name="M:Framework.Server.CensorShipProvider.GetCensors(System.Int16)">
            <summary>
            根据严重级别，获得相关的敏感词汇列表
            </summary>
            <param name="levelID">严重级别：1敏感，发布时被替换 2 严重，不允许发布，如果有该词汇，文章不能提交。</param>
            <returns>The <see cref="T:System.Collections.ArrayList"/> that represents the Censors stored in the database.</returns>
        </member>
        <member name="M:Framework.Server.CensorShipProvider.GetCensor(System.Int32)">
            <summary>
            Retrieves a specific <see cref="T:Framework.Components.Censor"/> from the database by it's unique identifier.
            </summary>
            <param name="censorId">The unique indentifier of the <see cref="T:Framework.Components.Censor"/>. The unique identifier of the Censor is the actual censored work that that will be replaced.</param>
            <returns>The <see cref="T:Framework.Components.Censor"/> that represents the censored word and it's replacement value.</returns>
        </member>
        <member name="M:Framework.Server.CensorShipProvider.CreateCensor(Framework.Components.Censor)">
            <summary>
            Stores the referenced <see cref="T:Framework.Components.Censor"/> object in the database.
            </summary>
            <param name="censor">The <see cref="T:Framework.Components.Censor"/> object to store in the database.</param>
            <returns>The </returns>
        </member>
        <member name="M:Framework.Server.CensorShipProvider.DeleteCensor(Framework.Components.Censor)">
            <summary>
            Removed the refereneced <see cref="T:Framework.Components.Censor"/> object from the database.
            </summary>
            <param name="censor">The <see cref="T:Framework.Components.Censor"/> object to remove.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Framework.Server.CensorShipProvider.UpdateCensor(Framework.Components.Censor)">
            <summary>
            
            </summary>
            <param name="censor"></param>
            <returns></returns>
        </member>
        <member name="P:Framework.Server.CensorShipProvider.ProviderPath">
            <summary>
            
            </summary>
        </member>
        <member name="T:Framework.Server.CoreCacheType">
            <summary>
            核心缓存类型
            </summary>
        </member>
        <member name="T:Server.Message.ServerMessageHandler">
            <summary>
            消息处理者
            </summary>
        </member>
        <member name="M:Server.Message.ServerMessageHandler.Send(Framework.Message.MessageEntity,System.String,System.String)">
            <summary>
            发送消息
            </summary>
            <param name="msg">消息实体</param>
            <param name="guid">客户端ID</param>
            <param name="ipAddress">IP地址</param>
        </member>
        <member name="T:Framework.Search.OrderFields">
            <summary>
            Order排序字段
            </summary>
        </member>
        <member name="M:Framework.Search.OrderFields.Add(Framework.Search.FieldItem)">
            <summary>
            增加一个排序，系统将根据相关规则调整
            </summary>
            <param name="df"></param>
        </member>
        <member name="M:Framework.Search.OrderFields.ToString">
            <summary>
            ＴｏＳｔｒｉｎｇ
            </summary>
            <returns></returns>
        </member>
        <member name="P:Framework.Search.OrderFields.MaxColumns">
            <summary>
            最多排序列数
            </summary>
        </member>
        <member name="T:Framework.Events.SelectedDateRange">
            <summary>
            选择日期范围
            </summary>
        </member>
        <member name="M:Framework.Events.SelectedDateRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            构造函数
            </summary>
            <param name="start">开始时间</param>
            <param name="end">结束时间</param>
        </member>
        <member name="M:Framework.Events.SelectedDateRange.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Framework.Events.SelectedDateRange.StartDate">
            <summary>
            开始日期
            </summary>
        </member>
        <member name="P:Framework.Events.SelectedDateRange.EndDate">
            <summary>
            结束日期
            </summary>
        </member>
        <member name="T:Framework.Events.DateChangedCallBack">
            <summary>
            日期选择回调事件委托
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Framework.Events.DateChangedCallBackArgs">
            <summary>
            日期选择回调参数
            
            </summary>
        </member>
        <member name="M:Framework.Events.DateChangedCallBackArgs.#ctor(System.Collections.Generic.IList{Framework.Events.SelectedDateRange})">
            <summary>
            
            </summary>
            <param name="dates"></param>
        </member>
        <member name="P:Framework.Events.DateChangedCallBackArgs.DateRanges">
            <summary>
            日期范围
            </summary>
        </member>
        <member name="T:Framework.Components.StringHelper">
            <summary>
            关于String的相关处理函数
            </summary>
        </member>
        <member name="M:Framework.Components.StringHelper.Encoding(System.String,System.String,System.String)">
            <summary>
            转换成指定字符休
            </summary>
            <param name="bstr"></param>
            <param name="srcEncode"></param>
            <param name="dtcEncode"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.StringHelper.FindStrCount(System.String,System.String)">
            <summary>
            查找在字串中指定字串出现的次数
            </summary>
            <param name="strOriginal"></param>
            <param name="strSymbol"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.StringHelper.GetSubString(System.String,System.Int32,System.String)">
            <summary>
            字符串如果操过指定长度则将超出的部分用指定字符串代替
            </summary>
            <param name="p_SrcString">要检查的字符串</param>
            <param name="p_Length">指定长度</param>
            <param name="p_TailString">用于替换的字符串</param>
            <returns>截取后的字符串</returns>
        </member>
        <member name="M:Framework.Components.StringHelper.GetSubString(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            字符串如果操过指定长度则将超出的部分用指定字符串代替
            </summary>
            <param name="p_SrcString">要检查的字符串</param>
            <param name="startLen">起始位置</param>
            <param name="p_Length">指定长度</param>
            <param name="p_TailString">用于替换的字符串</param>
            <returns>截取后的字符串</returns>
        </member>
        <member name="M:Framework.Components.StringHelper.GetStringLength(System.String)">
            <summary>
            返回字符串真实长度, 1个汉字长度为2
            </summary>
            <returns>字符串真实长度</returns>
        </member>
        <member name="M:Framework.Components.StringHelper.ToSimplifiedChinese(System.String)">
            <summary>
            转换为简体中文
            </summary>
        </member>
        <member name="M:Framework.Components.StringHelper.ToTraditionalChinese(System.String)">
            <summary>
            转换为繁体中文
            </summary>
        </member>
        <member name="M:Framework.Components.StringHelper.ToSBC(System.String)">
             <summary>
             转全角的函数(SBC case)
             </summary>
             <param name="input">任意字符串</param>
             <returns>全角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>        
        </member>
        <member name="M:Framework.Components.StringHelper.ToDBC(System.String)">
             <summary>
             转半角的函数(DBC case)
             </summary>
             <param name="input">任意字符串</param>
             <returns>半角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>
        </member>
        <member name="M:Framework.Components.StringHelper.GetChineseSpell(System.String)">
            <summary>
            获得字符串的中文拼音
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.StringHelper.GetSpell(System.String)">
            <summary>
            获得一个字符的中文拼音值
            </summary>
            <param name="cnChar"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.StringHelper.Split(System.String,System.String)">
            <summary>
            分割字符串
            </summary>
        </member>
        <member name="M:Framework.Components.StringHelper.SplitAppend(System.String,System.String,System.String,System.String)">
            <summary>
            通过指定符号分隔字串，并在每个分隔的字串头尾添加指定字符。
            </summary>
            <param name="textToSplitAppend"></param>
            <param name="seperator"></param>
            <param name="beginText"></param>
            <param name="endText"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.StringHelper.SplitAppend(System.String[],System.String,System.String)">
            <summary>
            将字串组中的每个字符同时添加头尾
            </summary>
            <param name="texts"></param>
            <param name="beginText"></param>
            <param name="endText"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.StringHelper.StripWhiteSpace(System.String,System.Boolean)">
            <summary>
            去除空格
            </summary>
            <param name="text">要去除的文本</param>
            <param name="retainSpace">是否保留空格</param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Framework.Components.StringHelper.GetResponse(System.String,System.String,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:Framework.Components.StringHelper.GetStringResponse(System.String,System.String,System.String)">
            <summary>
            获取Http请求
            </summary>
            <param name="apiUrl">Http请求地址</param>
            <param name="postData">Http请求参数</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.StringHelper.CensorContent(System.String,System.String,System.String)">
            <summary>
            替换文章中的敏感词汇
            </summary>
            <param name="formattedContent">已经规范过的文档</param>
            <returns>替换后的文档,如果文档为空字符串，表示该文档没有通过检查，可能含有严重的禁止发表的词句。</returns>
        </member>
        <member name="M:Framework.Components.StringHelper.CensorContent(System.String,System.Collections.Generic.IList{Framework.Components.Censor},System.String,System.String)">
            <summary>
            替换文章中的敏感词汇
            </summary>
            <param name="formattedContent">已经规范过的文档</param>
            <returns>替换后的文档,如果文档为空字符串，表示该文档没有通过检查，可能含有严重的禁止发表的词句。</returns>
        </member>
        <member name="M:Framework.Components.StringHelper.ContainCensors(System.String,System.String,System.String)">
            <summary>
            内容中是否包括敏感词汇
            </summary>
            <param name="formattedContent">已经规范过的文档</param>
            <returns>true 有敏感词汇,false没有</returns>
        </member>
        <member name="M:Framework.Components.StringHelper.ContainCensors(System.String,System.Collections.Generic.IList{Framework.Components.Censor},System.String,System.String)">
            <summary>
            内容中是否包括敏感词汇
            </summary>
            <param name="formattedContent">已经规范过的文档</param>
            <returns>true 有敏感词汇,false没有</returns>
        </member>
        <member name="T:Framework.Enumerations.AccessControlEntry">
            <summary>
            许可类型
            </summary>
        </member>
        <member name="T:Framework.Components.SiteCensorshipSet">
            <summary>
            Summary description for UserSet.
            </summary>
        </member>
        <member name="M:Framework.Components.SiteCensorshipSet.Add(Framework.Components.Censor)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.SiteCensorshipSet.Contains(Framework.Components.Censor)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.SiteCensorshipSet.IndexOf(Framework.Components.Censor)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.SiteCensorshipSet.Insert(System.Int32,Framework.Components.Censor)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Framework.Components.SiteCensorshipSet.Remove(Framework.Components.Censor)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Framework.Components.SiteCensorshipSet.CurrentPos">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteCensorshipSet.TotalRecordCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.SiteCensorshipSet.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Components.Template">
            <summary>
            模板类
            </summary>
        </member>
        <member name="T:Framework.Components.SetProperties">
            <summary>
            用于构建属性值的回调
            </summary>
            <param name="Property"></param>
        </member>
        <member name="T:Framework.Components.JsonPropertyType">
            <summary>
            JsonObject属性值类型
            </summary>
        </member>
        <member name="T:Framework.Components.JsonObject">
            <summary>
            JSON通用对象
            </summary>
        </member>
        <member name="M:Framework.Components.JsonObject.Parse(System.String@)">
            <summary>
            Json字符串解析
            </summary>
            <param name="jsonString"></param>
        </member>
        <member name="M:Framework.Components.JsonObject.StrEncode(System.String)">
            <summary>
            字符串转义,将双引号内的:和,分别转成_SEMICOLON和_COMMA
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.JsonObject.StrDecode(System.String)">
            <summary>
            字符串转义,将_SEMICOLON和_COMMA分别转成:和,
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.JsonObject.Properties``1(System.String)">
            <summary>
            通过此泛型函数可直接获取指定类型属性的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="PropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.JsonObject.GetPropertyNames">
            <summary>
            获取属性名称列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.JsonObject.RemoveProperty(System.String)">
            <summary>
            移除一个属性
            </summary>
            <param name="PropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.JsonObject.AddProperty(System.String)">
            <summary>
            添加一个属性
            </summary>
            <param name="PropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.JsonObject.IsNull">
            <summary>
            是否为空对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.JsonObject.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.JsonObject.HasProperty(System.String)">
            <summary>
            是否有此属性值
            </summary>
            <param name="PropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.JsonObject.ToString(System.String)">
            <summary>
            ToString...
            </summary>
            <param name="format">格式化字符串</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.JsonObject.GetEntity``1">
            <summary>
            返回实体类对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.JsonObject.GetEntityFromJson``1(Framework.Components.JsonObject,``0@)">
            <summary>
            将Json中的值给某个对像
            </summary>
            <typeparam name="T"></typeparam>
            <param name="js"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="P:Framework.Components.JsonObject.Item(System.String)">
            <summary>
            获取属性
            </summary>
            <param name="PropertyName"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Components.JsonProperty">
            <summary>
            JSON对象属性
            </summary>
        </member>
        <member name="M:Framework.Components.JsonProperty.Parse(System.String@)">
            <summary>
            Json字符串解析
            </summary>
            <param name="jsonString"></param>
        </member>
        <member name="M:Framework.Components.JsonProperty.ParseArray(System.String@)">
            <summary>
            Json Array解析
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.JsonProperty.ParseString(System.String@)">
            <summary>
            Json String解析
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.JsonProperty.ParseObject(System.String@)">
            <summary>
            Json Object解析
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="P:Framework.Components.JsonProperty.Item(System.Int32)">
            <summary>
            定义一个索引器，如果属性是非数组的，返回本身
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Framework.Components.JsonProperty.Item(System.String)">
            <summary>
            提供一个字符串索引，简化对Object属性的访问
            </summary>
            <param name="PropertyName"></param>
            <returns></returns>
        </member>
        <member name="P:Framework.Components.JsonProperty.Object">
            <summary>
            JsonObject值
            </summary>
        </member>
        <member name="P:Framework.Components.JsonProperty.Value">
            <summary>
            字符串值
            </summary>
        </member>
        <member name="P:Framework.Components.JsonProperty.Items">
            <summary>
            Array值，如果属性是非数组的，则封装成只有一个元素的数组
            </summary>
        </member>
        <member name="P:Framework.Components.JsonProperty.Number">
            <summary>
            数值
            </summary>
        </member>
        <member name="T:Framework.Components.FormMessage">
            <summary>
            用于描述异常消息
            </summary>
        </member>
        <member name="M:Framework.Components.LogHelper.SetConfig">
            <summary>
            从配置文件中读取配置信息
            </summary>
        </member>
        <member name="M:Framework.Components.LogHelper.SetConfig(System.IO.FileInfo)">
            <summary>
            从配置文件中读取配置信息
            </summary>
        </member>
        <member name="M:Framework.Components.LogHelper.Log(System.String)">
            <summary>
            记录信息
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Framework.Components.LogHelper.Log(System.String,System.Exception)">
            <summary>
            记录异常
            </summary>
            <param name="msg"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Framework.Components.LogHelper.Log(System.Exception)">
            <summary>
            记录异常
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Framework.Components.LogHelper.Log(Framework.Components.SFException)">
            <summary>
            记录异常
            </summary>
            <param name="sfe"></param>
        </member>
        <member name="M:Framework.Components.LogHelper.Counting(System.String)">
            <summary>
            记录跟踪计数点
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Framework.Components.LogHelper.Output(System.String)">
            <summary>
            记录输出
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Framework.Components.LogHelper.SyncLog(System.String)">
            <summary>
            刻录同步日志
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Framework.Components.LogHelper.SQLLog(System.String)">
            <summary>
            记录SQL日志
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Client.Components.ProfileConfiguration">
            <summary>
            用户属性扩展配置
            现在这个类不完整，需要进一步完善
            </summary>
        </member>
        <member name="T:Framework.Configuration.DefaultProviderConfiguration">
            <summary>
            一个Ｐｒｏｖｉｄｅｒ配置文件的默认实现
            </summary>
        </member>
        <member name="M:Framework.Configuration.DefaultProviderConfiguration.LoadConfigsFromConfigurationXml(System.Xml.XmlNode)">
            <summary>
            读取其它的配置信息
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Framework.Caching.SQLDataCaching">
            <summary>
            数据库缓存依赖工厂
            </summary>
        </member>
        <member name="F:Framework.Caching.SQLDataCaching._databaseStarted">
            <summary>
            记录联接串，用来Stop服务
            </summary>
        </member>
        <member name="F:Framework.Caching.SQLDataCaching._dependencies">
            <summary>
            记住缓存依赖对像
            </summary>
        </member>
        <member name="M:Framework.Caching.SQLDataCaching.CanRequestNotifications">
            <summary>
            能否向服务器发送通知请求
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Caching.SQLDataCaching.GetCacheDependency(System.String)">
            <summary>
            获得一个相关的缓存对像的实例
            此实例配置在应用程序配置文件或web.config中的AppSettings节中
            如果获取时出错，系统将信息写入到日志中。
            </summary>
            <param name="tableDependencyAssemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Caching.SQLDataCaching.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:Framework.Caching.FSqlCacheDependency">
            <summary>
            缓冲依赖的抽像类
            </summary>
        </member>
        <member name="F:Framework.Caching.FSqlCacheDependency._databases">
            <summary>
            数据库数据
            </summary>
        </member>
        <member name="F:Framework.Caching.FSqlCacheDependency.OnChanged">
            <summary>
            OnChange事件
            </summary>
        </member>
        <member name="M:Framework.Caching.FSqlCacheDependency.#ctor(System.Collections.Hashtable)">
            <summary>
            构造函数
            </summary>
            <param name="databases">检查该数据库是否已经Start了</param>
        </member>
        <member name="M:Framework.Caching.FSqlCacheDependency.CreateDependency(System.Collections.Hashtable)">
            <summary>
            构造一个依赖
            </summary>
            <param name="databases"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Caching.FSqlCacheDependency.GetOnChangedInformation(System.Object,System.Data.SqlClient.SqlNotificationEventArgs)">
            <summary>
            读取OnChanged事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Framework.Caching.FSqlCacheDependency.AddOnChangedEvent(System.Data.SqlClient.OnChangeEventHandler)">
            <summary>
            增加一个事件到链中
            </summary>
            <param name="oceh"></param>
        </member>
        <member name="M:Framework.Caching.FSqlCacheDependency.RemoveOnChangedEvent(System.Data.SqlClient.OnChangeEventHandler)">
            <summary>
            从链中删除一个事件钩子
            </summary>
            <param name="oceh"></param>
        </member>
        <member name="P:Framework.Caching.FSqlCacheDependency.CmdText">
            <summary>
            语句
            </summary>
        </member>
        <member name="P:Framework.Caching.FSqlCacheDependency.ConnectionString">
            <summary>
            联接串
            </summary>
        </member>
        <member name="T:Framework.Account.PaymentPackageParse">
            <summary>
            解析支付数据
            </summary>
        </member>
        <member name="M:Framework.Account.PaymentPackageParse.ParsePackage(System.String)">
            <summary>
            解析XMLString，组成PaymentPackage
            </summary>
            <param name="xmlString">需要解析的XML String</param>
            <returns>解析得到的PaymentPackage，如果解析错误，则返回NULL</returns>
        </member>
        <member name="M:Framework.Account.PaymentPackageParse.ConvertToString(Framework.Account.PaymentPackage)">
            <summary>
            将PaymentPackage转换成XmlString
            </summary>
            <param name="pp">需要转换的PaymentPackage</param>
            <returns>XML String，如果传入的为NULL，则返回空字串</returns>
        </member>
        <member name="T:Framework.Securities.RijndaelEncrypt">
            <summary>
            实现Rijndael对称算法加密和解密功能
            </summary>
        </member>
        <member name="F:Framework.Securities.RijndaelEncrypt.c_RandomKey">
            <summary>
            随机字符串，当密钥字符串长度不够时，用以补足长度
            </summary>
        </member>
        <member name="F:Framework.Securities.RijndaelEncrypt.m_Rijndael">
            <summary>
            Rijndael对称加密算法托管对象
            </summary>
        </member>
        <member name="F:Framework.Securities.RijndaelEncrypt.m_Key">
            <summary>
            密钥字符串
            </summary>
        </member>
        <member name="M:Framework.Securities.RijndaelEncrypt.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Framework.Securities.RijndaelEncrypt.GetLegalKey">
            <summary>
            生成密钥
            </summary>
            <returns>密钥数组</returns>
        </member>
        <member name="M:Framework.Securities.RijndaelEncrypt.GeneratePasswordSalt">
            <summary>
            生成一个Password Salt
            </summary>
            <returns>Password Salt</returns>
        </member>
        <member name="M:Framework.Securities.RijndaelEncrypt.GeneratePasswordHash(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="password">源字符串</param>
            <param name="passwordSalt">加密key</param>
            <returns>加密字符串</returns>
        </member>
        <member name="M:Framework.Securities.RijndaelEncrypt.GeneratePasswordAnswerHash(System.String)">
            <summary>
            生成密码安全问题答案Hash字符串
            </summary>
            <param name="answer">密码安全问题答案</param>
            <returns>密码安全问题答案Hash字符串</returns>
        </member>
        <member name="M:Framework.Securities.RijndaelEncrypt.DecodePassword(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="passwordHash">源加密字符串</param>
            <param name="passwordSalt">加密key</param>
            <returns>解密字符串</returns>
        </member>
        <member name="T:Framework.Remoting.ServiceModule">
            <summary>
            业务模块配置实体类
            </summary>
        </member>
        <member name="M:Framework.Remoting.ServiceModule.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Framework.Remoting.ServiceModule.#ctor(System.Xml.XmlAttributeCollection)">
            <summary>
            构造函数
            </summary>
            <param name="attributes">表示可以按名称或索引访问的属性的集合</param>
        </member>
        <member name="M:Framework.Remoting.ServiceModule.ToString">
            <summary>
            自定义的ＴｏＳｔｒｉｎｇ，简洁地显示对象的信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Remoting.ServiceModule.Parse(Framework.Components.Provider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="P:Framework.Remoting.ServiceModule.Name">
            <summary>
            模块名称
            </summary>
        </member>
        <member name="P:Framework.Remoting.ServiceModule.Protocol">
            <summary>
            协议（tcp或http）
            </summary>
        </member>
        <member name="P:Framework.Remoting.ServiceModule.UseCompress">
            <summary>
            是否使用压缩传输,一个对像是否压缩传输入与系统配置文件中的压缩及本模块的压缩有关系
            </summary>
        </member>
        <member name="P:Framework.Remoting.ServiceModule.ChannelRegistered">
            <summary>
            此模块的通道是否已经注册
            </summary>
        </member>
        <member name="P:Framework.Remoting.ServiceModule.IP">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="P:Framework.Remoting.ServiceModule.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:Framework.Remoting.ServiceModule.RemoteNamespace">
            <summary>
            远程对像名称空间
            </summary>
        </member>
        <member name="P:Framework.Remoting.ServiceModule.URI">
            <summary>
            远程对像地址
            </summary>
        </member>
        <member name="P:Framework.Remoting.ServiceModule.Attributes">
            <summary>
            其它扩展信息
            </summary>
        </member>
        <member name="T:Framework.Server.MessageDataProvider">
            <summary>
            站点相关数据提供器
            此提供器提供站点配置管理及相关的异常保存等
            The DataProvider class contains a single method, Instance(), which returns an instance of the
            user-specified data provider class.
            </summary>
            <remarks>  The data provider class must inherit the CommonDataProvider
            interface.</remarks>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.Instance">
            <summary>
            Returns an instance of the user-specified data provider class.
            </summary>
            <returns>An instance of the user-specified data provider class.  This class must inherit the
            CommonDataProvider interface.</returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.CreateDefaultMessageProvider">
            <summary>
            Creates the Default CommonDataProvider
            </summary>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.LogException(System.Int32,Framework.Components.SFException)">
            <summary>
            记录错误日志
            </summary>
            <param name="settingsID"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.LogException(System.Int32,System.Exception)">
            <summary>
            记录错误日志
            </summary>
            <param name="settingsID"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.GetExceptions(System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            提取异常列表
            </summary>
            <param name="exceptionType"></param>
            <param name="minFrequency"></param>
            <param name="sortOrder"></param>
            <param name="includeUnknown"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="title"></param>
            <param name="settingsID"></param>
            <param name="totalCount"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.GetExceptionEntities(System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            提取异常列表
            </summary>
            <param name="exceptionType"></param>
            <param name="minFrequency"></param>
            <param name="sortOrder"></param>
            <param name="includeUnknown"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="title"></param>
            <param name="settingsID"></param>
            <param name="totalCount"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.DeleteExceptions(System.Int32,System.Collections.Generic.IList{Framework.Components.SFException})">
            <summary>
            删除异常信息
            </summary>
            <param name="settingsID"></param>
            <param name="deleteList"></param>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.DeleteException(System.Int32)">
            <summary>
            删除一条异常信息
            </summary>
            <param name="exceptionID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.GetException(System.Int32)">
            <summary>
            
            </summary>
            <param name="exceptionID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.GetExceptionEntity(System.Int32)">
            <summary>
            读取异常
            </summary>
            <param name="exceptionID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.LogEvent(System.Int32,Framework.Events.SFEventLog,System.String)">
            <summary>
            记录日志
            </summary>
            <param name="settingsID"></param>
            <param name="me"></param>
            <param name="machine"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.CreateEventEntity(Framework.Events.EventEntity)">
            <summary>
            创建一种事件
            </summary>
            <param name="ee"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.DeleteEventEntity(Framework.Events.EventEntity)">
            <summary>
            删除一种事件
            </summary>
            <param name="ee"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.DeleteEventEntity(System.Int32)">
            <summary>
            删除一种事件
            </summary>
            <param name="eventEntityID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.GetEventDescription(System.Int32)">
            <summary>
            读取一种事件内容
            </summary>
            <param name="eventEntityID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.GetEventEntities(System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            读取事件列表
            </summary>
            <param name="isAsynchronized">-1表示所有，0表示同步，1表是异步</param>
            <param name="eventType"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.GetLogCount(System.Int32)">
            <summary>
            该事件下的日志数量
            </summary>
            <param name="eventEntityID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.GetAsynchronizeEventCount(System.Int32)">
            <summary>
            该事件下的异步事务数据
            </summary>
            <param name="eventEntityID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.CreateAsynchronizeEvent(Framework.Events.AsynchronizeEvent)">
            <summary>
            创建一个异步事件
            </summary>
            <param name="asynEvent"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.DeleteAsynchronizeEvent(Framework.Events.AsynchronizeEvent)">
            <summary>
            删除一个异步事件
            </summary>
            <param name="asynEvent"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.DeleteAsynchronizeEvent(System.Int32)">
            <summary>
            根据ID删除一个异步事件
            </summary>
            <param name="asynEventID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.GetAsynchronizeEvents(System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            获得异步事件列表
            </summary>
            <param name="settingsID">站点ID，默认填0</param>
            <param name="eventID">事件ID，即事件的说明ID</param>
            <param name="eventType">事件类型</param>
            <param name="eventTitle">标题</param>
            <param name="minRetries">最小重试次数，填零表示所有</param>
            <param name="isExecuted">是否已经执行？填－1表示所有，0表示未执行，1表示已经执行</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="totalCount">记录总数，用于返回</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.AddEmailQueue(System.Int32,Framework.Message.MessageEntity)">
            <summary>
            新增一个邮件到发送队列中
            </summary>
            <param name="settingsID"></param>
            <param name="me"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.RemoveEmailQueue(System.Int32,System.Int32)">
            <summary>
            从队列中删除一个邮件
            </summary>
            <param name="settingsID"></param>
            <param name="emailID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.GetEmailQueue(System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            获得一个发送的队列表
            </summary>
            <param name="settingsID"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="beginTime"></param>
            <param name="endTime"></param>
            <param name="minRetries"></param>
            <param name="maxRetires"></param>
            <param name="totalCount"></param>
            <param name="justNotSend"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.GetEmailQueue(System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            获得邮件队列中的一个对像
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="beginTime"></param>
            <param name="endTime"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.RemoveEmailQueue(System.Int32,System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            删除队列中的一组邮件
            </summary>
            <param name="settingsID"></param>
            <param name="from">发送人，如果为空，表明此条件不限</param>
            <param name="to">接收人，如果为空，表明此条件不限</param>
            <param name="beginTime"></param>
            <param name="endTime"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.GetEmailQueue(System.Int32)">
            <summary>
            获得一个邮件内容
            </summary>
            <param name="emailID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.UpdateEmailQueue(System.Int32,Framework.Message.MessageEntity)">
            <summary>
            更新队列中的邮件
            </summary>
            <param name="settingsID"></param>
            <param name="me"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.CreateUserMessage(System.Int32,Framework.Message.MessageEntity)">
            <summary>
            创建用户消息
            </summary>
            <param name="userID"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.SendUserMessage(System.Int32,System.Int32,System.Int32[])">
            <summary>
            发送消息，将消息库中的数据写入到消息读取记录库中
            </summary>
            <param name="userID">发送者</param>
            <param name="messageID">消息ID</param>
            <param name="receiverIDs">收信人的ID(站内消息），在此项目中无法获得用户ID，需从上一层传过来</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.GetUserMessageEntity(System.Int32)">
            <summary>
            获得用户消息记录
            </summary>
            <param name="messageID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.GetUserMessages(System.Int32,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            获得用户消息，分页查询
            </summary>
            <param name="userID"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <param name="begin"></param>
            <param name="end"></param>
            <param name="receiverName"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.GetUserMessages(System.Int32,System.String,System.DateTime,System.DateTime,Framework.Message.MessageStatus,Framework.Message.MessageCategory,Framework.Message.MessageOrder,System.Int32,System.Int32,System.Int32@)">
            <summary>
            获得用户创建或发送的消息，分页查询
            </summary>
            <param name="userID">发件人ID</param>
            <param name="status"></param>
            <param name="order"></param>
            <param name="category"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.GetUserMessages(Framework.Message.MessageQueryParameters,System.Int32@)">
            <summary>
            获得用户创建或发送的消息，分页查询
            </summary>
            <param name="mqp"></param>
            <param name="totalCount"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.GetUserMessagesCount(Framework.Message.MessageQueryParameters)">
            <summary>
            获得用户消息总数
            </summary>
            <param name="mqp"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.GetReceivedUserMessages(Framework.Message.MessageQueryParameters,System.Int16,System.Int32@)">
            <summary>
            获得用户收到的符合条件的消息
            </summary>
            <param name="mqp"></param>
            <param name="totalCount"></param>
            <param name="isNotice">消息返回结果参数  1表示个人消息 2表示群发的系统消息（可能为公告，收信人为*） 3两者都有</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.GetReceivedUserMessagesCount(System.Int32,System.Int16,System.String,System.DateTime,System.DateTime,Framework.Message.MessageStatus,Framework.Message.MessageCategory)">
            <summary>
            获得用户收到的符合条件的消息数
            </summary>
            <param name="userID"></param>
            <param name="senderName"></param>
            <param name="begin"></param>
            <param name="end"></param>
            <param name="status"></param>
            <param name="category"></param>
            <param name="isNotice">消息返回结果参数  1表示个人消息 2表示群发的系统消息（可能为公告，收信人为*） 3两者都有</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.GetReceivedUserMessagesCount(System.Int32,System.Int16,System.String,System.DateTime,System.DateTime,Framework.Message.MessageStatus,System.String)">
            <summary>
            获得用户收到的符合条件的消息数
            </summary>
            <param name="userID"></param>
            <param name="senderName"></param>
            <param name="begin"></param>
            <param name="end"></param>
            <param name="status"></param>
            <param name="category"></param>
            <param name="isNotice">消息返回结果参数  1表示个人消息 2表示群发的系统消息（可能为公告，收信人为*） 3两者都有</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.GetReceivedUserMessagesCount(Framework.Message.MessageQueryParameters,System.Int16)">
            <summary>
            获得用户收到的符合条件的消息数
            </summary>
            <param name="mqp"></param>
            <param name="isNotice">消息返回结果参数  1表示个人消息 2表示群发的系统消息（可能为公告，收信人为*） 3两者都有</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.GetUserMessagesNotRead(System.Int32,System.Int16,System.String,System.DateTime,System.DateTime,Framework.Message.MessageCategory,System.Int32,System.Int32,System.Int32@)">
            <summary>
            获得用户未读信息，分页查询
            </summary>
            <param name="userID">收件人ID</param>
            <param name="category"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <param name="isNotice">消息返回结果参数  1表示个人消息 2表示群发的系统消息（可能为公告，收信人为*） 3两者都有</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.ReadUserMessage(System.Int32,System.Int32)">
            <summary>
            阅读用户消息
            </summary>
            <param name="userID">用户ID，此处假设此消息的收件人中有该用户</param>
            <param name="messageID">消息ID</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.DeleteUserMessage(System.Int32,System.Int32)">
            <summary>
            删除用户消息
            </summary>
            <param name="messageID"></param>
            <param name="operatorID">操作员ID，系统将检查该操作员的一些权限</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.DeleteUserMessages(System.Int32,System.Int32[])">
            <summary>
            删除用户消息
            </summary>
            <param name="messageIDs"></param>
            <param name="operatorID">操作员ID，系统将检查该操作员的一些权限</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.DeleteUserMessages(System.Int32,System.Boolean)">
            <summary>
            清空用户发送或接收的消息
            </summary>
            <param name="operatorID">操作员ID，即发送或接收消息的人的ID，根据IsReceived来判断是接收还是发送的人。</param>
            <param name="isReceived">是否为接收的消息</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.DeleteUserMessages(System.Int32,System.Boolean,Framework.Message.MessageCategory)">
            <summary>
            清空用户发送或接收的消息
            </summary>
            <param name="operatorID">操作员ID，即发送或接收消息的人的ID，根据IsReceived来判断是接收还是发送的人。</param>
            <param name="isReceived">是否为接收的消息</param>
            <param name="category">消息的系统内部类别</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.DeleteUserMessages(System.Int32,System.Collections.Generic.IList{Framework.Message.MessageEntity})">
            <summary>
            删除用户消息
            </summary>
            <param name="messages"></param>
            <param name="operatorID">操作员ID，系统将检查该操作员的一些权限</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.IsUserMessageRead(System.Int32,System.Int32,Framework.Message.MessageStatus@)">
            <summary>
            是否已经阅读
            此处假设此消息的收件人中有该用户
            </summary>
            <param name="userID">用户ID，此处假设此消息的收件人中有该用户</param>
            <param name="messageID">消息ID</param>
            <param name="lastMessageStatus">消息的最后状态</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.GetUserMessageReaders(System.Int32)">
            <summary>
            阅读者列表
            </summary>
            <param name="messageID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.DeleteMessageRead(System.Int32)">
            <summary>
            删除用户消息阅读记录
            </summary>
            <param name="messageReadID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.UpdateUserMessage(System.Int32,Framework.Message.MessageEntity)">
            <summary>
            更新用户消息
            </summary>
            <param name="userID">发送消息的ID</param>
            <param name="me">消息</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.GetUserMessageRead(System.Int32,System.Int32)">
            <summary>
            获得用户消息读取记录
            </summary>
            <param name="receiverID">收信人ID</param>
            <param name="messageID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.UpdateUserMessageRead(Framework.Message.MessageRead,Framework.Enumerations.DataProviderAction)">
            <summary>
            更新用户消息读取记录
            </summary>
            <param name="mr"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.GetUserMessagesRelied(System.Int32,System.Int32)">
            <summary>
            获得某条消息的回复记录
            </summary>
            <param name="userID">回复的用户ID，0表示不考虑回复的用户，只管所有的回复</param>
            <param name="messageID">消息ID</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.MessageDataProvider.GetUserMessagedReplyCount(System.Int32,System.Int32)">
            <summary>
            查询针对某个消息的回复个数
            </summary>
            <param name="userID">回复的用户ID，0表示不考虑回复的用户，只管所有的回复</param>
            <param name="messageID">消息ID</param>
            <returns></returns>
        </member>
        <member name="T:Framework.Components.RemoteObjectProvider">
            <summary>
            远程对像提供器Provider
            </summary>
        </member>
        <member name="M:Framework.Components.RemoteObjectProvider.#ctor(System.Xml.XmlAttributeCollection)">
            <summary>
            
            </summary>
            <param name="attributes"></param>
        </member>
        <member name="M:Framework.Components.RemoteObjectProvider.ToString">
            <summary>
            自定义的ＴｏＳｔｒｉｎｇ，简洁地显示对象的信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:Framework.Components.RemoteObjectProvider.Name">
            <summary>
            名称，一般一个业务一个名字
            </summary>
        </member>
        <member name="P:Framework.Components.RemoteObjectProvider.Protocol">
            <summary>
            协议如ＴＣＰ等
            </summary>
        </member>
        <member name="P:Framework.Components.RemoteObjectProvider.IP">
            <summary>
            ＩＰ地址
            </summary>
        </member>
        <member name="P:Framework.Components.RemoteObjectProvider.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:Framework.Components.RemoteObjectProvider.RemoteNamespace">
            <summary>
            远程对像名称空间
            </summary>
        </member>
        <member name="P:Framework.Components.RemoteObjectProvider.URI">
            <summary>
            远程对像地址
            </summary>
        </member>
        <member name="P:Framework.Components.RemoteObjectProvider.Attributes">
            <summary>
            其它扩展信息
            </summary>
        </member>
        <member name="T:Framework.Events.AsynchronizeEvent">
            <summary>
            异步事件实体，用于在数据库中记录异步事件。
            </summary>
        </member>
        <member name="P:Framework.Events.AsynchronizeEvent.AsynEventID">
            <summary>
            AsynEventID
            </summary>
        </member>
        <member name="P:Framework.Events.AsynchronizeEvent.SettingsID">
            <summary>
            SettingsID
            </summary>
        </member>
        <member name="P:Framework.Events.AsynchronizeEvent.EventID">
            <summary>
            EventID
            </summary>
        </member>
        <member name="P:Framework.Events.AsynchronizeEvent.EventTitle">
            <summary>
            EventTitle
            </summary>
        </member>
        <member name="P:Framework.Events.AsynchronizeEvent.EventType">
            <summary>
            EventType
            与EventEntity中类型一样
            </summary>
        </member>
        <member name="P:Framework.Events.AsynchronizeEvent.ExecuteType">
            <summary>
            ExecuteType
            </summary>s
        </member>
        <member name="P:Framework.Events.AsynchronizeEvent.NextExecuteTime">
            <summary>
            NextExecuteTime
            </summary>
        </member>
        <member name="P:Framework.Events.AsynchronizeEvent.LastExecuteTime">
            <summary>
            LastExecuteTime
            </summary>
        </member>
        <member name="P:Framework.Events.AsynchronizeEvent.CountOfRetries">
            <summary>
            CountOfRetries
            </summary>
        </member>
        <member name="P:Framework.Events.AsynchronizeEvent.ExecuteParameters">
            <summary>
            ExecuteParameters
            </summary>
        </member>
        <member name="P:Framework.Events.AsynchronizeEvent.UserEventAdded">
            <summary>
            UserEventAdded
            </summary>
        </member>
        <member name="T:Framework.Enumerations.EventDescriptionType">
            <summary>
            事件消息分类
            </summary>
        </member>
        <member name="F:Framework.Enumerations.EventDescriptionType.Security">
            <summary>
            安全事件
            </summary>
        </member>
        <member name="F:Framework.Enumerations.EventDescriptionType.User">
            <summary>
            用户事件
            </summary>
        </member>
        <member name="F:Framework.Enumerations.EventDescriptionType.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="F:Framework.Enumerations.EventDescriptionType.Log">
            <summary>
            日志
            </summary>
        </member>
        <member name="F:Framework.Enumerations.EventDescriptionType.Customer">
            <summary>
            客户管理
            </summary>
        </member>
        <member name="F:Framework.Enumerations.EventDescriptionType.ContentManager">
            <summary>
            内容管理
            </summary>
        </member>
        <member name="T:Framework.Components.ZipStream">
            <summary>
            压缩/解压
            </summary>
        </member>
        <member name="M:Framework.Components.ZipStream.Compress(System.Byte[])">
            <summary>
            压缩流数据
            </summary>
            <param name="data">需要压缩的数据</param>
            <returns>压缩后的流数据</returns>
        </member>
        <member name="M:Framework.Components.ZipStream.Decompress(System.Byte[])">
            <summary>
            解压缩流数据
            </summary>
            <param name="data">需要解压缩的流数据</param>
            <returns>解压缩后的数据</returns>
        </member>
        <member name="M:Framework.Components.ZipStream.Compress(System.String,System.String)">
            <summary>
            对目标文件夹进行压缩，将压缩结果保存为指定文件
            </summary>
            <param name="dirPath">目标文件夹</param>
            <param name="fileName">指定的压缩文件名</param>
        </member>
        <member name="M:Framework.Components.ZipStream.DeCompress(System.String,System.String)">
            <summary>
            对目标压缩文件解压缩，将内容解压缩到指定文件夹
            </summary>
            <param name="fileName">压缩文件</param>
            <param name="dirPath">解压缩目录</param>
        </member>
        <member name="M:Framework.Components.ZipStream.DeSerializeFiles(System.IO.Stream,System.String)">
            <summary>
            反序列化文件
            </summary>
            <param name="s"></param>
            <param name="dirPath"></param>
        </member>
        <member name="M:Framework.Components.ZipStream.CreateCompressFile(System.IO.Stream,System.String)">
            <summary>
            创建压缩文件
            </summary>
            <param name="source"></param>
            <param name="destinationName"></param>
        </member>
        <member name="T:Framework.Components.ZipStream.SerializeFileInfo">
            <summary>
            序列化文件信息
            </summary>
        </member>
        <member name="T:Framework.Components.Entities.SiteDisallowedNameSet">
            <summary>
            Summary description for UserSet.
            </summary>
        </member>
        <member name="M:Framework.Components.Entities.SiteDisallowedNameSet.Add(Framework.Components.Entities.SiteDisallowedName)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Entities.SiteDisallowedNameSet.Contains(Framework.Components.Entities.SiteDisallowedName)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Entities.SiteDisallowedNameSet.IndexOf(Framework.Components.Entities.SiteDisallowedName)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Entities.SiteDisallowedNameSet.Insert(System.Int32,Framework.Components.Entities.SiteDisallowedName)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Framework.Components.Entities.SiteDisallowedNameSet.Remove(Framework.Components.Entities.SiteDisallowedName)">
            <summary>
            /
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Framework.Components.Entities.SiteDisallowedNameSet.CurrentPos">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.SiteDisallowedNameSet.TotalRecordCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.SiteDisallowedNameSet.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Components.RemoteObjectCallHelper">
            <summary>
            远程对像调用
            需要支持物理三层调用及逻辑三层物理两层调用模式
            </summary>
        </member>
        <member name="M:Framework.Components.RemoteObjectCallHelper.CreateInstance``1(System.String)">
            <summary>
            根据提供器名称创建远程对像
            如果系统配为逻辑三层，即应用与表现在同一个物理服务器上，不需要通过远程调用的模式来处理。
            在物理三层部署时，系统将通过ClientConfiguration.xml中的RemoteObjects配置来创建远程服务的代理；
            在物理两层部署时，系统将通过ServerConfiguration.xml中的Services配置来创建服务对像。
            因此同一个服务在ClientConfiguration.xml中的RemoteObjects中的名称与ServerConfiguration.xml中的Services的名称一致。
            </summary>
            <typeparam name="T">远程对像类型</typeparam>
            <param name="providerName">提供器名称</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.RemoteObjectCallHelper.CreateInstance``1(System.String,System.String)">
            <summary>
            根据提供器名称创建远程对像
            </summary>
            <typeparam name="T"></typeparam>
            <param name="providerName"></param>
            <param name="objectUri">远程对像ＵＲＩ</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.RemoteObjectCallHelper.CreateInstance``1(System.String,System.String,System.Boolean)">
            <summary>
            根据提供器名称创建远程对像
            如果系统配为逻辑三层，即应用与表现在同一个物理服务器上，不需要通过远程调用的模式来处理。
            在物理三层部署时，系统将通过ClientConfiguration.xml中的RemoteObjects配置来创建远程服务的代理；
            在物理两层部署时，系统将通过ServerConfiguration.xml中的Services配置来创建服务对像。
            因此同一个服务在ClientConfiguration.xml中的RemoteObjects中的名称与ServerConfiguration.xml中的Services的名称一致。
            </summary>
        </member>
        <member name="T:Framework.Securities.EncryptMode">
            <summary>
            密码加密方式
            </summary>
        </member>
        <member name="F:Framework.Securities.EncryptMode.MD5">
            <summary>
            标准MD5
            </summary>
        </member>
        <member name="F:Framework.Securities.EncryptMode.SHA512">
            <summary>
            新系统SHA512加密方式
            </summary>
        </member>
        <member name="F:Framework.Securities.EncryptMode.SHA256">
            <summary>
            SHA256
            </summary>
        </member>
        <member name="F:Framework.Securities.EncryptMode.SHA384">
            <summary>
            SHA384
            </summary>
        </member>
        <member name="F:Framework.Securities.EncryptMode.SHA1">
            <summary>
            SHA1
            </summary>
        </member>
        <member name="F:Framework.Securities.EncryptMode.ClearText">
            <summary>
            明文
            </summary>
        </member>
        <member name="F:Framework.Securities.EncryptMode.Rijndael">
            <summary>
            Rijndael对称可逆加密方式
            </summary>
        </member>
        <member name="F:Framework.Securities.EncryptMode.MD5_ASP">
            <summary>
            旧MD5
            </summary>
        </member>
        <member name="F:Framework.Securities.EncryptMode.MD5_Default">
            <summary>
            微软默认的MD5加密方式
            </summary>
        </member>
        <member name="F:Framework.Securities.EncryptMode.MD5Old">
            <summary>
            老系统的MD5加密方式
            </summary>
        </member>
        <member name="T:Framework.Components.RegularExp">
            <summary>
            常用正则表达式
            </summary>
            <summary>
            常用正则表达式
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.UnMinusInteger">
            <summary>
            非负整数
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.PlusInteger">
            <summary>
            正整数
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.UnPlusInteger">
            <summary>
            非正整数（负整数 + 0） 
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.MinusInteger">
            <summary>
            负整数
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.Integer">
            <summary>
            整数
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.UnMinusFloat">
            <summary>
            非负浮点数（正浮点数 + 0）
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.PlusFloat">
            <summary>
            正浮点数
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.UnPlusFloat">
            <summary>
            非正浮点数（负浮点数 + 0）
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.MinusFloat">
            <summary>
            负浮点数
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.Float">
            <summary>
            浮点数
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.Letter">
            <summary>
            由26个英文字母组成的字符串
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.Numeric">
            <summary>
            由数字组成
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.UpperLetter">
            <summary>
            由26个英文字母的大写组成的字符串
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.LowerLetter">
            <summary>
            由26个英文字母的小写组成的字符串
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.NumericOrLetter">
            <summary>
            由数字和26个英文字母组成的字符串
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.NumericOrLetterOrUnderline">
            <summary>
            由数字、26个英文字母或者下划线组成的字符串
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.Chinese">
            <summary>
            中文
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.NumbericOrLetterOrChinese">
            <summary>
            由数字和26个英文字母或中文组成的字符串
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.Email">
            <summary>
            email地址
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.Url">
            <summary>
            URL
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.Telephone">
            <summary>
            电话号码
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.Mobile">
            <summary>
            手机号码
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.ImageFormat">
            <summary>
            图像文件扩展名
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.Color">
            <summary>
            颜色
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.IP">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.Date">
            <summary>
            日期（YYYY-MM-DD）
            </summary>
        </member>
        <member name="F:Framework.Components.RegularExp.DateTime">
            <summary>
            日期和时间（YYYY-MM-DD HH:MM:SS）
            </summary>
        </member>
        <member name="T:Framework.Server.PermissionProvider">
            <summary>
            权限验证提供器
            </summary>
        </member>
        <member name="M:Framework.Server.PermissionProvider.Instance">
            <summary>
            Returns an instance of the user-specified data provider class.
            </summary>
            <returns>An instance of the user-specified data provider class.  This class must inherit the
            CommonDataProvider interface.</returns>
        </member>
        <member name="M:Framework.Server.PermissionProvider.CreateDefaultPermissionProvider">
            <summary>
            Creates the Default CommonDataProvider
            </summary>
        </member>
        <member name="M:Framework.Server.PermissionProvider.GetModuleIDByCode(System.String)">
            <summary>
            读取模块ID
            </summary>
            <param name="moduleCode"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.PermissionProvider.GetSQLBindDataRights(System.String)">
            <summary>
            绑定数据权限
            </summary>
            <param name="querySql"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.PermissionProvider.GetSqlBindDataWhereClause(System.String,System.String[],System.Int32)">
            <summary>
            
            </summary>
            <param name="querySql"></param>
            <param name="tables"></param>
            <param name="operaterid"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Securities.HashEncryption">
            <summary>
            Hash加密
            </summary>
        </member>
        <member name="M:Framework.Securities.HashEncryption.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Framework.Securities.HashEncryption.#ctor(Framework.Securities.EncryptMode)">
            <summary>
            构造函数
            </summary>
            <param name="HashType"></param>
        </member>
        <member name="M:Framework.Securities.HashEncryption.#ctor(Framework.Securities.EncryptMode,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="HashType"></param>
            <param name="OriginalString"></param>
        </member>
        <member name="M:Framework.Securities.HashEncryption.#ctor(Framework.Securities.EncryptMode,System.String,System.Boolean,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="HashType"></param>
            <param name="OriginalString"></param>
            <param name="UseSalt"></param>
            <param name="SaltValue"></param>
        </member>
        <member name="M:Framework.Securities.HashEncryption.CreateHash">
            <summary>
            创建Hash值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Securities.HashEncryption.CreateHash(System.String)">
            <summary>
            创建一个Hash值
            </summary>
            <param name="OriginalString"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Securities.HashEncryption.CreateHash(System.String,Framework.Securities.EncryptMode)">
            <summary>
            创建一个Hash值
            </summary>
            <param name="OriginalString"></param>
            <param name="HashType"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Securities.HashEncryption.CreateHash(System.String,System.Boolean)">
            <summary>
            创建一个Hash值
            </summary>
            <param name="OriginalString"></param>
            <param name="UseSalt"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Securities.HashEncryption.CreateHash(System.String,Framework.Securities.EncryptMode,System.String)">
            <summary>
            创建一个Hash值
            </summary>
            <param name="OriginalString"></param>
            <param name="HashType"></param>
            <param name="SaltValue"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Securities.HashEncryption.CreateHash(System.String,System.String)">
            <summary>
            创建一个Hash值
            </summary>
            <param name="OriginalString"></param>
            <param name="SaltValue"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Securities.HashEncryption.Reset">
            <summary>
            重设，将所有值清空或恢复默认值
            </summary>
        </member>
        <member name="M:Framework.Securities.HashEncryption.CreateSalt">
            <summary>
            创建干挠码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Securities.HashEncryption.ByteArrayToHexString(System.Byte[])">
            <summary>
            将字节数组变成16进制字串
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="P:Framework.Securities.HashEncryption.HashType">
            <summary>
            加密码类型
            </summary>
        </member>
        <member name="P:Framework.Securities.HashEncryption.SaltValue">
            <summary>
            干挠码
            </summary>
        </member>
        <member name="P:Framework.Securities.HashEncryption.UseSalt">
            <summary>
            是否使用干挠码
            </summary>
        </member>
        <member name="P:Framework.Securities.HashEncryption.SaltLength">
            <summary>
            干挠码长度
            </summary>
        </member>
        <member name="P:Framework.Securities.HashEncryption.OriginalString">
            <summary>
            原始字串
            </summary>
        </member>
        <member name="P:Framework.Securities.HashEncryption.HashString">
            <summary>
            加密后字串
            </summary>
        </member>
        <member name="P:Framework.Securities.HashEncryption.ReturnHexString">
            <summary>
            返回十六进制字串
            </summary>
        </member>
        <member name="T:Framework.Search.OrderType">
            <summary>
            排序类型
            </summary>
        </member>
        <member name="F:Framework.Search.OrderType.NotSet">
            <summary>
            未设
            </summary>
        </member>
        <member name="F:Framework.Search.OrderType.Asc">
            <summary>
            升序
            </summary>
        </member>
        <member name="F:Framework.Search.OrderType.Desc">
            <summary>
            降序
            </summary>
        </member>
        <member name="T:Framework.Search.FieldItem">
            <summary>
            字段项
            </summary>
        </member>
        <member name="M:Framework.Search.FieldItem.#ctor(System.String,System.String,Framework.Search.SqlColumnType,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="oName">字段名</param>
            <param name="oTableName">表名</param>
            <param name="cType">类型</param>
            <param name="cCapital">标题</param>
            <param name="cMemo">备注</param>
        </member>
        <member name="M:Framework.Search.FieldItem.#ctor(System.String,System.String,System.String,System.String,Framework.Search.SqlColumnType)">
            <summary>
            构造函数
            </summary>
            <param name="oName">字段名</param>
            <param name="oTableName">表名</param>
            <param name="cType">类型</param>
            <param name="oAlias">别名</param>
            <param name="oTableAilas">表别名</param>
        </member>
        <member name="M:Framework.Search.FieldItem.#ctor(System.String,System.String,System.String,System.String,Framework.Search.SqlColumnType,Framework.Search.OrderType)">
            <summary>
            构造函数
            </summary>
            <param name="oName">字段名</param>
            <param name="oTableName">表名</param>
            <param name="cType">类型</param>
            <param name="oAlias">别名</param>
            <param name="oTableAilas">表别名</param>
            <param name="order">排序，正序或倒序，OrderType</param>
        </member>
        <member name="M:Framework.Search.FieldItem.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Framework.Search.FieldItem.CompareTo(System.Object)">
            <summary>
            比较两个字段是否一样
            通过字段别名和表别名是否相同来比较
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Framework.Search.FieldItem.Syntax">
            <summary>
            字段用于设定条件时，可以选择的数据
            </summary>
        </member>
        <member name="P:Framework.Search.FieldItem.Fa">
            <summary>
            字段的Filter属性
            </summary>
        </member>
        <member name="P:Framework.Search.FieldItem.Type">
            <summary>
            字段对应的属性的类型
            </summary>
        </member>
        <member name="P:Framework.Search.FieldItem.Capital">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Framework.Search.FieldItem.Memo">
            <summary>
            备注
            </summary>
        </member>
        <member name="P:Framework.Search.FieldItem.OriginalName">
            <summary>
            原始名称
            </summary>
        </member>
        <member name="P:Framework.Search.FieldItem.Name">
            <summary>
            名称，对应数据库中的字段名
            </summary>
        </member>
        <member name="P:Framework.Search.FieldItem.TableName">
            <summary>
            获得表名
            </summary>
        </member>
        <member name="P:Framework.Search.FieldItem.ColumnType">
            <summary>
            列类型
            </summary>
        </member>
        <member name="P:Framework.Search.FieldItem.FieldOrder">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:Framework.Search.FieldItem.TableAlias">
            <summary>
            别名或实体名
            </summary>
        </member>
        <member name="P:Framework.Search.FieldItem.FieldAlias">
            <summary>
            字段的另一个名字
            </summary>
        </member>
        <member name="T:Framework.Search.CompareOperateSet">
             <summary>
            关于比较符操作的设置
             </summary>
        </member>
        <member name="M:Framework.Search.CompareOperateSet.Add1(Framework.Search.CompareType[])">
            <summary>
            循环增加函数
            </summary>
            <param name="ops"></param>
        </member>
        <member name="M:Framework.Search.CompareOperateSet.Add(Framework.Search.CompareOperate)">
            <summary>
            添加函数
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Framework.Search.CompareOperateSet.Remove(Framework.Search.CompareOperate)">
            <summary>
            移除函数
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Framework.Search.CompareOperateSet.Contains(Framework.Search.CompareOperate)">
            <summary>
            返回内容函数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.CompareOperateSet.IndexOf(Framework.Search.CompareOperate)">
            <summary>
            返回索引函数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Framework.Search.CompareOperateSet.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Search.CompareOperate">
            <summary>
            关于比较操作符的一些处理方法
            </summary>
        </member>
        <member name="M:Framework.Search.CompareOperate.#ctor(Framework.Search.CompareType)">
            <summary>
            构造函数
            </summary>
            <param name="opt"></param>
        </member>
        <member name="P:Framework.Search.CompareOperate.OperateType">
            <summary>
            比较操作类型
            </summary>
        </member>
        <member name="P:Framework.Search.CompareOperate.OperateName">
            <summary>
            操作中文名称
            </summary>
        </member>
        <member name="P:Framework.Search.CompareOperate.IsComplex">
            <summary>
            是否复合条件
            </summary>
        </member>
        <member name="P:Framework.Search.CompareOperate.Syntax">
            <summary>
            表达式
            </summary>
        </member>
        <member name="T:Framework.Search.AbstractParameter">
            <summary>
            抽像类，用于数据查询调用时的参数。
            具体使用时一般需要根据业务情况继承一个实际上可以使用的类
            </summary>
        </member>
        <member name="M:Framework.Search.AbstractParameter.GetWhereClause">
            <summary>
            获得查询条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.AbstractParameter.GetEnumOptions(System.Type,System.Int32)">
            <summary>
            读取枚举类型的复合值
            前提是枚举类型的值可以按位来与及或
            </summary>
            <param name="enumType">枚举类型的Type</param>
            <param name="status">当前值</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.AbstractParameter.GetOrderString">
            <summary>
            得到输出结果时的排序规则
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.AbstractParameter.GetOrderStringDesc">
            <summary>
            与输出结果排序相反的规则字串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.AbstractParameter.GetOrderColumnsString">
            <summary>
            涉及排序的字段列表
            </summary>
            <returns></returns>
        </member>
        <member name="P:Framework.Search.AbstractParameter.SimpleFilter">
            <summary>
            简单的一对一的条件
            </summary>
        </member>
        <member name="P:Framework.Search.AbstractParameter.FilterCase">
            <summary>
            其它复合条件
            </summary>
        </member>
        <member name="P:Framework.Search.AbstractParameter.PageIndex">
            <summary>
            当前页号
            </summary>
        </member>
        <member name="P:Framework.Search.AbstractParameter.PageSize">
            <summary>
            当前页大小
            </summary>
        </member>
        <member name="P:Framework.Search.AbstractParameter.BeginTime">
            <summary>
            记录的开始时间
            </summary>
        </member>
        <member name="P:Framework.Search.AbstractParameter.EndTime">
            <summary>
            记录的结束时间
            </summary>
        </member>
        <member name="P:Framework.Search.AbstractParameter.OperatorID">
            <summary>
            操作员ＩＤ
            </summary>
        </member>
        <member name="P:Framework.Search.AbstractParameter.Orders">
            <summary>
            排序规则
            </summary>
        </member>
        <member name="T:Framework.Message.MessageQueryParameters">
            <summary>
            消息查询的参数
            适用DB类型的消息,注意QueryReceivedData参数
            </summary>
        </member>
        <member name="M:Framework.Message.MessageQueryParameters.GetOrderByColumns">
            <summary>
            排序涉及的字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageQueryParameters.GetOrderByClause">
            <summary>
            输出结果排序
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageQueryParameters.GetOrderByClause2">
            <summary>
            排序
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageQueryParameters.#ctor(System.String,System.DateTime,System.DateTime,Framework.Message.MessageCategory,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="senderName"></param>
            <param name="begin"></param>
            <param name="end"></param>
            <param name="category"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.MessageQueryParameters.#ctor(System.String,System.DateTime,System.DateTime,Framework.Message.MessageCategory,Framework.Message.MessageStatus,Framework.Message.MessageOrder,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="senderName"></param>
            <param name="begin"></param>
            <param name="end"></param>
            <param name="category"></param>
            <param name="status"></param>
            <param name="order"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
        </member>
        <member name="M:Framework.Message.MessageQueryParameters.#ctor(System.String,System.DateTime,System.DateTime,System.String,Framework.Message.MessageStatus,Framework.Message.MessageOrder,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="senderName"></param>
            <param name="begin"></param>
            <param name="end"></param>
            <param name="category"></param>
            <param name="status"></param>
            <param name="order"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
        </member>
        <member name="M:Framework.Message.MessageQueryParameters.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Framework.Message.MessageQueryParameters.OrderBy">
            <summary>
            消息排序规则
            </summary>
        </member>
        <member name="P:Framework.Message.MessageQueryParameters.QueryReceivedData">
            <summary>
            是否查询接收的消息
            </summary>
        </member>
        <member name="P:Framework.Message.MessageQueryParameters.Status">
            <summary>
            状态，可为复合型状态
            </summary>
        </member>
        <member name="P:Framework.Message.MessageQueryParameters.Category">
            <summary>
            分类，可以为复合状态
            </summary>
        </member>
        <member name="P:Framework.Message.MessageQueryParameters.CategoryIDs">
            <summary>
            分类，可以为复合状态
            </summary>
        </member>
        <member name="P:Framework.Message.MessageQueryParameters.ReceiverID">
            <summary>
            接收者ID
            </summary>
        </member>
        <member name="P:Framework.Message.MessageQueryParameters.SenderID">
            <summary>
            发送者ID
            </summary>
        </member>
        <member name="P:Framework.Message.MessageQueryParameters.SenderName">
            <summary>
            发送者姓名
            </summary>
        </member>
        <member name="P:Framework.Message.MessageQueryParameters.ReceiverName">
            <summary>
            接收者名称
            </summary>
        </member>
        <member name="P:Framework.Message.MessageQueryParameters.IncludeDeleteData">
            <summary>
            是否包括删除的数据
            </summary>
        </member>
        <member name="T:Framework.Message.SiteMessageEntity">
            <summary>
            站点消息实体类
            </summary>
        </member>
        <member name="M:Framework.Message.SiteMessageEntity.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Framework.Message.MessageRead">
            <summary>
            表《UserMessageReaders》对应的基类
            </summary>
        </member>
        <member name="P:Framework.Message.MessageRead.OrgMessageReadID">
            <summary>
            MessageReadID
            </summary>
        </member>
        <member name="P:Framework.Message.MessageRead.MessageReadID">
            <summary>
            MessageReadID
            </summary>
        </member>
        <member name="P:Framework.Message.MessageRead.MessageID">
            <summary>
            UserMessageID
            </summary>
        </member>
        <member name="P:Framework.Message.MessageRead.SenderID">
            <summary>
            SenderID
            </summary>
        </member>
        <member name="P:Framework.Message.MessageRead.ReceiverID">
            <summary>
            ReceiverID
            </summary>
        </member>
        <member name="P:Framework.Message.MessageRead.DateReceived">
            <summary>
            DateReceived
            </summary>
        </member>
        <member name="P:Framework.Message.MessageRead.DateSended">
            <summary>
            DateSended
            </summary>
        </member>
        <member name="P:Framework.Message.MessageRead.MessageStatus">
            <summary>
            MessageStatus
            </summary>
        </member>
        <member name="T:Framework.Components.PinYin">
            <summary>
            用来获得汉字字符串的拼音首字母串或者首字母，用于按字母检索等处
            </summary>
        </member>
        <member name="F:Framework.Components.PinYin.m_strAbbreviation">
            <summary>
            汉字拼音首字母列表 本列表包含了20902个汉字,用于配合 ToChineseSpell 函数使用,本表收录的字符的Unicode编码范围为19968至40869, XDesigner 整理
            </summary>
            
        </member>
        <member name="M:Framework.Components.PinYin.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Framework.Components.PinYin.ToChineseSpell(System.String)">
            <summary>
            
            </summary>
            <param name="strText"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.PinYin.GetAbbreviation(System.String)">
            <summary>
            缩写
            </summary>
            <param name="strInput"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.PinYin.GetFullCode(System.String)">
            <summary>
            
            </summary>
            <param name="strInput"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.PinYin.GetFullCodeWithSpace(System.String)">
            <summary>
            
            </summary>
            <param name="strInput"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.PinYin.GetPyCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Framework.Events.UserChangedCallBack">
            <summary>
            用户发生变化事件
            用于不同系统同步用户数据
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Framework.Events.UserChangedCallBackArgs">
            <summary>
            用户发生变化的参数
            用于传递不同的事件
            </summary>
        </member>
        <member name="M:Framework.Events.UserChangedCallBackArgs.#ctor(Framework.Components.UserInfo,System.String)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Framework.Events.UserChangedCallBackArgs.#ctor(Framework.Components.UserInfo,System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="u"></param>
            <param name="changeType"></param>
            <param name="serverName"></param>
            <param name="settingsID"></param>
        </member>
        <member name="P:Framework.Events.UserChangedCallBackArgs.ServerName">
            <summary>
            发出事件的服务器名称
            </summary>
        </member>
        <member name="P:Framework.Events.UserChangedCallBackArgs.ChangeType">
            <summary>
            变更方式：Add新增 Update修改Delete删除
            </summary>
        </member>
        <member name="P:Framework.Events.UserChangedCallBackArgs.SettingsID">
            <summary>
            站点设置ID
            </summary>
        </member>
        <member name="P:Framework.Events.UserChangedCallBackArgs.User">
            <summary>
            用户
            </summary>
        </member>
        <member name="T:Framework.Events.ObjectSelectionChangedCallBack">
            <summary>
            对像选择发生变化时回调事件委托
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Framework.Events.ObjectSelectionChangedCallBackArgs">
            <summary>
            对像选择变化回调参数
            
            </summary>
        </member>
        <member name="M:Framework.Events.ObjectSelectionChangedCallBackArgs.#ctor(System.Int32,System.Type,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="objectID"></param>
            <param name="objectType"></param>
            <param name="o"></param>
        </member>
        <member name="M:Framework.Events.ObjectSelectionChangedCallBackArgs.#ctor(System.Int64,System.Type,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="objectID"></param>
            <param name="objectType"></param>
            <param name="o"></param>
        </member>
        <member name="M:Framework.Events.ObjectSelectionChangedCallBackArgs.#ctor(System.String,System.Type,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="objectID"></param>
            <param name="objectType"></param>
            <param name="o"></param>
        </member>
        <member name="P:Framework.Events.ObjectSelectionChangedCallBackArgs.ObjectID">
            <summary>
            对像ID
            </summary>
        </member>
        <member name="P:Framework.Events.ObjectSelectionChangedCallBackArgs.ObjectLongID">
            <summary>
            对像ID
            </summary>
        </member>
        <member name="P:Framework.Events.ObjectSelectionChangedCallBackArgs.Object">
            <summary>
            对像
            </summary>
        </member>
        <member name="P:Framework.Events.ObjectSelectionChangedCallBackArgs.ObjectType">
            <summary>
            对像类型
            </summary>
        </member>
        <member name="P:Framework.Events.ObjectSelectionChangedCallBackArgs.ObjectStringID">
            <summary>
            ID，字符串型
            </summary>
        </member>
        <member name="T:Framework.Enumerations.CommendType">
            <summary>
            9sky.com 的推荐类型
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CommendType.Favorite">
            <summary>
            收藏
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CommendType.Original">
            <summary>
            原唱
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CommendType.Show">
            <summary>
            翻唱
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CommendType.Commend">
            <summary>
            推荐
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CommendType.Audition">
            <summary>
            试听
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CommendType.Null">
            <summary>
            无
            </summary>
        </member>
        <member name="T:Framework.Securities.MD5_Default">
            <summary>
            MD5加密
            </summary>
        </member>
        <member name="M:Framework.Securities.MD5_Default.GeneratePasswordSalt">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Securities.MD5_Default.GeneratePasswordHash(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="password"></param>
            <param name="passwordSalt"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Securities.MD5_Default.GeneratePasswordAnswerHash(System.String)">
            <summary>
            
            </summary>
            <param name="answer"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Securities.MD5_Default.DecodePassword(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="passwordHash"></param>
            <param name="passwordSalt"></param>
            <returns></returns>
        </member>
        <member name="T:CompressionSink.CompressionClientSinkProvider">
            <summary>
            CompressionClientSinkProvider
            </summary>
        </member>
        <member name="M:CompressionSink.CompressionClientSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            CompressionClientSinkProvider
            </summary>
            <param name="properties"></param>
            <param name="providerData"></param>
        </member>
        <member name="M:CompressionSink.CompressionClientSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelSender,System.String,System.Object)">
            <summary>
            CreateSink
            </summary>
            <param name="channel"></param>
            <param name="url"></param>
            <param name="remoteChannelData"></param>
            <returns></returns>
        </member>
        <member name="P:CompressionSink.CompressionClientSinkProvider.Next">
            <summary>
            Next
            </summary>
        </member>
        <member name="T:Client.Components.UserMessageProvider">
            <summary>
            用户数据消息接口实现类
            本接口调用远程应用服务器数据
            </summary>
        </member>
        <member name="T:Framework.Message.IUserMessageHelper">
            <summary>
            消息接口
            实现了关于消息的可读、可删除及可回复等判断
            实现了消息的读取、删除等操作
            实现了邮件队例的处理等
            Lastmodified: 2008-05-23 by kimmy
            </summary>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.CanSendMessageRead(Framework.Message.MessageEntity,System.String,System.Int32,System.String,System.String)">
            <summary>
            判断某个用户打开一个消息时，是否做出已经读取的标志。
            原则上必须信息已经发出，并且该用户是收件人，方可读取。
            </summary>
            <param name="msg">消息本身信息</param>
            <param name="userName">需验证权限的用户</param>
            <param name="userID">用户ID，此处传入主要是为了避免到数据库中再次查询</param>
            <param name="guid">全局GUID，用于身份证识别，现阶段暂时不用</param>
            <param name="ipAddress">客户端IP地址，用于验证此客户端是否允许访问</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.CanMessageDelete(Framework.Message.MessageEntity,System.String,System.Int32,System.String,System.String)">
            <summary>
            消息是否可以被删除
            如果消息没有被发送或没有被读取，则可以删除。
            </summary>
            <param name="msg">消息本身信息</param>
            <param name="userName">需验证权限的用户</param>
            <param name="userID">用户ID，此处传入主要是为了避免到数据库中再次查询</param>
            <param name="guid">全局GUID，用于身份证识别，现阶段暂时不用</param>
            <param name="ipAddress">客户端IP地址，用于验证此客户端是否允许访问</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.CanMessageReply(Framework.Message.MessageEntity,System.String,System.Int32,System.String,System.String)">
            <summary>
            此消息是否可以被回复
            </summary>
            <param name="msg">消息本身信息</param>
            <param name="userName">需验证权限的用户</param>
            <param name="userID">用户ID，此处传入主要是为了避免到数据库中再次查询</param>
            <param name="guid">全局GUID，用于身份证识别，现阶段暂时不用</param>
            <param name="ipAddress">客户端IP地址，用于验证此客户端是否允许访问</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.CreateUserMessage(System.Int32,Framework.Message.MessageEntity,System.String,System.String)">
            <summary>
            创建用户消息
            如果用户消息发送时间与创建时间差距在两分钟内，则自动发送消息。
            根据消息的类型分别处理：
            如果是公告信息，则写入公告表。用户在阅读时，将复制一份公告到用户的消息记录中，表明已经读过。用户可以删除自己的公告读取信息。
            如果是日志，则写入日志表
            如果是异常 ，写入异常表
            如果是邮件，写入邮件发送队列，等待系统服务发送邮件
            如果是站内消息，写入用户私有信息表
            </summary>
            <param name="userID">用户ID，如果消息的From中有用户信息，此处可以传入－1，系统将自动根据From中的用户读取UserID</param>
            <param name="msg"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.SendUserMessage(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            发送用户消息
            如果接收者为*，在接收表中将不增加记录，在读取时才增加记录
            如果接收者为其它，则在接收表中增加记录
            </summary>
            <param name="userID">消息发送者ID</param>
            <param name="messageID">消息ID</param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.SendUserMessage(System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            发送用户消息
            如果接收者为*，在接收表中将不增加记录，在读取时才增加记录
            如果接收者为其它，则在接收表中增加记录
            </summary>
            <param name="userID">消息发送者ID</param>
            <param name="messageID">消息ID</param>
            <param name="receivers">接收者列表，此处主要是为了减少数据库查询次数</param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.DeleteUserMessage(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            删除用户消息
            </summary>
            <param name="messageID"></param>
            <param name="operatorID">操作员ID，系统将检查该操作员的一些权限</param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.DeleteUserMessages(System.Int32,System.Int32[],System.String,System.String)">
            <summary>
            删除用户消息
            </summary>
            <param name="operatorID">操作员ID，系统将检查该操作员的一些权限</param>
            <param name="messageIDs"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.DeleteUserMessages(System.Int32,System.Collections.Generic.IList{Framework.Message.MessageEntity},System.String,System.String)">
            <summary>
            删除用户消息
            </summary>
            <param name="operatorID">操作员ID，系统将检查该操作员的一些权限</param>
            <param name="messages"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.DeleteUserMessages(System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            清空用户发送或接收的消息
            </summary>
            <param name="operatorID">操作员ID，即发送或接收消息的人的ID，根据IsReceived来判断是接收还是发送的人。</param>
            <param name="isReceived">是否为接收的消息</param>
            <param name="guid"></param>
            <param name="ipAddress"></param>
            <returns>处理的数据条数</returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.DeleteUserMessages(System.Int32,System.Boolean,Framework.Message.MessageCategory,System.String,System.String)">
            <summary>
            清空用户发送或接收的消息
            </summary>
            <param name="operatorID">操作员ID，即发送或接收消息的人的ID，根据IsReceived来判断是接收还是发送的人。</param>
            <param name="isReceived">是否为接收的消息</param>
            <param name="category">在系统内部的消息分类</param>
            <param name="guid"></param>
            <param name="ipAddress"></param>
            <returns>处理的数据条数</returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.GetUserMessageEntity(System.Int32,System.String,System.String)">
            <summary>
            获得用户消息记录
            </summary>
            <param name="messageID"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.GetUserMessages(System.Int32,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            获得用户消息，分页查询
            </summary>
            <param name="userID">发件人ID</param>
            <param name="receiverName">收件人，可以为空</param>
            <param name="begin">创建日期范围：开始时间</param>
            <param name="end">创建日期范围：结束日期</param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.GetUserMessages(System.String,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            获得用户消息，分页查询
            </summary>
            <param name="userName">发件人姓名</param>
            <param name="receiverName">收件人，可以为空值，表示不限定</param>
            <param name="begin">创建日期范围：开始时间</param>
            <param name="end">创建日期范围：结束日期</param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.GetUserMessages(System.Int32,System.String,System.DateTime,System.DateTime,Framework.Message.MessageStatus,Framework.Message.MessageCategory,Framework.Message.MessageOrder,System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            获得用户消息，分页查询
            </summary>
            <param name="userID">发件人ID</param>
            <param name="receiverName">收件人，可以为空值，表示不限定</param>
            <param name="begin">创建日期范围：开始时间</param>
            <param name="end">创建日期范围：结束日期</param>
            <param name="status"></param>
            <param name="order"></param>
            <param name="category"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.GetReceivedUserMessages(System.Int32,System.String,System.DateTime,System.DateTime,Framework.Message.MessageStatus,Framework.Message.MessageCategory,Framework.Message.MessageOrder,System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            获得用户收到的符合条件的消息
            </summary>
            <param name="userID">收件人ID</param>
            <param name="senderName">发件人，为空时表示不限定</param>
            <param name="begin">发送日期范围：开始时间</param>
            <param name="end">发送日期范围：结束日期</param>
            <param name="status"></param>
            <param name="order"></param>
            <param name="category"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.GetReceivedUserMessagesCount(System.Int32,System.String,System.DateTime,System.DateTime,Framework.Message.MessageStatus,Framework.Message.MessageCategory,System.String,System.String)">
            <summary>
            获得用户收到的符合条件的消息数量
            </summary>
            <param name="userID">收件人ID</param>
            <param name="senderName">发件人，为空时表示不限定</param>
            <param name="begin">发送日期范围：开始时间</param>
            <param name="end">发送日期范围：结束日期</param>
            <param name="status"></param>
            <param name="order"></param>
            <param name="category"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.GetReceivedUserMessages(System.Int32,System.String,System.DateTime,System.DateTime,Framework.Message.MessageStatus,System.String,Framework.Message.MessageOrder,System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            获得用户收到的符合条件的消息
            </summary>
            <param name="userID">收件人ID</param>
            <param name="senderName">发件人，为空时表示不限定</param>
            <param name="begin">发送日期范围：开始时间</param>
            <param name="end">发送日期范围：结束日期</param>
            <param name="status"></param>
            <param name="order"></param>
            <param name="category"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.GetReceivedUserMessagesCount(System.Int32,System.String,System.DateTime,System.DateTime,Framework.Message.MessageStatus,System.String,System.String,System.String)">
            <summary>
            获得用户收到的符合条件的消息数量
            </summary>
            <param name="userID">收件人ID</param>
            <param name="senderName">发件人，为空时表示不限定</param>
            <param name="begin">发送日期范围：开始时间</param>
            <param name="end">发送日期范围：结束日期</param>
            <param name="status"></param>
            <param name="order"></param>
            <param name="category"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.GetReceivedUserMessages(System.Int32,System.Int16,System.String,System.DateTime,System.DateTime,Framework.Message.MessageStatus,System.String,Framework.Message.MessageOrder,System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            获得用户收到的符合条件的消息
            </summary>
            <param name="userID">收件人ID</param>
            <param name="senderName">发件人，为空时表示不限定</param>
            <param name="begin">发送日期范围：开始时间</param>
            <param name="end">发送日期范围：结束日期</param>
            <param name="status"></param>
            <param name="order"></param>
            <param name="category"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <param name="isNotice">消息返回结果参数  1表示个人消息 2表示群发的系统消息（可能为公告，收信人为*） 3两者都有</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.GetReceivedUserMessagesCount(System.Int32,System.Int16,System.String,System.DateTime,System.DateTime,Framework.Message.MessageStatus,System.String,System.String,System.String)">
            <summary>
            获得用户收到的符合条件的消息数量
            </summary>
            <param name="userID">收件人ID</param>
            <param name="senderName">发件人，为空时表示不限定</param>
            <param name="begin">发送日期范围：开始时间</param>
            <param name="end">发送日期范围：结束日期</param>
            <param name="status"></param>
            <param name="order"></param>
            <param name="category"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <param name="isNotice">消息返回结果参数  1表示个人消息 2表示群发的系统消息（可能为公告，收信人为*） 3两者都有</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.GetUserMessagesNotRead(System.Int32,System.String,System.DateTime,System.DateTime,Framework.Message.MessageCategory,System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            获得用户未读信息，分页查询
            </summary>
            <param name="userID">收件人ID</param>
            <param name="senderName">发件人，为空时表示不限定</param>
            <param name="begin">发送日期范围：开始时间</param>
            <param name="end">发送日期范围：结束日期</param>
            <param name="category"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.GetReceivedUserMessages(System.Int32,System.Int16,System.String,System.DateTime,System.DateTime,Framework.Message.MessageStatus,Framework.Message.MessageCategory,Framework.Message.MessageOrder,System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            获得用户收到的符合条件的消息
            </summary>
            <param name="userID">收件人ID</param>
            <param name="senderName">发件人，为空时表示不限定</param>
            <param name="begin">发送日期范围：开始时间</param>
            <param name="end">发送日期范围：结束日期</param>
            <param name="status"></param>
            <param name="order"></param>
            <param name="category"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <param name="isNotice">消息返回结果参数  1表示个人消息 2表示群发的系统消息（可能为公告，收信人为*） 3两者都有</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.GetReceivedUserMessagesCount(System.Int32,System.Int16,System.String,System.DateTime,System.DateTime,Framework.Message.MessageStatus,Framework.Message.MessageCategory,System.String,System.String)">
            <summary>
            获得用户收到的符合条件的消息数量
            </summary>
            <param name="userID">收件人ID</param>
            <param name="senderName">发件人，为空时表示不限定</param>
            <param name="begin">发送日期范围：开始时间</param>
            <param name="end">发送日期范围：结束日期</param>
            <param name="status"></param>
            <param name="order"></param>
            <param name="category"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <param name="isNotice">消息返回结果参数  1表示个人消息 2表示群发的系统消息（可能为公告，收信人为*） 3两者都有</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.GetUserMessagesNotRead(System.Int32,System.Int16,System.String,System.DateTime,System.DateTime,Framework.Message.MessageCategory,System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            获得用户未读信息，分页查询
            </summary>
            <param name="userID">收件人ID</param>
            <param name="senderName">发件人，为空时表示不限定</param>
            <param name="begin">发送日期范围：开始时间</param>
            <param name="end">发送日期范围：结束日期</param>
            <param name="category"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <param name="isNotice">消息返回结果参数  1表示个人消息 2表示群发的系统消息（可能为公告，收信人为*） 3两者都有</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.GetUserMessagesRelied(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            读取某条消息的回复记录
            </summary>
            <param name="userID">回复的用户ID，0表示不考虑回复的用户，只管所有的回复</param>
            <param name="messageID">消息ID</param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址信息</param>
            <returns>回复的消息集合，根据时间顺序排列</returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.GetUserMessagedReplyCount(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            针对某条消息回复的记录数
            </summary>
            <param name="userID">回复的用户ID，0表示不考虑回复的用户，只管所有的回复</param>
            <param name="messageID">消息ID</param>
            <param name="guid"></param>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.ReadUserMessage(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            阅读用户消息
            如果此信息接收人为“*”，则在发送时并没有往数据库中写接收记录，因此需要此时添加一条接收记录
            </summary>
            <param name="userID">用户ID，此处假设此消息的收件人中有该用户</param>
            <param name="messageID">消息ID</param>
            <param name="guid"></param>
            <param name="ipAddress"></param>
            <returns>-1 消息数据不正确，－2消息状态为未发送或已删除 0表示消息已经读过 其它表示消息操作成功</returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.IsUserMessageRead(System.Int32,System.Int32,System.String,System.String,Framework.Message.MessageStatus@)">
            <summary>
            是否已经阅读
            此处假设此消息的收件人中有该用户
            </summary>
            <param name="userID">用户ID，此处假设此消息的收件人中有该用户</param>
            <param name="messageID">消息ID</param>
            /// <param name="ms">此消息的最终状态</param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.GetUserMessageReaders(System.Int32,System.String,System.String)">
            <summary>
            阅读者列表
            </summary>
            <param name="messageID"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.DeleteMessageReader(System.Int32,System.String,System.String)">
            <summary>
            删除读取记录信息
            </summary>
            <param name="readMessageID"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.UpdateUserMessage(System.Int32,Framework.Message.MessageEntity,System.String,System.String)">
            <summary>
            更新用户消息
            一般不要用这个方法来更新数据，容易导致数据状态不对。
            此方法主要用于非法数据修复。
            </summary>
            <param name="userID"></param>
            <param name="me"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.GetUserMessageRead(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            读取用户阅读记录
            </summary>
            <param name="receiverID"></param>
            <param name="messageID"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.UpdateUserMessageRead(Framework.Message.MessageRead,System.String,System.String)">
            <summary>
            更新用户阅读记录
            一般不要用这个方法来更新数据，容易导致数据状态不对。
            此方法主要用于非法数据修复。
            </summary>
            <param name="mr"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.AddEmailQueue(System.Int32,Framework.Message.MessageEntity,System.String,System.String)">
            <summary>
            新增一个邮件到发送队列中
            </summary>
            <param name="settingsID"></param>
            <param name="me"></param>
            <param name="guid"></param>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.RemoveEmailQueue(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            从队列中删除一个邮件
            </summary>
            <param name="settingsID"></param>
            <param name="emailID"></param>
            <param name="guid"></param>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.UpdateEmailQueue(System.Int32,Framework.Message.MessageEntity,System.String,System.String)">
            <summary>
            更新发送队列中的邮件
            </summary>
            <param name="settingsID"></param>
            <param name="me"></param>
            <param name="guid"></param>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.GetEmailQueue(System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Boolean,System.Int32@,System.String,System.String)">
            <summary>
            获得一个发送的队列表
            </summary>
            <param name="settingsID"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="beginTime"></param>
            <param name="endTime"></param>
            <param name="minRetries"></param>
            <param name="maxRetires"></param>
            <param name="totalCount"></param>.
            <param name="justNotSend">是否只发送没有发送的邮件</param>
            <param name="guid"></param>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.GetEmailQueue(System.String,System.String,System.DateTime,System.DateTime,System.String,System.String)">
            <summary>
            获得邮件队列中的一个对像
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="beginTime"></param>
            <param name="endTime"></param>
            <param name="guid"></param>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.RemoveEmailQueue(System.Int32,System.String,System.String,System.DateTime,System.DateTime,System.String,System.String)">
            <summary>
            删除队列中的一组邮件
            </summary>
            <param name="settingsID"></param>
            <param name="from">发送人，如果为空，表明此条件不限</param>
            <param name="to">接收人，如果为空，表明此条件不限</param>
            <param name="beginTime"></param>
            <param name="endTime"></param>
            <param name="guid"></param>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.SendEmailQueue(System.Int32,Framework.Message.MessageEntity,System.String,System.String)">
            <summary>
            发送一个邮件
            </summary>
            <param name="setttingsID"></param>
            <param name="me"></param>
            <param name="guid"></param>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.SendEmailQueue(System.Int32,System.String,System.String)">
            <summary>
            发送一个邮件
            </summary>
            <param name="emailID"></param>
            <param name="guid"></param>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.GetEmailQueue(System.Int32,System.String,System.String)">
            <summary>
            获得一个邮件内容
            </summary>
            <param name="emailID"></param>
            <param name="guid"></param>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Message.IUserMessageHelper.UpdateEmailStatus(System.Int32,Framework.Message.MessageStatus,System.DateTime,System.Int32,System.DateTime)">
            <summary>
            更新发送后的状态
            </summary>
            <param name="emailID"></param>
            <param name="status"></param>
            <param name="dateSended"></param>
            <param name="numberOfTries"></param>
            <param name="dateToSend"></param>
        </member>
        <member name="M:Client.Components.UserMessageProvider.#ctor(System.String,System.String)">
            <summary>
            用户消息数据处理调用得供器初始化代码
            </summary>
            <param name="guid"></param>
            <param name="ipAddress"></param>
        </member>
        <member name="M:Client.Components.UserMessageProvider.GetProvider(System.String,System.String)">
            <summary>
            根据配置文件来获得一个对像实例。
            </summary>
            <param name="guid"></param>
            <param name="ipAddress"></param>
        </member>
        <member name="M:Client.Components.UserMessageProvider.CanSendMessageRead(Framework.Message.MessageEntity,System.String,System.Int32,System.String,System.String)">
            <summary>
            判断某个用户打开一个消息时，是否做出已经读取的标志。
            原则上必须信息已经发出，并且该用户是收件人，方可读取。
            </summary>
            <param name="msg">消息本身信息</param>
            <param name="userName">需验证权限的用户</param>
            <param name="userID">用户ID，此处传入主要是为了避免到数据库中再次查询</param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.CanMessageDelete(Framework.Message.MessageEntity,System.String,System.Int32,System.String,System.String)">
            <summary>
            消息是否可以被删除
            </summary>
            <param name="msg"></param>
            <param name="userName"></param>
            <param name="userID"></param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.CanMessageReply(Framework.Message.MessageEntity,System.String,System.Int32,System.String,System.String)">
            <summary>
            该消息是否可以被回复
            </summary>
            <param name="msg"></param>
            <param name="userName"></param>
            <param name="userID"></param>
            <param name="guid"></param>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.CreateUserMessage(System.Int32,Framework.Message.MessageEntity,System.String,System.String)">
            <summary>
            创建用户消息
            如果用户消息发送时间与创建时间差距在两分钟内，则自动发送消息。
            </summary>
            <param name="userID">用户ID，如果消息的From中有用户信息，此处可以传入－1，系统将自动根据From中的用户读取UserID</param>
            <param name="msg"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.SendUserMessage(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            发送用户消息
            </summary>
            <param name="userID">消息发送者ID</param>
            <param name="messageID">消息ID</param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.SendUserMessage(System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            发送用户消息
            如果接收者为*，在接收表中将不增加记录，在读取时才增加记录
            如果接收者为其它，则在接收表中增加记录
            </summary>
            <param name="userID">消息发送者ID</param>
            <param name="messageID">消息ID</param>
            <param name="receivers">接收者列表，此处主要是为了减少数据库查询次数</param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.ReadUserMessage(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            阅读用户消息，阅读时系统将向其中发送一条读取记录。以后可以增加读取回执的处理。
            </summary>
            <param name="userID">用户ID，此处假设此消息的收件人中有该用户</param>
            <param name="messageID">消息ID</param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.DeleteUserMessage(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            删除用户消息
            </summary>
            <param name="messageID"></param>
            <param name="operatorID">操作员ID，系统将检查该操作员的一些权限</param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.DeleteUserMessages(System.Int32,System.Int32[],System.String,System.String)">
            <summary>
            删除用户消息
            </summary>
            <param name="operatorID">操作员ID，系统将检查该操作员的一些权限</param>
            <param name="messageIDs"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.DeleteUserMessages(System.Int32,System.Collections.Generic.IList{Framework.Message.MessageEntity},System.String,System.String)">
            <summary>
            删除用户消息
            </summary>
            <param name="operatorID">操作员ID，系统将检查该操作员的一些权限</param>
            <param name="messages"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.GetUserMessageEntity(System.Int32,System.String,System.String)">
            <summary>
            获得用户消息记录
            </summary>
            <param name="messageID"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.GetUserMessages(System.Int32,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            获得用户消息，分页查询
            </summary>
            <param name="userID">发件人ID</param>
            <param name="receiverName">收件人，可以为空</param>
            <param name="begin">创建日期范围：开始时间</param>
            <param name="end">创建日期范围：结束日期</param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.GetUserMessages(System.String,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            获得用户消息，分页查询
            </summary>
            <param name="userName">发件人姓名</param>
            <param name="receiverName">收件人，可以为空值，表示不限定</param>
            <param name="begin">创建日期范围：开始时间</param>
            <param name="end">创建日期范围：结束日期</param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.GetUserMessages(System.Int32,System.String,System.DateTime,System.DateTime,Framework.Message.MessageStatus,Framework.Message.MessageCategory,Framework.Message.MessageOrder,System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            获得用户消息，分页查询
            </summary>
            <param name="userID">发件人ID</param>
            <param name="receiverName">收件人，可以为空值，表示不限定</param>
            <param name="begin">创建日期范围：开始时间</param>
            <param name="end">创建日期范围：结束日期</param>
            <param name="status"></param>
            <param name="order"></param>
            <param name="category"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.GetReceivedUserMessages(System.Int32,System.String,System.DateTime,System.DateTime,Framework.Message.MessageStatus,Framework.Message.MessageCategory,Framework.Message.MessageOrder,System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            获得用户收到的所有消息
            </summary>
            <param name="userID">收件人ID</param>
            <param name="senderName">发件人，为空时表示不限定</param>
            <param name="begin">发送日期范围：开始时间</param>
            <param name="end">发送日期范围：结束日期</param>
            <param name="status"></param>
            <param name="order"></param>
            <param name="category"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.GetReceivedUserMessagesCount(System.Int32,System.String,System.DateTime,System.DateTime,Framework.Message.MessageStatus,Framework.Message.MessageCategory,System.String,System.String)">
            <summary>
            获得用户收到的符合条件消息数量
            </summary>
            <param name="userID">收件人ID</param>
            <param name="senderName">发件人，为空时表示不限定</param>
            <param name="begin">发送日期范围：开始时间</param>
            <param name="end">发送日期范围：结束日期</param>
            <param name="status"></param>
            <param name="category"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.GetUserMessagesNotRead(System.Int32,System.String,System.DateTime,System.DateTime,Framework.Message.MessageCategory,System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            获得用户未读信息，分页查询
            </summary>
            <param name="userID">收件人ID</param>
            <param name="senderName">发件人，为空时表示不限定</param>
            <param name="begin">发送日期范围：开始时间</param>
            <param name="end">发送日期范围：结束日期</param>
            <param name="category"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.GetUserMessagesRelied(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            读取某条消息的回复记录
            </summary>
            <param name="userID">用户ID</param>
            <param name="messageID">消息ID</param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址信息</param>
            <returns>回复的消息集合，根据时间顺序排列</returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.GetUserMessagedReplyCount(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            针对某条消息回复的记录数
            </summary>
            <param name="userID"></param>
            <param name="messageID"></param>
            <param name="guid"></param>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.IsUserMessageRead(System.Int32,System.Int32,System.String,System.String,Framework.Message.MessageStatus@)">
            <summary>
            是否已经阅读
            此处假设此消息的收件人中有该用户
            </summary>
            <param name="userID">用户ID，此处假设此消息的收件人中有该用户</param>
            <param name="messageID">消息ID</param>
            /// <param name="ms">此消息的最终状态</param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.GetUserMessageReaders(System.Int32,System.String,System.String)">
            <summary>
            阅读者列表
            </summary>
            <param name="messageID"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.DeleteMessageReader(System.Int32,System.String,System.String)">
            <summary>
            删除读取记录信息
            </summary>
            <param name="readMessageID"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.UpdateUserMessage(System.Int32,Framework.Message.MessageEntity,System.String,System.String)">
            <summary>
            更新用户消息
            一般不要用这个方法来更新数据，容易导致数据状态不对。
            此方法主要用于非法数据修复。
            </summary>
            <param name="userID"></param>
            <param name="me"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.GetUserMessageRead(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            读取用户阅读记录
            </summary>
            <param name="receiverID"></param>
            <param name="messageID"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.UpdateUserMessageRead(Framework.Message.MessageRead,System.String,System.String)">
            <summary>
            更新用户阅读记录
            一般不要用这个方法来更新数据，容易导致数据状态不对。
            此方法主要用于非法数据修复。
            </summary>
            <param name="mr"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.AddEmailQueue(System.Int32,Framework.Message.MessageEntity,System.String,System.String)">
            <summary>
            保存一个Email对像到数据库的队列中
            </summary>
            <param name="settingsID"></param>
            <param name="me"></param>
            <param name="guid"></param>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.GetReceivedUserMessages(System.Int32,System.Int16,System.String,System.DateTime,System.DateTime,Framework.Message.MessageStatus,Framework.Message.MessageCategory,Framework.Message.MessageOrder,System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            获得用户收到的符合条件的消息
            </summary>
            <param name="userID">收件人ID</param>
            <param name="senderName">发件人，为空时表示不限定</param>
            <param name="begin">发送日期范围：开始时间</param>
            <param name="end">发送日期范围：结束日期</param>
            <param name="status"></param>
            <param name="order"></param>
            <param name="category"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.GetReceivedUserMessagesCount(System.Int32,System.Int16,System.String,System.DateTime,System.DateTime,Framework.Message.MessageStatus,Framework.Message.MessageCategory,System.String,System.String)">
            <summary>
            获得用户收到的符合条件的消息数量
            </summary>
            <param name="userID">收件人ID</param>
            <param name="senderName">发件人，为空时表示不限定</param>
            <param name="begin">发送日期范围：开始时间</param>
            <param name="end">发送日期范围：结束日期</param>
            <param name="status"></param>
            <param name="order"></param>
            <param name="category"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.GetUserMessagesNotRead(System.Int32,System.Int16,System.String,System.DateTime,System.DateTime,Framework.Message.MessageCategory,System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            获得用户未读信息，分页查询
            </summary>
            <param name="userID">收件人ID</param>
            <param name="senderName">发件人，为空时表示不限定</param>
            <param name="begin">发送日期范围：开始时间</param>
            <param name="end">发送日期范围：结束日期</param>
            <param name="category"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.DeleteUserMessages(System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            清空用户发送或接收的消息,只删除SiteMessage此类消息。
            </summary>
            <param name="operatorID">操作员ID，即发送或接收消息的人的ID，根据IsReceived来判断是接收还是发送的人。</param>
            <param name="isReceived">是否为接收的消息</param>
            <param name="guid"></param>
            <param name="ipAddress"></param>
            <returns>操作的数据条数</returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.DeleteUserMessages(System.Int32,System.Boolean,Framework.Message.MessageCategory,System.String,System.String)">
            <summary>
            清空用户发送或接收的消息，可以删除指定类别的消息
            </summary>
            <param name="operatorID">操作员ID，即发送或接收消息的人的ID，根据IsReceived来判断是接收还是发送的人。</param>
            <param name="isReceived">是否为接收的消息</param>
            <param name="category">在系统内部的消息分类</param>
            <param name="guid"></param>
            <param name="ipAddress"></param>
            <returns>操作的数据条数</returns>
        </member>
        <member name="M:Client.Components.UserMessageProvider.UpdateEmailStatus(System.Int32,Framework.Message.MessageStatus,System.DateTime,System.Int32,System.DateTime)">
            <summary>
            更新邮件状态，包括失败与成功两种
            </summary>
            <param name="emailID"></param>
            <param name="status"></param>
            <param name="dateSended"></param>
            <param name="numberOfTries"></param>
            <param name="dateToSend"></param>
        </member>
        <member name="T:Client.Components.SiteProvider">
            <summary>
            站点管理的远程代理
            </summary>
        </member>
        <member name="T:Framework.Server.SearchCaseDataProvider">
            <summary>
            搜索方案的数据提供器
            提供搜索方案的查询检查及修改。
            </summary>
            <remarks>  The data provider class must inherit the SearchCaseDataProvider
            interface.</remarks>
        </member>
        <member name="M:Framework.Server.SearchCaseDataProvider.Instance">
            <summary>
            Returns an instance of the user-specified data provider class.
            </summary>
            <returns>An instance of the user-specified data provider class.  This class must inherit the
            CommonDataProvider interface.</returns>
        </member>
        <member name="M:Framework.Server.SearchCaseDataProvider.CreateDefaultProvider">
            <summary>
            Creates the Default CommonDataProvider
            </summary>
        </member>
        <member name="M:Framework.Server.SearchCaseDataProvider.GetSearchCases(System.String,System.Int32)">
            <summary>
            获得所有指定范围的Ｃａｓｅ
            </summary>
            <param name="queryName">查询列表的名称或者文件名（当Ｃａｓｅ保存为ＸＭＬ时）</param>
            <param name="operatorID">操作员，小于０表示不限</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.SearchCaseDataProvider.GetFilterCase(System.String,System.Int32,System.Int32)">
            <summary>
            获得某个Ｃａｓｅ
            </summary>
            <param name="caseID"></param>
            <param name="queryName">查询列表的名称或者文件名（当Ｃａｓｅ保存为ＸＭＬ时）</param> 
            <param name="operatorID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.SearchCaseDataProvider.GetFilterCase(System.String,System.String,System.Int32)">
            <summary>
            获得某个Ｃａｓｅ
            </summary>
            <param name="caseName"></param>
            <param name="queryName">查询列表的名称或者文件名（当Ｃａｓｅ保存为ＸＭＬ时）</param>
            <param name="operatorID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.SearchCaseDataProvider.AddSearchCase(System.String,Framework.Search.SearchCase,System.Int32)">
            <summary>
            添加一个Ｃａｓｅ
            </summary>
            <param name="searchCase"></param>
            <param name="queryName">查询列表的名称或者文件名（当Ｃａｓｅ保存为ＸＭＬ时）</param>
            <param name="operatorID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.SearchCaseDataProvider.DeleteSearchCase(System.String,Framework.Search.SearchCase,System.Int32)">
            <summary>
            删除Ｃａｓｅ
            </summary>
            <param name="searchCase"></param>
            <param name="operatorID"></param>
            <param name="queryName"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Server.SearchCaseDataProvider.UpdateSearchCase(System.String,System.Int32,Framework.Search.SearchCase,System.Int32)">
            <summary>
            修改Ｃａｓｅ
            </summary>
            <param name="caseID"></param>
            <param name="queryName">查询列表的名称或者文件名（当Ｃａｓｅ保存为ＸＭＬ时）</param>
            <param name="searchCase"></param>
            <param name="operatorID"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Search.FilterAttribute">
            <summary>
            可以使用到标准过滤组件中的属性
            此属性向过滤组件提供对应的表名、字段及相关的其它属性
            过滤组件包括简单和复合型条件组合控件
            </summary>
        </member>
        <member name="M:Framework.Search.FilterAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Framework.Search.FilterAttribute.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="l_canFilter"></param>
        </member>
        <member name="M:Framework.Search.FilterAttribute.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="l_tableName"></param>
            <param name="l_fieldName"></param>
        </member>
        <member name="P:Framework.Search.FilterAttribute.Capital">
            <summary>
            显示标题
            </summary>
        </member>
        <member name="P:Framework.Search.FilterAttribute.CanFilter">
            <summary>
            是否在过滤组件中显示
            </summary>
        </member>
        <member name="P:Framework.Search.FilterAttribute.TableName">
            <summary>
            对应的数据库表名，如不指定，默认为a
            </summary>
        </member>
        <member name="P:Framework.Search.FilterAttribute.FieldName">
            <summary>
            对应数据库中的字段名，如果为空，则认为此字段不能在过滤组件中显示
            </summary>
        </member>
        <member name="P:Framework.Search.FilterAttribute.ItemsSyntax">
            <summary>
            如果需要列表选择对应的过滤条件值，则填写此值。
            </summary>
        </member>
        <member name="T:Framework.Message.MessageTemplateType">
            <summary>
            消息模板类型
            </summary>
        </member>
        <member name="F:Framework.Message.MessageTemplateType.Default">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:Framework.Message.MessageTemplateType.NewUserAccountCreated">
            <summary>
            注册回复邮件
            </summary>
        </member>
        <member name="F:Framework.Message.MessageTemplateType.NewUserAccountPending">
            <summary>
            未核准的用户账号
            </summary>
        </member>
        <member name="F:Framework.Message.MessageTemplateType.NewUserAccountApproved">
            <summary>
            核准的用户账号
            </summary>
        </member>
        <member name="F:Framework.Message.MessageTemplateType.NewUserAccountRejected">
            <summary>
            被拒绝的用户账号
            </summary>
        </member>
        <member name="F:Framework.Message.MessageTemplateType.ChangedPassword">
            <summary>
            修改密码
            </summary>
        </member>
        <member name="F:Framework.Message.MessageTemplateType.ForgottenPassword">
            <summary>
            找回密码
            </summary>
        </member>
        <member name="F:Framework.Message.MessageTemplateType.ForgottenPasswordNew">
            <summary>
            忘记密码new
            发送重设密码的邮件
            </summary>
        </member>
        <member name="F:Framework.Message.MessageTemplateType.ForgottenPasswordWithToken">
            <summary>
            忘记密码
            </summary>
        </member>
        <member name="F:Framework.Message.MessageTemplateType.NewMessagePostedToThread">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.Message.MessageTemplateType.Anounce">
            <summary>
            公告
            </summary>
        </member>
        <member name="F:Framework.Message.MessageTemplateType.ContactForm">
            <summary>
            联系方式
            </summary>
        </member>
        <member name="F:Framework.Message.MessageTemplateType.UserInvitation">
            <summary>
            用户邀请
            </summary>
        </member>
        <member name="F:Framework.Message.MessageTemplateType.SendEmail">
            <summary>
            发送邮件
            </summary>
        </member>
        <member name="F:Framework.Message.MessageTemplateType.ActiveUser">
            <summary>
            用户激活邮件
            </summary>
        </member>
        <member name="F:Framework.Message.MessageTemplateType.Welcome">
            <summary>
            用户注册欢迎邮件
            </summary>
        </member>
        <member name="F:Framework.Message.MessageTemplateType.ValidEmail">
            <summary>
            验证邮箱
            </summary>
        </member>
        <member name="F:Framework.Message.MessageTemplateType.BookingLog">
            <summary>
            订单日志
            </summary>
        </member>
        <member name="F:Framework.Message.MessageTemplateType.DiscountEmail">
            <summary>
            降价信息
            </summary>
        </member>
        <member name="F:Framework.Message.MessageTemplateType.GoodsArriveEmail">
            <summary>
            到货信息
            </summary>
        </member>
        <member name="F:Framework.Message.MessageTemplateType.PromotionEmail">
            <summary>
            促销信息
            </summary>
        </member>
        <member name="T:Framework.Components.Globals">
            <summary>
            全局公共方法类
            </summary>
        </member>
        <member name="F:Framework.Components.Globals.HtmlNewLine">
            <summary>
            Html换行标签<br />
            </summary>
        </member>
        <member name="F:Framework.Components.Globals._pathComponentTextToEscape">
             <summary>
            将路径中匹配的字符转化成转义形式的元字符
             </summary>
        </member>
        <member name="F:Framework.Components.Globals._pathComponentTextToUnescape">
            <summary>
            将路径中匹配的字符转化成非转义形式的字符
            </summary>
        </member>
        <member name="F:Framework.Components.Globals._fileComponentTextToEscape">
            <summary>
            将文件中匹配的字符转化成转义形式的元字符
            </summary>
        </member>
        <member name="F:Framework.Components.Globals._fileComponentTextToUnescape">
            <summary>
            将文件中匹配的字符转化成非转义形式的字符
            </summary>
        </member>
        <member name="M:Framework.Components.Globals.IsNullorEmpty(System.String)">
            <summary>
            检查是否字符串为空
            </summary>
            <param name="stringToTest"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Globals.GetIds(System.Collections.Generic.List{System.Int32},System.Int32,System.Int32)">
            <summary>
            获得ID
            </summary>
            <param name="allIds">所有的ID</param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Globals.IsNull(System.DateTime)">
            <summary>
            检查是期是否为NULL值
            </summary>
            <param name="currentTime"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Globals.IsNull(System.String)">
            <summary>
            检查字符串是否为空值
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Globals.HtmlDecode(System.String)">
            <summary>
            Converts a prepared subject line back into a raw text subject line.
            </summary>
            <param name="textToFormat">The prepared subject line.</param>
            <returns>A raw text subject line.</returns>
            <remarks>This function is only needed when editing an existing message or when replying to
            a message - it turns the HTML escaped characters back into their pre-escaped status.</remarks>
        </member>
        <member name="M:Framework.Components.Globals.HtmlEncode(System.String)">
            <summary>
            Converts a prepared subject line back into a raw text subject line.
            </summary>
            <param name="textToFormat">The prepared subject line.</param>
            <returns>A raw text subject line.</returns>
            <remarks>This function is only needed when editing an existing message or when replying to
            a message - it turns the HTML escaped characters back into their pre-escaped status.</remarks>
        </member>
        <member name="M:Framework.Components.Globals.UrlEncode(System.String)">
             <summary>
            url编码
             </summary>
             <param name="urlToEncode"></param>
             <returns></returns>
        </member>
        <member name="M:Framework.Components.Globals.UrlDecode(System.String)">
            <summary>
            url解码
            </summary>
            <param name="urlToDecode"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Globals.UrlEncodePathComponent(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Globals.UrlDecodePathComponent(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Globals.UrlEncodeFileComponent(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Globals.UrlDecodeFileComponent(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Globals.UrlEncode(System.String,System.Text.RegularExpressions.Regex,System.Char,System.Char)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="pattern"></param>
            <param name="spaceReplacement"></param>
            <param name="escapePrefix"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Globals.UrlDecode(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Globals.MapPath(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Globals.PhysicalPath(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Globals.CalculateLocation(System.String)">
            <summary>
            计算物理路径
            </summary>
        </member>
        <member name="M:Framework.Components.Globals.RootPath">
            <summary>
            根目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Globals.GetClientPCInfo(System.String)">
            <summary>
            获取客户端PC信息
            </summary>
            <param name="mcPath">功能参数</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Globals.HostPath(System.Uri)">
            <summary>
            主机地址
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Globals.FullPath(System.String)">
            <summary>
            完整路径
            </summary>
            <param name="local"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Globals.FullPath(System.String,System.String)">
            <summary>
            完整路径
            </summary>
            <param name="hostPath"></param>
            <param name="local"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Globals.AppendQuerystring(System.String,System.String)">
            <summary>
            Adds a string to the current url determining the correct seperator character
            </summary>
            <param name="url"></param>
            <param name="querystring"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Globals.AppendQuerystring(System.String,System.String,System.Boolean)">
            <summary>
            添加参数
            </summary>
            <param name="url"></param>
            <param name="querystring"></param>
            <param name="urlEncoded"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Globals.ValidateApplicationKey(System.String,System.String@)">
            <summary>
            验证程序ＫＥｙ
            </summary>
            <param name="appKey"></param>
            <param name="formattedKey"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Globals.Return404(System.Web.HttpContext)">
            <summary>
            返回４０４错误
            </summary>
            <param name="Context"></param>
        </member>
        <member name="M:Framework.Components.Globals.JoinIntArray(System.String,System.Int32[])">
            <summary>
            将整数数组整合成一个字符串
            </summary>
            <param name="separator">分隔符</param>
            <param name="intArray"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Globals.GetCheckBoxStatus(System.Object)">
            <summary>
            返回复选框状态
            </summary>
            <param name="isChecked"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Globals.GetTarget(System.Object)">
            <summary>
            指定URL的Target
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Globals.GenerateRandomString(System.Int32,System.Boolean)">
            <summary>
            随机生成数字或字母字符串
            </summary>
            <param name="length">字符串长度</param>
            <param name="numberOnly">生成数字串</param>
            <returns>生成的随机字符串</returns>
        </member>
        <member name="M:Framework.Components.Globals.GetDiffArray``1(``0[],``0[])">
            <summary>
            返回两个数组不同成员部分
            以第一个数组为参考返回不相同成员
            </summary>
            <typeparam name="T">数组成员类型</typeparam>
            <param name="array1">数组1</param>
            <param name="array2">数组2</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Globals.GetDiffArray``1(``0[],``0[],System.Boolean)">
            <summary>
            返回两个数组不同成员部分
            </summary>
            <typeparam name="T">数组成员类型</typeparam>
            <param name="array1">数组1</param>
            <param name="array2">数组2</param>
            <param name="allDiff">true返回全部不相同的成员,false则以第一个数组为参考返回不相同成员</param>
            <returns></returns>
        </member>
        <member name="P:Framework.Components.Globals.Language">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.Globals.ApplicationPath">
            <summary>
            应用程序路径
            </summary>
        </member>
        <member name="P:Framework.Components.Globals.MacAddress">
            <summary>
            获取网卡MAC地址
            </summary>
        </member>
        <member name="P:Framework.Components.Globals.FullUserIP">
            <summary>
            获得用户所有的IP构成
            </summary>
        </member>
        <member name="P:Framework.Components.Globals.IPAddress">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="P:Framework.Components.Globals.SysUserName">
            <summary>
            获取操作系统登陆名
            </summary>
        </member>
        <member name="P:Framework.Components.Globals.SystemType">
            <summary>
            获取PC类型
            </summary>
        </member>
        <member name="P:Framework.Components.Globals.TotalPhysicalMemory">
            <summary>
            获取物理内存
            </summary>
        </member>
        <member name="P:Framework.Components.Globals.NoImageUrl">
            <summary>
            没有图片地址
            </summary>
        </member>
        <member name="P:Framework.Components.Globals.ImageErrorUrl">
            <summary>
            图形错误地址
            </summary>
        </member>
        <member name="P:Framework.Components.Globals.AnonymouseUserName">
            <summary>
            匿名用户
            </summary>
        </member>
        <member name="T:Framework.Events.EventType">
            <summary>
            事件类型
            </summary>
        </member>
        <member name="F:Framework.Events.EventType.Instance">
            <summary>
            即时发生的
            </summary>
        </member>
        <member name="F:Framework.Events.EventType.Plan">
            <summary>
            计划将来需要发生的
            </summary>
        </member>
        <member name="T:Framework.Components.StringFormatter">
            <summary>
            常规的字符串格式化
            </summary>
        </member>
        <member name="M:Framework.Components.StringFormatter.StripHtml(System.String)">
            <summary>
            去除Html标签
            </summary>
            <param name="text">待转化的字符串</param>
            <returns>经过转化的字符串</returns>
        </member>
        <member name="M:Framework.Components.StringFormatter.StripAllTags(System.String)">
            <summary>
            去除html标签和客户端脚本代码
            </summary>
            <param name="text">待转化的字符串</param>
            <returns>经过转化的字符串</returns>
        </member>
        <member name="M:Framework.Components.StringFormatter.StripScript(System.String)">
            <summary>
            去除客户端脚本代码
            </summary>
            <param name="text">待转化的字符串</param>
            <returns>经过转化的字符串</returns>
        </member>
        <member name="M:Framework.Components.StringFormatter.StripStyle(System.String)">
            <summary>
            去除CSS样式代码
            </summary>
            <param name="text">待转化的字符串</param>
            <returns>经过转化的字符串</returns>
        </member>
        <member name="M:Framework.Components.StringFormatter.IsHtmlSpace(System.String,System.String)">
            <summary>
            是否是空格
            作者：陈荣强  时间：2006-3-6
            </summary>
            <param name="source">需要填充空格的字符串</param>
            <param name="target">填充空格字符</param>
        </member>
        <member name="M:Framework.Components.StringFormatter.OutHighlightText(System.String,System.String,System.String)">
            <summary>
            高亮显示代码
            </summary>
            <param name="str"></param>
            <param name="findstr"></param>
            <param name="cssclass"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.StringFormatter.FillSpace(System.String,System.Int32)">
            <summary>
            字符串填充空格．返回字符串
            作者：陈荣强  时间：2003-10-23
            </summary>
            <param name="source">需要填充空格的字符串</param>
            <param name="length">填充空格个数</param>
        </member>
        <member name="M:Framework.Components.StringFormatter.Substring(System.String,System.Int32,System.Int32)">
            <summary>
            取字符串的指定位置子串．返回剩余部分的字符串
            作者：陈荣强  时间：2003-10-23
            </summary>
            <param name="source">源字符串</param>
            <param name="start">起始位置，0开始记数</param>
            <param name="length">子串长度</param>
        </member>
        <member name="M:Framework.Components.StringFormatter.Substring(System.String,System.Int32)">
            <summary>
            取字符串的指定位置子串．返回剩余部分的字符串
            作者：陈荣强  时间：2003-10-23
            </summary>
            <param name="source">源字符串</param>
            <param name="start">起始位置，0开始记数</param>
        </member>
        <member name="M:Framework.Components.StringFormatter.SplitString(System.String@,System.String)">
            <summary>
            将字符串Source从Separator处分割开,令Source=Separator后的字符,返回Seperator前的字符
            作者：陈荣强  时间：2004-04-01
            </summary>
            <param name="strSource">传入的原始字符串</param>
            <param name="strSeparator">字符串分隔标记</param>
        </member>
        <member name="M:Framework.Components.StringFormatter.AddWhere(System.String,System.String)">
            <summary>
            用于在sql语句中加入新的WHERE条件.返回新的sql
            作者：陈荣强  时间：2003-10-31
            </summary>
            <param name="strSelect">原始Sql select字符串</param>
            <param name="strWhere">新增加的条件字符串</param>
        </member>
        <member name="M:Framework.Components.StringFormatter.Date2String(System.DateTime)">
            <summary>
            把日期转换成YYYY-MM-DD字符串
            作者：陈荣强  时间：2003-11-06
            </summary>
            <param name="dt">需要转换的日期</param>
        </member>
        <member name="M:Framework.Components.StringFormatter.DateTime2String(System.DateTime)">
            <summary>
            把日期时间转换成YYYY-MM-DD hh:mm:ss字符串
            作者：陈荣强  时间：2004-03-15
            </summary>
            <param name="dt">需要转换的日期时间</param>
        </member>
        <member name="M:Framework.Components.StringFormatter.ReverseOrder(System.String)">
            <summary>
            把order字符串反转排序
            作者：陈荣强  时间：2005-07-16
            </summary>
            <param name="order">排序字符串</param>
        </member>
        <member name="M:Framework.Components.StringFormatter.ConvertToString(System.Collections.ArrayList,System.String)">
            <summary>
            把IList转换成字符串
            作者：陈荣强  时间：2005-07-17
            </summary>
            <param name="list">IList</param>
            <param name="strSeparator">字符串分隔标记</param>
            <returns>string</returns>
        </member>
        <member name="M:Framework.Components.StringFormatter.ConvertToString(System.String[],System.String)">
            <summary>
            把字符串数组转换成字符串
            作者：陈荣强  时间：2005-07-17
            </summary>
            <param name="list">字符串数组</param>
            <param name="strSeparator">字符串分隔标记</param>
            <returns>string</returns>
        </member>
        <member name="M:Framework.Components.StringFormatter.ConvertToStringArray(System.String,System.String)">
            <summary>
            把字符串转换成字符串数组
            作者：陈荣强  时间：2005-07-17
            </summary>
            <param name="source">源字符串</param>
            <param name="strSeparator">字符串分隔标记</param>
            <returns>string</returns>
        </member>
        <member name="M:Framework.Components.StringFormatter.GetOrder(System.String,System.String@)">
            <summary>
            用于在sql语句中得到Order(只支持表连接，不支持嵌套)
            作者：陈荣强  时间：2006-05-25
            </summary>
            <param name="strSelect">原始Sql select字符串</param>
            <param name="newSelect">新的select字符串</param>
        </member>
        <member name="M:Framework.Components.StringFormatter.GetSelectAfter(System.String)">
            <summary>
            用于在sql语句中得到Select后面的部分(只支持表连接，不支持嵌套)
            作者：陈荣强  时间：2006-05-25
            </summary>
            <param name="strSelect">原始Sql select字符串</param>
        </member>
        <member name="M:Framework.Components.StringFormatter.ConvertSelect2Count(System.String)">
            <summary>
            把sql语句中取列名替换成count(*) (只支持表连接，不支持嵌套)
            作者：陈荣强  时间：2006-05-25
            </summary>
            <param name="strSelect">原始Sql select字符串</param>
        </member>
        <member name="M:Framework.Components.StringFormatter.CleanupPath(System.String)">
            <summary>
            Ensures that there is a '/' at the end of a path string.
            </summary>
            <param name="path">The path name to cleanup.</param>
            <returns>The cleaned up path name.</returns>
        </member>
        <member name="M:Framework.Components.StringFormatter.ResolveUrl(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Generates the correctly formatted url
            </summary>
            <remarks>
            </remarks>
            <param name="url">The url to format.</param>
            <returns>The formatted (resolved) url</returns>
            <history>
            	[cnurse]	12/16/2004	documented
            </history>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:Framework.Enumerations.BaseDataStatus">
            <summary>
            DataStatus 的摘要说明。
            </summary>
        </member>
        <member name="T:Framework.Enumerations.DataStatus">
            <summary>
            数据的状态
            </summary>
        </member>
        <member name="F:Framework.Enumerations.DataStatus.Deleted">
            <summary>
            已删除
            </summary>
        </member>
        <member name="F:Framework.Enumerations.DataStatus.Edit">
            <summary>
            修改中
            </summary>
        </member>
        <member name="F:Framework.Enumerations.DataStatus.Issue">
            <summary>
            已发布或已审核
            </summary>
        </member>
        <member name="F:Framework.Enumerations.DataStatus.IssueFailure">
            <summary>
            审核不通过
            </summary>
        </member>
        <member name="T:Client.Components.ClientExceptionProvider">
            <summary>
            本地异常处理类
            一般情况下，系统将异常信息存储在数据库中
            当数据库写入不成功，将先写入文件，如果再不成功，写入本地Windows日志。
            </summary>
        </member>
        <member name="M:Client.Components.ClientExceptionProvider.#ctor">
            <summary>
            构造函数
            创建远程对像时极可能出错，当出错时，系统将错误写入日志，并偿试不同的方式，找到一种可行的方案。
            最后的方案是写入Windws日志
            </summary>
        </member>
        <member name="M:Client.Components.ClientExceptionProvider.LogExceptionToEvent(System.Int32,System.String)">
            <summary>
            将错误日志写入到Windows日志中
            静态方法
            </summary>
            <param name="settingsID"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.ClientExceptionProvider.LogExceptionToWindowsEvent(System.Int32,System.String,System.String,System.String)">
            <summary>
            将错误日志写入到Windows日志中
            </summary>
            <param name="settingsID"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.ClientExceptionProvider.LogExceptionToWindowsEvent(System.Int32,Framework.Components.SFException,System.String,System.String)">
            <summary>
            将错误日志写入到Windows日志中
            </summary>
            <param name="settingsID"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.ClientExceptionProvider.LogException(System.Int32,Framework.Components.SFException,System.String,System.String)">
            <summary>
            记录异常日志
            如果在错误日志记录时系统出错，将不能通过常规方法来处理，需要直接定入到文本文件中。如果文本文件无法写入，则直接中止操作，以避免系统崩溃。
            </summary>
            <param name="ex">异常</param>
        </member>
        <member name="M:Client.Components.ClientExceptionProvider.LogException(System.Int32,System.Exception,System.String,System.String)">
            <summary>
            记录异常日志
            如果在错误日志记录时系统出错，将不能通过常规方法来处理，需要直接定入到文本文件中。如果文本文件无法写入，则直接中止操作，以避免系统崩溃。
            </summary>
            <param name="ex">异常</param>
        </member>
        <member name="M:Client.Components.ClientExceptionProvider.GetExceptions(System.Int32,System.Int32,System.String,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            获得指定的异常信息列表
            </summary>
            <param name="exceptionType"></param>
            <param name="minFrequency"></param>
            <param name="sortOrder"></param>
            <param name="includeUnknown"></param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.ClientExceptionProvider.GetExceptionEntities(System.Int32,System.Int32,System.String,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            获得指定的异常信息列表
            </summary>
            <param name="exceptionType"></param>
            <param name="minFrequency"></param>
            <param name="sortOrder"></param>
            <param name="includeUnknown"></param>
            <returns></returns>
        </member>
        <member name="M:Client.Components.ClientExceptionProvider.DeleteExceptions(System.Int32,System.Collections.Generic.IList{Framework.Components.SFException},System.String,System.String)">
            <summary>
            删除指定的异常信息
            </summary>
            <param name="settingsID"></param>
            <param name="deleteList"></param>
        </member>
        <member name="M:Client.Components.ClientExceptionProvider.DeleteException(System.Int32,System.String,System.String)">
            <summary>
            删除指定的异常信息
            </summary>
            <param name="exceptionID"></param>
        </member>
        <member name="T:Client.Message.ClientMessageHandler">
            <summary>
            消息处理者
            </summary>
        </member>
        <member name="M:Client.Message.ClientMessageHandler.Send(Framework.Message.MessageEntity)">
            <summary>
            发送消息
            </summary>
            <param name="msg">消息实体</param>
        </member>
        <member name="T:Framework.Securities.RightGrantType">
            <summary>
            权限的授与与拒绝
            </summary>
        </member>
        <member name="F:Framework.Securities.RightGrantType.All">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:Framework.Securities.RightGrantType.Deny">
            <summary>
            拒绝
            </summary>
        </member>
        <member name="F:Framework.Securities.RightGrantType.Allow">
            <summary>
            授与
            </summary>
        </member>
        <member name="T:Framework.Search.FilterJoinType">
            <summary>
            条件联接类型
            并且，或者
            </summary>
        </member>
        <member name="F:Framework.Search.FilterJoinType.And">
            <summary>
            并且
            </summary>
        </member>
        <member name="F:Framework.Search.FilterJoinType.Or">
            <summary>
            或者
            </summary>
        </member>
        <member name="T:Framework.Search.FilterItemTree">
            <summary>
            描述复合的树状的条件结构
            与简单的一个表达式一样的结构对应
                                       O
                                      / \
                                     T   I
                                  / / \
                                 T  I   I
                                / \
                               I   I
            I：表示简单结构的数据
            T：表示复杂结构的数据，T没有具体的表达式，只记录一下关键的，就是多个下属的I或T之之间的关系（AND或OR）
            </summary>
        </member>
        <member name="F:Framework.Search.FilterItemTree.parent">
            <summary>
            双亲字段
            </summary>
        </member>
        <member name="F:Framework.Search.FilterItemTree.items">
            <summary>
            过滤项字段　
            </summary>
        </member>
        <member name="F:Framework.Search.FilterItemTree.treeItems">
            <summary>
            树字段
            </summary>
        </member>
        <member name="F:Framework.Search.FilterItemTree.joinType">
            <summary>
            条件联接类型字段
            </summary>
        </member>
        <member name="P:Framework.Search.FilterItemTree.JoinType">
            <summary>
            联接方式 AND OR OR
            </summary>
        </member>
        <member name="P:Framework.Search.FilterItemTree.TreeItems">
            <summary>
            下级包括两种数据：FilterItems及FilterTreeItems
            这里指下级是一个复合的树状结构
            </summary>
        </member>
        <member name="P:Framework.Search.FilterItemTree.TreeItemsCount">
            <summary>
            复合结构的对像数量
            </summary>
        </member>
        <member name="P:Framework.Search.FilterItemTree.Parent">
            <summary>
            指向上级的指针
            </summary>
        </member>
        <member name="P:Framework.Search.FilterItemTree.Items">
            <summary>
            下级包括两种数据：FilterItems及FilterTreeItems
            这里指节点是具体的一个过滤表达式
            </summary>
        </member>
        <member name="P:Framework.Search.FilterItemTree.FilterItemsCount">
            <summary>
            简单结构的数据的数量
            </summary>
        </member>
        <member name="T:Framework.Message.MessageStorage">
            <summary>
            消息存储位置
            </summary>
        </member>
        <member name="F:Framework.Message.MessageStorage.TextFile">
            <summary>
            文本文件
            </summary>
        </member>
        <member name="F:Framework.Message.MessageStorage.Database">
            <summary>
            数据库
            </summary>
        </member>
        <member name="F:Framework.Message.MessageStorage.Email">
            <summary>
            电子邮件
            </summary>
        </member>
        <member name="F:Framework.Message.MessageStorage.MSMQ">
            <summary>
            消息队列
            </summary>
        </member>
        <member name="F:Framework.Message.MessageStorage.XML">
            <summary>
            XML文件
            </summary>
        </member>
        <member name="F:Framework.Message.MessageStorage.EventLog">
            <summary>
            事件日志
            </summary>
        </member>
        <member name="T:Framework.Enumerations.ObjectState">
            <summary>
            对像状态
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectState.Create">
            <summary>
            创建
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectState.Update">
            <summary>
            更新
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectState.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectState.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Framework.Enumerations.ObjectState.Runtime">
            <summary>
            运行
            </summary>
        </member>
        <member name="T:Framework.Enumerations.DataProviderAction">
            <summary>
            对数据库中某个单条记录的操作
            </summary>
        </member>
        <member name="F:Framework.Enumerations.DataProviderAction.Create">
            <summary>
            创建或添加新记录
            </summary>
        </member>
        <member name="F:Framework.Enumerations.DataProviderAction.Update">
            <summary>
            更新记录
            </summary>
        </member>
        <member name="F:Framework.Enumerations.DataProviderAction.Delete">
            <summary>
            删除记录
            </summary>
        </member>
        <member name="F:Framework.Enumerations.DataProviderAction.NotSet">
            <summary>
            未设
            </summary>
        </member>
        <member name="T:Framework.Configuration.SkinConfiguration">
            <summary>
            皮肤配置文件.
            </summary>
        </member>
        <member name="M:Framework.Configuration.SkinConfiguration.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Framework.Configuration.SkinConfiguration.SkinName">
            <summary>
            皮肤名称
            </summary>
        </member>
        <member name="P:Framework.Configuration.SkinConfiguration.SkinCssFile">
            <summary>
            皮肤的ＣＳＳ文件
            </summary>
        </member>
        <member name="P:Framework.Configuration.SkinConfiguration.SkinCssText">
            <summary>
            ＣＳＳ文件内容
            </summary>
        </member>
        <member name="P:Framework.Configuration.SkinConfiguration.HasSecondaryFile">
            <summary>
            是否有第二个ＣＳＳ文件
            </summary>
        </member>
        <member name="P:Framework.Configuration.SkinConfiguration.HasSecondaryText">
            <summary>
            第二个ＣＳＳ文件内容
            </summary>
        </member>
        <member name="P:Framework.Configuration.SkinConfiguration.SkinID">
            <summary>
            皮肤ＩＤ
            </summary>
        </member>
        <member name="T:Framework.Components.UserInfo">
            <summary>
            用户信息
            </summary>
        </member>
        <member name="M:Framework.Components.UserInfo.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Framework.Components.UserInfo.userID">
            <summary>
            用户ＩＤ，整型
            </summary>
        </member>
        <member name="M:Framework.Components.UserInfo.ToString">
            <summary>
            ＴｏＳｔｒｉｎｇ
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.UserInfo.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Framework.Components.UserInfo.FullInformation">
            <summary>
            是否将所有的用户信息都加载了。有时候，需要快速处理时，只加载用户的基本信息，因此在更新时要注意。
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.PublicToken">
            <summary>
            公开令牌
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.UserID">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.Signature">
            <summary>
            用户签名
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.Blog">
            <summary>
            博客地址
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.IsAnonymous">
            <summary>
            是否匿名用户
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.UserStatus">
            <summary>
            用户可用否，是否被锁定等信息
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.UserType">
            <summary>
            用户分类
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.CreateDate">
            <summary>
            创建日期
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.LastLoginDate">
            <summary>
            最后登录日期
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.LastActivityDate">
            <summary>
            最后活动日期
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.LastLoginIP">
            <summary>
            最后登录IP
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.LoginTimes">
            <summary>
            登录次数
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.SearchField">
            <summary>
            检索辅助字段
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.UserLevel">
            <summary>
            用户等级
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.UserPoint">
            <summary>
            用户积分
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.Source">
            <summary>
            用户来源
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.F1">
            <summary>
            F1 已经被用作用户来源类型
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.RegionID">
            <summary>
            用户的地区
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.F2">
            <summary>
            F2，现已经作为用户的地区属性
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.F3">
            <summary>
            F3
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.F4">
            <summary>
            F4
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.NickName">
            <summary>
            昵称
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.Birthday">
            <summary>
            生日
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.Sex">
            <summary>
            性别
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.PasswordHash">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.PasswordSalt">
            <summary>
            密码加密密钥
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.PasswordFormat">
            <summary>
            密码格式
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.Email">
            <summary>
            电子邮件
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.IsPublished">
            <summary>
            邮箱是否公开
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.PasswordQuestion">
            <summary>
            密码安全问题
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.PasswordAnswer">
            <summary>
            密码安全答案
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.LastChangePwdDate">
            <summary>
            最后修改密码日期
            </summary>
        </member>
        <!-- 对于成员“P:Framework.Components.UserInfo.IsBanned”忽略有格式错误的 XML 注释 -->
        <member name="P:Framework.Components.UserInfo.BannedUntil">
            <summary>
            Specifies the date until the user account is banned.
            It makes sense only when UserAccountStatus is set on 2.
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.Comment">
            <summary>
            自定义信息
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.Password">
            <summary>
            明文密码
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.TrueName">
            <summary>
            真实姓名
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.PersonID">
            <summary>
            简历ID
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.Province">
            <summary>
            省份
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.QQ">
            <summary>
            QQ
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.Sign">
            <summary>
            签名
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.Avoirdupois">
            <summary>
            体重
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.Mobile">
            <summary>
            Mobile
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.SP_PassID">
            <summary>
            PassID
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.UserTypeName">
            <summary>
            用户字串，用于与通行证使用。
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.HeadPortrait">
            <summary>
            头像
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.IP">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.MSN">
            <summary>
            MSN
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.ThemeName">
            <summary>
            用户皮肤
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.HtmlEditorType">
            <summary>
            用户文本编辑器类型
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.Address">
            <summary>
            地址
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.Language">
            <summary>
            用户语种
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.Postcode">
            <summary>
            PostCode
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.Phone">
            <summary>
            电话
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.CardNo">
            <summary>
            CardNo
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.CardType">
            <summary>
            CardType
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.City">
            <summary>
            所有城市
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.Constellation">
            <summary>
            星座
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.GloryCase">
            <summary>
            GloryCase
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.Hobby">
            <summary>
            爱好
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.Home">
            <summary>
            个人主页
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.LikeColor">
            <summary>
            LikeColor
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.LikeSinger">
            <summary>
            喜欢歌手
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.LoginPortalID">
            <summary>
            登录的站点
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.WantCount">
            <summary>
            想去
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.TravelCount">
            <summary>
            去过
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.LastTripID">
            <summary>
            最后行程ID
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.LastTripDesc">
            <summary>
            最后行程的描述，不保存在数据库中，仅查询
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.Children">
            <summary>
            该用户的下属
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.BirdName">
            <summary>
            鸟群名
            </summary>
        </member>
        <member name="P:Framework.Components.UserInfo.ApiRemarkJson">
            <summary>
            接口数据备注(json格式)
            </summary>
        </member>
        <member name="T:Framework.Enumerations.TemplateType">
            <summary>
            模板类型
            </summary>
        </member>
        <member name="F:Framework.Enumerations.TemplateType.GroupMusicAdminApply">
            <summary>
            音乐圈管理员申请
            </summary>
        </member>
        <member name="F:Framework.Enumerations.TemplateType.Email">
            <summary>
            邮件
            </summary>
        </member>
        <member name="T:Framework.Enumerations.CategoryType">
            <summary>
            存储在分类表中的类型
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CategoryType.Region">
            <summary>
            地区类型
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CategoryType.Industry">
            <summary>
            行业类型
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CategoryType.CompanyType">
            <summary>
            公司类型
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CategoryType.WorkLogType">
            <summary>
            用户小记类型
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CategoryType.WorkScheduleType">
            <summary>
            工作日程类型
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CategoryType.UserCustomerCategory">
            <summary>
            用户自定义的客户分类
            </summary>
        </member>
        <member name="T:Framework.Components.IStateContext">
            <summary>
            用户状态数据接口
            </summary>
        </member>
        <member name="P:Framework.Components.IStateContext.Guid">
            <summary>
            客户端ID
            </summary>
        </member>
        <member name="P:Framework.Components.IStateContext.IPAddress">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="P:Framework.Components.IStateContext.SettingsID">
            <summary>
            站点ID
            </summary>
        </member>
        <member name="P:Framework.Components.IStateContext.User">
            <summary>
            当前用户
            </summary>
        </member>
        <member name="P:Framework.Components.IStateContext.UserName">
            <summary>
            参数中的用户名
            </summary>
        </member>
        <member name="P:Framework.Components.IStateContext.IsAdministrator">
            <summary>
            是否系统管理员
            </summary>
        </member>
        <member name="P:Framework.Components.IStateContext.RoleNames">
            <summary>
            用户的所有角色
            </summary>
        </member>
        <member name="T:Framework.Enumerations.SortUsersBy">
            <summary>
            Enum for control how user's are sorted - Note the sort is performed
            in the database.
            </summary>
            
        </member>
        <member name="F:Framework.Enumerations.SortUsersBy.Integral">
            <summary>
            积分
            </summary>
        </member>
        <member name="F:Framework.Enumerations.SortUsersBy.Nickname">
            <summary>
            昵称
            </summary>
        </member>
        <member name="T:Client.Message.EventLogMessageProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Client.Message.EventLogMessageProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="config"></param>
        </member>
        <member name="M:Client.Message.EventLogMessageProvider.Send(Framework.Message.MessageEntity,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Framework.Caching.CommonDependencyFacade">
            <summary>
            This class is provided to ease the usage of DependencyFactory from the client.
            It's main usage is to determine whether to invoke the DependencyFactory.  
            When no assembly is specified under CacheDependencyAssembly section in configuraion file, 
            then this class will return null
            Notice that this assembly reference System.Web
            </summary>
        </member>
        <member name="M:Framework.Caching.CommonDependencyFacade.GetUserDependency">
            <summary>
            用户依赖事件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Caching.CommonDependencyFacade.GetRoleDependency">
            <summary>
            获得角色的依赖
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Caching.CommonDependencyFacade.GetModuleDependency">
            <summary>
            获得模块的依赖
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Caching.CommonDependencyFacade.GetPermissionDependency">
            <summary>
            获得权限的依赖
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Caching.CommonDependencyFacade.GetUsersInRolesDependency">
            <summary>
            获得用户角色依赖
            </summary>
            <returns></returns>
        </member>
        <member name="T:Framework.Caching.CachingProvider">
            <summary>
            缓存数据提供器，暂时失效
            </summary>
        </member>
        <member name="T:Framework.Securities.SHA512Encrypt">
            <summary>
            新架构采用的密码加密方式
            </summary>
        </member>
        <member name="M:Framework.Securities.SHA512Encrypt.GeneratePasswordSalt">
            <summary>
            生成一个Password Salt
            </summary>
            <returns>Password Salt</returns>
        </member>
        <member name="M:Framework.Securities.SHA512Encrypt.GeneratePasswordHash(System.String,System.String)">
            <summary>
            生成密码Hash字符串
            </summary>
            <param name="password">原始密码</param>
            <param name="passwordSalt">Password Salt</param>
            <returns>密码Hash字符串</returns>
        </member>
        <member name="M:Framework.Securities.SHA512Encrypt.GeneratePasswordAnswerHash(System.String)">
            <summary>
            生成密码安全问题答案Hash字符串
            </summary>
            <param name="answer">密码安全问题答案</param>
            <returns>密码安全问题答案Hash字符串</returns>
        </member>
        <member name="M:Framework.Securities.SHA512Encrypt.DecodePassword(System.String,System.String)">
            <summary>
            解密密码
            </summary>
            <param name="passwordHash"></param>
            <param name="passwordSalt"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Securities.EncryptFactory">
            <summary>
            密码加密工厂类
            </summary>
        </member>
        <member name="M:Framework.Securities.EncryptFactory.Create(Framework.Securities.EncryptMode)">
            <summary>
            创建一个加密方法实例
            </summary>
            <param name="mode">密码加密方式</param>
            <returns>密码加密方法实例</returns>
        </member>
        <member name="T:Framework.Components.CurrencyHelper">
            <summary>
            金额结构。
            </summary>
            <remarks>
            正确填写票据和结算凭证的基本规定
            <br></br>
            银行、单位和个人填写的各种票据和结算凭证是办理支付结算和现金收付的重要依据，
            直接关系到支付结算的准确、及时和安全。票据和结算凭证是银行、单位和个人凭以记载账
            务的会计凭证，是记载经济业务和明确经济责任的一种书面证明。因此，填写票据和结算凭
            证，必须做到标准化、规范化，要要素齐全、数字正确、字迹清晰、不错漏、不潦草，防止
            涂改。
            <br></br>
            一、中文大写金额数字应用正楷或行书填写，如壹（壹）、贰（贰）、叁、肆（肆）、
            伍（伍）、陆（陆）、柒、捌、玖、拾、佰、仟、万（万）、亿、元、角、分、零、整（
            正）等字样。不得用一、二（两）、三、四、五、六、七、八、九、十、念、毛、另（或0）
            填写，不得自造简化字。如果金额数字书写中使用繁体字，如貳、陸、億、萬、圓的，也
            应受理。
            <br></br>
            二、中文大写金额数字到“元”为止的，在“元”之后，应写“整”（或“正”）字，
            在“角”之后可以不写“整”（或“正”）字。大写金额数字有“分”的，“分”后面不
            写“整”（或“正”）字。
            <br></br>
            三、中文大写金额数字前应标明“人民币”字样，大写金额数字应紧接“人民币”字
            样填写，不得留有空白。大写金额数字前未印“人民币”字样的，应加填“人民币”三字。
            在票据和结算凭证大写金额栏内不得预印固定的“仟、佰、拾、万、仟、伯、拾、元、角、
            分”字样。
            <br></br>
            四、阿拉伯小写金额数字中有“0”时，中文大写应按照汉语语言规律、金额数字构
            成和防止涂改的要求进行书写。举例如下：
            <br></br>
            （一）阿拉伯数字中间有“O”时，中文大写金额要写“零”字。如￥1，409．50，
            应写成人民币壹仟肆佰零玖元伍角。
            <br></br>
            （二）阿拉伯数字中间连续有几个“0”时，中文大写金额中间可以只写一个“零”
            字。如￥6，007．14，应写成人民币陆仟零柒元壹角肆分。
            <br></br>
            （三）阿拉伯金额数字万位或元位是“0”，或者数字中间连续有几个“0”，万位、
            元位也是“0’，但千位、角位不是“0”时，中文大写金额中可以只写一个零字，也可
            以不写“零”字。如￥1，680．32，应写成人民币壹仟陆佰捌拾元零叁角贰分，或者写
            成人民币壹仟陆佰捌拾元叁角贰分；又如￥107，000．53，应写成人民币壹拾万柒仟元
            零伍角叁分，或者写成人民币壹拾万零柒仟元伍角叁分。
            <br></br>
            （四）阿拉伯金额数字角位是“0”，而分位不是“0”时，中文大写金额“元”后
            面应写“零”字。如￥16，409.02，应写成人民币壹万陆仟肆佰零玖元零贰分；又如
            ￥325．04，应写成人民币叁佰贰拾伍元零肆分。
            <br></br>
            五、阿拉伯小写金额数字前面，均应填写入民币符号“￥”（或草写：）。阿拉伯
            小写金额数字要认真填写，不得连写分辨不清。
            <br></br>
            六、票据的出票日期必须使用中文大写。为防止变造票据的出禀日期，在填写月、
            日时，月为壹、贰和壹拾的，日为壹至玖和壹拾、贰拾和叁抬的，应在其前加“零”；
            日为抬壹至拾玖的，应在其前加“壹”。如1月15日，应写成零壹月壹拾伍日。再如
            10月20日，应写成零壹拾月零贰拾日。
            <br></br>
            七、票据出票日期使用小写填写的，银行不予受理。大写日期未按要求规范填写的，
            银行可予受理，但由此造成损失的，由出票入自行承担。
            <br></br>
            本算法遵守以上正确填写票据和结算凭证的基本规定，但尽可能短，即：可以不写“零”的地方一律不写“零”
            <br></br>
            考虑到有可能“人民币”字样已印在纸样上，本函数的返回结果中将不出现
            </remarks>
        </member>
        <member name="M:Framework.Components.CurrencyHelper.ToChineseCurrencyString(System.String)">
            <summary>
            获取指定金额值的中文大写金额。
            </summary>
            <param name="value">金额。</param>
            <returns>返回金额大写。</returns>
        </member>
        <member name="M:Framework.Components.CurrencyHelper.ToChineseCurrencyString(System.Double)">
            <summary>
            获取指定金额值的中文大写金额。
            </summary>
            <param name="value">金额。</param>
            <returns>返回金额大写。</returns>
        </member>
        <member name="T:Framework.Server.ChineseTokenizeProvider">
            <summary>
            中文分词的支持
            </summary>
            <remarks>   
            styker修改中文分词支持
            2007-08-03
            </remarks>
        </member>
        <member name="T:Framework.Search.QueryCallBack">
            <summary>
            用户查询回调事件委托
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Framework.Enumerations.CensorType">
            <summary>
            敏感词汇种类
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CensorType.Disabled">
            <summary>
            禁用，但可以发表，只是需要替换文字
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CensorType.Forbidden">
            <summary>
            只要有，就不准发表
            </summary>
        </member>
        <member name="F:Framework.Enumerations.CensorType.Ads">
            <summary>
            文字广告，有该文字的地方替换成相应的Ad
            </summary>
        </member>
        <member name="T:Framework.Events.RoleParentChange">
            <summary>
            角色上级发生变化
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Framework.Events.RoleParentChangeArgs">
            <summary>
            角色上级发生变化事件参数
            </summary>
        </member>
        <member name="M:Framework.Events.RoleParentChangeArgs.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="roleID">角色ID</param>
            <param name="orgParentID">原上级ID</param>
            <param name="newParentID">新上级ID</param>
        </member>
        <member name="P:Framework.Events.RoleParentChangeArgs.RoleID">
            <summary>
            角色ID
            </summary>
        </member>
        <member name="P:Framework.Events.RoleParentChangeArgs.OrgParentID">
            <summary>
            原上级ID
            </summary>
        </member>
        <member name="P:Framework.Events.RoleParentChangeArgs.NewParentID">
            <summary>
            新上级ID
            </summary>
        </member>
        <member name="T:Framework.Server.SqlHelper">
            <summary>
            SqlHelper
            </summary>
        </member>
        <member name="M:Framework.Server.SqlHelper.ConvertSQL(System.Data.SqlClient.SqlCommand)">
            <summary>
            将带参数的SQL命令语句将其参数转换为对应值
            <example>select * from t where id=@id -> select * from t where id=1</example>
            </summary>
            <param name="cmd"></param>
            <param name="cmdText"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.ExcelData.ExcelDataElements">
            <summary>
            Excel 数据中的每一栏
            </summary>
        </member>
        <member name="T:Framework.Components.Entities.SiteBannedAddress">
            <summary>
            表《SiteBannedAddresses》对应的类
            </summary>
        </member>
        <member name="T:Framework.Components.Entities.Base.SiteBannedAddresseBase">
            <summary>
            表《SiteBannedAddresses》对应的基类
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteBannedAddresseBase.OrgBannedID">
            <summary>
            BannedID
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteBannedAddresseBase.BannedID">
            <summary>
            BannedID
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteBannedAddresseBase.SettingsID">
            <summary>
            SettingsID
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteBannedAddresseBase.StartingAddress">
            <summary>
            StartingAddress
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteBannedAddresseBase.EndingAddress">
            <summary>
            EndingAddress
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteBannedAddresseBase.BannedDate">
            <summary>
            BannedDate
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteBannedAddresseBase.StartingID">
            <summary>
            将开始IP转换成Long
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.Base.SiteBannedAddresseBase.EndingID">
            <summary>
            结束地址转换成Long
            </summary>
        </member>
        <member name="M:Framework.Components.Entities.SiteBannedAddress.CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Entities.SiteBannedAddress.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Entities.SiteBannedAddress.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Entities.SiteBannedAddress.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:CompressionSink.CompressionServerSink">
            <summary>
            CompressionServerSink
            </summary>
        </member>
        <member name="M:CompressionSink.CompressionServerSink.#ctor(System.Runtime.Remoting.Channels.IServerChannelSink)">
            <summary>
            CompressionServerSink
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:CompressionSink.CompressionServerSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>
            异步方式
            </summary>
            <param name="sinkStack"></param>
            <param name="state"></param>
            <param name="msg"></param>
            <param name="headers"></param>
            <param name="stream"></param>
        </member>
        <member name="M:CompressionSink.CompressionServerSink.GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>
            GetResponseStream
            </summary>
            <param name="sinkStack"></param>
            <param name="state"></param>
            <param name="msg"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:CompressionSink.CompressionServerSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>
            ProcessMessage
            </summary>
            <param name="sinkStack"></param>
            <param name="requestMsg"></param>
            <param name="requestHeaders"></param>
            <param name="requestStream"></param>
            <param name="responseMsg"></param>
            <param name="responseHeaders"></param>
            <param name="responseStream"></param>
            <returns></returns>
        </member>
        <member name="P:CompressionSink.CompressionServerSink.NextChannelSink">
            <summary>
            NextChannelSink
            </summary>
        </member>
        <member name="T:Client.Message.XMLMessageProvider">
            <summary>
            XML消息管理器
            发送XML消息，此消息保存在本地文件端。
            </summary>
        </member>
        <member name="M:Client.Message.XMLMessageProvider.Send(Framework.Message.MessageEntity,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Framework.Caching.WebCacheHelper">
            <summary>
            缓存管理类
            </summary>
        </member>
        <member name="F:Framework.Caching.WebCacheHelper.DayFactor">
            <summary>
            DayFactor
            </summary>
        </member>
        <member name="F:Framework.Caching.WebCacheHelper.HourFactor">
            <summary>
            HourFactor
            </summary>
        </member>
        <member name="F:Framework.Caching.WebCacheHelper.MinuteFactor">
            <summary>
            MinuteFactor
            </summary>
        </member>
        <member name="F:Framework.Caching.WebCacheHelper.SecondFactor">
            <summary>
            SecondFactor
            </summary>
        </member>
        <member name="M:Framework.Caching.WebCacheHelper.ReSetFactor(System.Int32)">
            <summary>
            
            </summary>
            <param name="cacheFactor"></param>
        </member>
        <member name="M:Framework.Caching.WebCacheHelper.#cctor">
            <summary>
            确保当前HttpContext只有一个Cache实例
            </summary>
        </member>
        <member name="M:Framework.Caching.WebCacheHelper.Clear">
            <summary>
            清空Cache
            </summary>
        </member>
        <member name="M:Framework.Caching.WebCacheHelper.RemoveByPattern(System.String)">
            <summary>
            根据正则表达式的模式移除Cache
            </summary>
            <param name="pattern">模式</param>
        </member>
        <member name="M:Framework.Caching.WebCacheHelper.RemoveCacheByHead(System.String)">
            <summary>
            根据Key的开始字串进行匹配移除
            </summary>
            <param name="headKey"></param>
        </member>
        <member name="M:Framework.Caching.WebCacheHelper.Remove(System.String)">
            <summary>
            根据键值移除Cache
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Framework.Caching.WebCacheHelper.Insert(System.String,System.Object)">
            <summary>
            把对象加载到Cache
            </summary>
            <param name="key">键</param>
            <param name="obj">对象</param>
        </member>
        <member name="M:Framework.Caching.WebCacheHelper.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)">
            <summary>
            把对象加载到Cache,附加缓存依赖信息
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="dep"></param>
        </member>
        <member name="M:Framework.Caching.WebCacheHelper.Insert(System.String,System.Object,System.Int32)">
            <summary>
            把对象加载到Cache,附加过期时间信息
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:Framework.Caching.WebCacheHelper.Insert(System.String,System.Object,System.Int32,System.Web.Caching.CacheItemPriority)">
            <summary>
            把对象加载到Cache,附加过期时间信息和优先级
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="seconds"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Framework.Caching.WebCacheHelper.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.Int32)">
            <summary>
            把对象加载到Cache,附加缓存依赖和过期时间(多少秒后过期)
            (默认优先级为Normal)
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="dep"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:Framework.Caching.WebCacheHelper.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.Int32,System.Web.Caching.CacheItemPriority)">
            <summary>
            把对象加载到Cache,附加缓存依赖和过期时间(多少秒后过期)及优先级
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="dep"></param>
            <param name="seconds"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Framework.Caching.WebCacheHelper.MicroInsert(System.String,System.Object,System.Int32)">
            <summary>
            把对象加到缓存并忽略优先级
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="secondFactor"></param>
        </member>
        <member name="M:Framework.Caching.WebCacheHelper.Max(System.String,System.Object)">
            <summary>
            把对象加到缓存,并把过期时间设为最大值
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Framework.Caching.WebCacheHelper.Max(System.String,System.Object,System.Web.Caching.CacheDependency)">
            <summary>
            把对象加到缓存,并把过期时间设为最大值,附加缓存依赖信息
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="dep"></param>
        </member>
        <member name="M:Framework.Caching.WebCacheHelper.Permanent(System.String,System.Object)">
            <summary>
            插入持久性缓存
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Framework.Caching.WebCacheHelper.Permanent(System.String,System.Object,System.Web.Caching.CacheDependency)">
            <summary>
            插入持久性缓存,附加缓存依赖
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="dep"></param>
        </member>
        <member name="M:Framework.Caching.WebCacheHelper.Get(System.String)">
            <summary>
            根据键获取被缓存的对象
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Caching.WebCacheHelper.Get``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Caching.WebCacheHelper.SecondFactorCalculate(System.Int32)">
            <summary>
            Return int of seconds * SecondFactor
            </summary>
        </member>
        <member name="T:Framework.Caching.CommonCacheDependencyAccess">
            <summary>
            通用对像依赖
            </summary>
        </member>
        <member name="M:Framework.Caching.CommonCacheDependencyAccess.CreateUserDependency">
            <summary>
            Method to create an instance of Category dependency implementation
            </summary>
            <returns>Category Dependency Implementation</returns>
        </member>
        <member name="M:Framework.Caching.CommonCacheDependencyAccess.CreateRoleDependency">
            <summary>
            Method to create an instance of Product dependency implementation
            </summary>
            <returns>Product Dependency Implementation</returns>
        </member>
        <member name="M:Framework.Caching.CommonCacheDependencyAccess.CreateModuleDependency">
            <summary>
            Method to create an instance of Item dependency implementation
            </summary>
            <returns>Item Dependency Implementation</returns>
        </member>
        <member name="M:Framework.Caching.CommonCacheDependencyAccess.CreatePermissionDependency">
            <summary>
            Method to create an instance of Item dependency implementation
            </summary>
            <returns>Item Dependency Implementation</returns>
        </member>
        <member name="M:Framework.Caching.CommonCacheDependencyAccess.CreateUsersInRolesDependency">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Caching.CommonCacheDependencyAccess.LoadInstance(System.String)">
            <summary>
            Common method to load dependency class from information provided from configuration file 
            </summary>
            <param name="className">Type of dependency</param>
            <returns>Concrete Dependency Implementation instance</returns>
        </member>
        <member name="T:Framework.Server.ServerProviderHelper">
            <summary>
            Summary description for ProviderHelper.
            </summary>
        </member>
        <member name="M:Framework.Server.ServerProviderHelper.Instance">
            <summary>
            Returns an instance of the user-specified data provider class.
            </summary>
            <returns>An instance of the user-specified data provider class.  This class must inherit the
            CommonDataProvider interface.</returns>
        </member>
        <member name="M:Framework.Server.ServerProviderHelper.CreateDefaultProvider">
            <summary>
            Creates the Default CommonDataProvider
            </summary>
        </member>
        <member name="T:Framework.Remoting.RemoteObjectConfiguration">
            <summary>
            远程对象配置（可将不同的远程对象程序集部署到任意位置）
            <example>
            <code>
            <configuration>
                <configSections>
            	    <sectionGroup name="sinomen">
            		    <sectionGroup name="globals">
            			    <section name="remoteObject" type="SF.Remoting.RemoteObjectConfigurationHandler, Sinomen.Framework"/>
            	        </sectionGroup>
            	    </sectionGroup>
                </configSections>
                <system.web>
            	......
                </system.web>
                <sinomen>
            	    <globals>
            		    <remoteObject>
                            <serviceModule name="Authentication" protocol="tcp" ip="127.0.0.1" port="8080" />
                            <serviceModule name="CRM" protocol="http" ip="127.0.0.1" port="8000" />
                            <serviceModule name="OA" protocol="tcp" ip="127.0.0.1" port="8081" />
                        </remoteObject>
            	    </globals>
                </sinomen>
            </configuration>
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Framework.Remoting.RemoteObjectConfiguration.GetConfig">
            <summary>
            获取远程对象配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Remoting.RemoteObjectConfiguration.LoadValuesFromConfigurationXml(System.Xml.XmlNode)">
            <summary>
            从配置文件加载配置值
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:Framework.Remoting.RemoteObjectConfiguration.Modules">
            <summary>
            获取远程对象业务模块集合（部署的URL信息，协议，IP及端口）
            </summary>
        </member>
        <member name="T:Framework.Message.MessageHandler">
            <summary>
            消息处理者
            </summary>
        </member>
        <member name="M:Framework.Message.MessageHandler.Send(Framework.Message.MessageEntity,System.String,System.String)">
            <summary>
            发送消息
            </summary>
            <param name="msg">消息实体</param>
            <param name="guid">客户端唯一识别码</param>
            <param name="ipAddress">IP地址</param>
        </member>
        <member name="T:Framework.Components.LocalizationConfiguration">
            <summary>
            本地化配置
            <example>
            <code>
            <configuration>
                <configSections>
            	    <sectionGroup name="sinomen">
            		    <sectionGroup name="globals">
            			    <section name="localization" type="Sinomen.Localization.LocalizationConfigurationHandler, Sinomen.Framework" />
            	        </sectionGroup>
            	    </sectionGroup>
                </configSections>
                <system.web>
            	......
                </system.web>
                <sinomen>
            	    <globals>
            		    <localization defaultLanguage="zh-CN" location="~/Languages/" />
            	    </globals>
                </sinomen>
            </configuration>
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Framework.Components.LocalizationConfiguration.GetConfig">
            <summary>
            
            </summary>
        </member>
        <member name="M:Framework.Components.LocalizationConfiguration.LoadValuesFromConfigurationXml(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:Framework.Components.LocalizationConfiguration.Location">
            <summary>
            本地化资源文件所在目录虚拟路径
            </summary>
        </member>
        <member name="P:Framework.Components.LocalizationConfiguration.DefaultLanguage">
            <summary>
            缺省语言
            </summary>
        </member>
        <member name="P:Framework.Components.LocalizationConfiguration.CalculatedLocation">
            <summary>
            计算本地化资源文件所在目录物理路径
            </summary>
        </member>
        <member name="T:Framework.Enumerations.RoleType">
            <summary>
            角色类型
            角色根据情况可能有类型的扩充，如组织类的，其它等
            </summary>
        </member>
        <member name="F:Framework.Enumerations.RoleType.Group">
            <summary>
            普通角色
            </summary>
        </member>
        <member name="F:Framework.Enumerations.RoleType.Organization">
            <summary>
            组织部门类角色
            </summary>
        </member>
        <member name="T:Framework.Enumerations.TraceAction">
            <summary>
            用户痕迹的行为类型
            </summary>
        </member>
        <member name="F:Framework.Enumerations.TraceAction.Other">
            <summary>
            其他
            </summary>
        </member>
        <member name="F:Framework.Enumerations.TraceAction.Comment">
            <summary>
            评论
            </summary>
        </member>
        <member name="F:Framework.Enumerations.TraceAction.Listen">
            <summary>
            听
            </summary>
        </member>
        <member name="F:Framework.Enumerations.TraceAction.Upload">
            <summary>
            上传
            </summary>
        </member>
        <member name="F:Framework.Enumerations.TraceAction.Join">
            <summary>
            参加
            </summary>
        </member>
        <member name="F:Framework.Enumerations.TraceAction.Revert">
            <summary>
            回复
            </summary>
        </member>
        <member name="F:Framework.Enumerations.TraceAction.Invite">
            <summary>
            邀请
            </summary>
        </member>
        <member name="F:Framework.Enumerations.TraceAction.Publish">
            <summary>
            发布
            </summary>
        </member>
        <member name="F:Framework.Enumerations.TraceAction.Download">
            <summary>
            下载
            </summary>
        </member>
        <member name="F:Framework.Enumerations.TraceAction.Collect">
            <summary>
            收藏
            </summary>
        </member>
        <member name="F:Framework.Enumerations.TraceAction.Append">
            <summary>
            添加(好友)
            </summary>
        </member>
        <member name="F:Framework.Enumerations.TraceAction.Browse">
            <summary>
            浏览/查阅
            </summary>
        </member>
        <member name="F:Framework.Enumerations.TraceAction.Search">
            <summary>
            搜索
            </summary>
        </member>
        <member name="F:Framework.Enumerations.TraceAction.Recommend">
            <summary>
            推荐
            </summary>
        </member>
        <member name="T:Framework.Components.IUsers">
            <summary>
            Membership用户模块数据访问接口
            </summary>
        </member>
        <member name="M:Framework.Components.IUsers.GetUser(System.String)">
            <summary>
            获取UserShortInfo对象
            </summary>
            <param name="username">用户名</param>
            <returns>UserShortInfo</returns>
        </member>
        <member name="M:Framework.Components.IUsers.GetUserbyID(System.Int32)">
            <summary>
            根据用户ID获得用户UserShortInfo
            </summary>
        </member>
        <member name="M:Framework.Components.IUsers.GetFullUserInformation(System.String)">
            <summary>
            获得用户完整信息
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IUsers.GetSimpleUserInformation(System.Int32)">
            <summary>
            获得用户基本信息
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IUsers.GetUser(System.Int32,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            获得用户信息
            </summary>
            <param name="userID">用户ＩＤ</param>
            <param name="username">用户名称</param>
            <param name="isOnline">是否在线</param>
            <param name="isEditable">是否可编辑</param>
            <param name="lastAction">最后活动</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IUsers.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            根据EMAIL查用户信息
            </summary>
        </member>
        <member name="M:Framework.Components.IUsers.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            根据用户名查用户信息
            </summary>
        </member>
        <member name="M:Framework.Components.IUsers.GetAllUsers(System.Int32,System.Int32,System.Int32@)">
            <summary>
            获得所有用户
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IUsers.GetUsers(System.String,System.String,System.DateTime,System.DateTime,Framework.Enumerations.UserStatus,Framework.Enumerations.UserType,System.Int32,System.Int32,System.Int32@)">
            <summary>
            获得所有用户
            </summary>
            <param name="usernameToMatch"></param>
            <param name="emailToMatch"></param>
            <param name="beginTime"></param>
            <param name="endTime"></param>
            <param name="status"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IUsers.GetPasswordAnswerByUserName(System.String,Framework.Securities.EncryptMode@,System.String@)">
            <summary>
            取出用户密码和答案
            </summary>
        </member>
        <member name="M:Framework.Components.IUsers.FindMembershipUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            根据EMAIL查Membership用户信息
            </summary>
        </member>
        <member name="M:Framework.Components.IUsers.FindMembershipUsersByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            根据用户名查Membership用户信息
            </summary>
        </member>
        <member name="M:Framework.Components.IUsers.GetAllMembershipUsers(System.Int32,System.Int32,System.Int32@)">
            <summary>
            获得所有Membership用户
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IUsers.GetNumberOfUsersOnline(System.DateTime)">
            <summary>
            获取在线用户数 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IUsers.CheckUserExists(System.String)">
            <summary>
            检查用户是否存在
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IUsers.GetPasswordFormat(System.String)">
            <summary>
            取出用户的密码格式 
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IUsers.GetPassword(System.String,System.String)">
            <summary>
            得到用户密码
            </summary>
            <param name="username"></param>
            <param name="answer"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IUsers.CreateUser(Framework.Components.UserInfo)">
            <summary>
            新增用户信息
            </summary>
            <param name="u">用户实体</param>
            <returns>用户ID</returns>
        </member>
        <member name="M:Framework.Components.IUsers.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,Framework.Securities.EncryptMode)">
            <summary>
            创建一个用户
            </summary>
            <param name="username">用户名</param>
            <param name="passwordHash">密码Hash值</param>
            <param name="email">Email</param>
            <param name="passwordQuestion">密码安全问题</param>
            <param name="passwordAnswer">密码安全答案</param>
            <param name="isApproved">是否锁定</param>
            <param name="EncryptMode">加密方式</param>
            <param name="passwordSalt">密码Salt</param>
            <returns>MembershipUser</returns>
        </member>
        <member name="M:Framework.Components.IUsers.UpdateUser(Framework.Components.UserInfo)">
            <summary>
            更新用户所有信息
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IUsers.ResetPassword(System.String,System.String,System.String)">
            <summary>
            重设密码
            </summary>
            <param name="username"></param>
            <param name="answer"></param>
            <param name="guid"></param>
            <param name="ipAddress"></param>
            <param name="newPassword"></param>
            <returns>0设置不成功，－1新密码不对 －2答案不对</returns>
        </member>
        <member name="M:Framework.Components.IUsers.UpdateUser(System.String,System.String,System.Boolean,System.String)">
             <summary>
            更新用户信息
             </summary>
             <param name="Email"></param>
             <param name="Comment"></param>
             <param name="IsApproved"></param>
             <param name="UserName"></param>
        </member>
        <member name="M:Framework.Components.IUsers.UpdatePassword(System.String,System.String,System.String)">
            <summary>
            更新用户密码
            </summary>
            <param name="username"></param>
            <param name="passwordHash"></param>
            <param name="passwordSalt"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IUsers.UpdateLastActivityDate(System.String,System.String)">
            <summary>
            更新用户最后活动日期
            </summary>
            <param name="username"></param>
        </member>
        <member name="M:Framework.Components.IUsers.UpdateLastLoginDate(System.String,System.String)">
            <summary>
            更新用户最后登录日期
            </summary>
            <param name="username"></param>
        </member>
        <member name="M:Framework.Components.IUsers.UpdateLastLoginDate(System.String)">
            <summary>
            更新用户最后登录日期
            </summary>
            <param name="username"></param>
        </member>
        <member name="M:Framework.Components.IUsers.ChangePassword(System.String,System.String,System.String)">
            <summary>
            修改用户密码
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="newPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IUsers.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            更改用户问题及答案
            </summary>
            <param name="username"></param>
            <param name="passwordHash"></param>
            <param name="newPasswordQuestion"></param>
            <param name="newPasswordAnswer"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IUsers.UnlockUser(System.String)">
            <summary>
            解除用户锁定
            </summary>
        </member>
        <member name="M:Framework.Components.IUsers.DeleteUser(System.String)">
            <summary>
            根据用户名删除用户
            </summary>
        </member>
        <member name="M:Framework.Components.IUsers.LockUser(System.String)">
            <summary>
            锁定用户
            </summary>
            <param name="username"></param>
            <param name="guid"></param>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IUsers.ApproveUser(System.String)">
            <summary>
            审核通过用户
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IUsers.GetUserPasswordFormat(System.String)">
            <summary>
            获得用户密文格式
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IUsers.GetUsers(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            读取ID大于某个值的用户列表
            </summary>
            <param name="minUserID"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IUsers.GetUserDatabaseString">
            <summary>
            读取用户认证数据库的联接串
            </summary>
            <returns></returns>
        </member>
        <member name="T:Framework.Enumerations.ObjectTypeHelper">
            <summary>
            内容对像类型
            </summary>
        </member>
        <member name="M:Framework.Enumerations.ObjectTypeHelper.GetTypeNote(System.Int32)">
            <summary>
            对象类型说明
            </summary>
            <param name="typeId">对象类型标识</param>
            <returns>字符串说明</returns>
        </member>
        <member name="M:Framework.Enumerations.ObjectTypeHelper.GetTypeNote(Framework.Enumerations.ObjectType)">
            <summary>
            对象类型说明
            </summary>
            <param name="type">对象类型</param>
            <returns>字符串说明</returns>
        </member>
        <member name="M:Framework.Enumerations.ObjectTypeHelper.GetType(System.String)">
            <summary>
            根据字符的值,转换为ObjectTypeEnum
            </summary>
            <param name="val">字符串型的值</param>
            <returns>ObjectTypeEnum</returns>
        </member>
        <member name="T:Framework.Components.Entities.SiteBannedAddresseSet">
            <summary>
            Summary description for UserSet.
            </summary>
        </member>
        <member name="M:Framework.Components.Entities.SiteBannedAddresseSet.Add(Framework.Components.Entities.SiteBannedAddress)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Entities.SiteBannedAddresseSet.Contains(Framework.Components.Entities.SiteBannedAddress)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Entities.SiteBannedAddresseSet.IndexOf(Framework.Components.Entities.SiteBannedAddress)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.Entities.SiteBannedAddresseSet.Insert(System.Int32,Framework.Components.Entities.SiteBannedAddress)">
            <summary>
            /
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Framework.Components.Entities.SiteBannedAddresseSet.Remove(Framework.Components.Entities.SiteBannedAddress)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Framework.Components.Entities.SiteBannedAddresseSet.CurrentPos">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.SiteBannedAddresseSet.TotalRecordCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.Components.Entities.SiteBannedAddresseSet.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Components.OperateLog">
            <summary>
            用户操作日志。
            记录用户每个操作步骤
            </summary>
        </member>
        <member name="P:Framework.Components.OperateLog.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="T:Framework.Components.HitSet">
            <summary>
            Summary description for UserSet.
            </summary>
        </member>
        <member name="P:Framework.Components.HitSet.TotalRecordCount">
            <summary>
            数据库中记录数
            </summary>
        </member>
        <member name="T:Framework.Caching.ServerCacheHelper">
            <summary>
            服务端缓存管理类
            </summary>
        </member>
        <member name="F:Framework.Caching.ServerCacheHelper.DayFactor">
            <summary>
            DayFactor
            </summary>
        </member>
        <member name="F:Framework.Caching.ServerCacheHelper.HourFactor">
            <summary>
            HourFactor
            </summary>
        </member>
        <member name="F:Framework.Caching.ServerCacheHelper.MinuteFactor">
            <summary>
            MinuteFactor
            </summary>
        </member>
        <member name="F:Framework.Caching.ServerCacheHelper.SecondFactor">
            <summary>
            SecondFactor
            </summary>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper.ReSetFactor(System.Int32)">
            <summary>
            重设缓存时间
            </summary>
            <param name="cacheFactor"></param>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper.#cctor">
            <summary>
            确保当前HttpContext只有一个Cache实例
            </summary>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper.Clear">
            <summary>
            清空Cache
            </summary>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper.RemoveByPattern(System.String)">
            <summary>
            根据正则表达式的模式移除Cache
            </summary>
            <param name="pattern">模式</param>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper.Remove(System.String)">
            <summary>
            根据键值移除Cache
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper.Insert(System.String,System.Object)">
            <summary>
            把对象加载到Cache
            </summary>
            <param name="key">键</param>
            <param name="obj">对象</param>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)">
            <summary>
            把对象加载到Cache,附加缓存依赖信息
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="dep"></param>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper.Insert(System.String,System.Object,System.Int32)">
            <summary>
            把对象加载到Cache,附加过期时间信息
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper.Insert(System.String,System.Object,System.Int32,System.Web.Caching.CacheItemPriority)">
            <summary>
            把对象加载到Cache,附加过期时间信息和优先级
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="seconds"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.Int32)">
            <summary>
            把对象加载到Cache,附加缓存依赖和过期时间(多少秒后过期)
            (默认优先级为Normal)
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="dep"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.Int32,System.Web.Caching.CacheItemPriority)">
            <summary>
            把对象加载到Cache,附加缓存依赖和过期时间(多少秒后过期)及优先级
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="dep"></param>
            <param name="seconds"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="dep"></param>
            <param name="abs"></param>
            <param name="slidingSpan"></param>
            <param name="p"></param>
            <param name="c"></param>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper.MicroInsert(System.String,System.Object,System.Int32)">
            <summary>
            把对象加到缓存并忽略优先级
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="secondFactor"></param>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper.Max(System.String,System.Object)">
            <summary>
            把对象加到缓存,并把过期时间设为最大值
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper.Max(System.String,System.Object,System.Web.Caching.CacheDependency)">
            <summary>
            把对象加到缓存,并把过期时间设为最大值,附加缓存依赖信息
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="dep"></param>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper.Permanent(System.String,System.Object)">
            <summary>
            插入持久性缓存
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper.Permanent(System.String,System.Object,System.Web.Caching.CacheDependency)">
            <summary>
            插入持久性缓存,附加缓存依赖
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="dep"></param>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper.Get(System.String)">
            <summary>
            根据键获取被缓存的对象
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper.SecondFactorCalculate(System.Int32)">
            <summary>
            Return int of seconds * SecondFactor
            </summary>
        </member>
        <member name="T:Framework.Caching.ServerCacheHelper1">
            <summary>
            基于服务器端的缓存管理
            模仿原来基于Ｗｅｂ的缓存编写，暂时用用，需要进行调整。
            对缓存失效时间及ＣａｃｈｅＤｅｐｅｎｄｅｎｃｙ未处理。
            </summary>
        </member>
        <member name="F:Framework.Caching.ServerCacheHelper1.DayFactor">
            <summary>
            DayFactor
            </summary>
        </member>
        <member name="F:Framework.Caching.ServerCacheHelper1.HourFactor">
            <summary>
            HourFactor
            </summary>
        </member>
        <member name="F:Framework.Caching.ServerCacheHelper1.MinuteFactor">
            <summary>
            MinuteFactor
            </summary>
        </member>
        <member name="F:Framework.Caching.ServerCacheHelper1.SecondFactor">
            <summary>
            SecondFactor
            </summary>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper1.ReSetFactor(System.Int32)">
            <summary>
            
            </summary>
            <param name="cacheFactor"></param>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper1.#cctor">
            <summary>
            确保当前HttpContext只有一个Cache实例
            </summary>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper1.Clear">
            <summary>
            清空Cache
            </summary>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper1.RemoveByPattern(System.String)">
            <summary>
            根据正则表达式的模式移除Cache
            </summary>
            <param name="pattern">模式</param>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper1.Remove(System.String)">
            <summary>
            根据键值移除Cache
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper1.Insert(System.String,System.Object)">
            <summary>
            把对象加载到Cache
            </summary>
            <param name="key">键</param>
            <param name="obj">对象</param>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper1.Insert(System.String,System.Object,System.Int32)">
            <summary>
            把对象加载到Cache,附加过期时间信息
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper1.MicroInsert(System.String,System.Object,System.Int32)">
            <summary>
            把对象加到缓存并忽略优先级
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="secondFactor"></param>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper1.Max(System.String,System.Object)">
            <summary>
            把对象加到缓存,并把过期时间设为最大值
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper1.Permanent(System.String,System.Object)">
            <summary>
            插入持久性缓存
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper1.Get(System.String)">
            <summary>
            根据键获取被缓存的对象
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper1.Get``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Caching.ServerCacheHelper1.SecondFactorCalculate(System.Int32)">
            <summary>
            Return int of seconds * SecondFactor
            </summary>
        </member>
        <member name="T:Framework.Account.BillingType">
            <summary>
            计费方式
            可能会多种方式组合在一起，因此值为0,1,2,4,8这种方式
            </summary>
        </member>
        <member name="F:Framework.Account.BillingType.ByCount">
            <summary>
            按次数
            </summary>
        </member>
        <member name="F:Framework.Account.BillingType.ByTime">
            <summary>
            按时间
            </summary>
        </member>
        <member name="F:Framework.Account.BillingType.ByStream">
            <summary>
            根据流量
            </summary>
        </member>
        <member name="F:Framework.Account.BillingType.All">
            <summary>
            按时间加次数
            </summary>
        </member>
        <member name="T:Framework.Remoting.RemotingClientHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Framework.Remoting.RemotingClientHelper.BuildUrl(System.String,System.String)">
            <summary>
            构建远程对象URL地址字符串
            </summary>
            <param name="moduleName"></param>
            <param name="objectUri"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Remoting.RemotingClientHelper.BuildUrl(System.String,System.String,System.Collections.Generic.IDictionary{System.String,Framework.Remoting.ServiceModule})">
            <summary>
            构建远程对象URL地址字符串
            </summary>
            <param name="moduleName"></param>
            <param name="objectUri"></param>
            <param name="providers"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Remoting.RemotingClientHelper.GetWellKnownClientInstance``1(System.String,System.String)">
            <summary>
            获取知名对象客户端代理，不建议使用此方法
            </summary>
            <typeparam name="T">一般为对象的接口类型</typeparam>
            <param name="moduleName">模块名称（在配置文件中配置了远程对象的模块名称）</param>
            <param name="objectUri">objectUri或者ApplicationName</param>
            <returns>返回远程对象代理</returns>
        </member>
        <member name="M:Framework.Remoting.RemotingClientHelper.GetWellKnownClientInstance``1(System.String,System.String,System.Collections.Generic.IDictionary{System.String,Framework.Remoting.ServiceModule})">
            <summary>
            获取知名对象客户端代理
            </summary>
            <typeparam name="T"></typeparam>
            <param name="moduleName"></param>
            <param name="objectUri"></param>
            <param name="providers"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Components.ValidatorHelper">
            <summary>
            验证常用表达式
            </summary>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsMatch(System.String,System.String)">
            <summary>
            判断字符串是否与指定正则表达式匹配
            </summary>
            <param name="input">要验证的字符串</param>
            <param name="regularExp">正则表达式</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsUnMinusInt(System.String)">
            <summary>
            验证非负整数（正整数 + 0）
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsPlusInt(System.String)">
            <summary>
            验证正整数
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsUnPlusInt(System.String)">
            <summary>
            验证非正整数（负整数 + 0） 
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsMinusInt(System.String)">
            <summary>
            验证负整数
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsInt(System.String)">
            <summary>
            验证整数
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsUnMinusFloat(System.String)">
            <summary>
            验证非负浮点数（正浮点数 + 0）
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsPlusFloat(System.String)">
            <summary>
            验证正浮点数
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsUnPlusFloat(System.String)">
            <summary>
            验证非正浮点数（负浮点数 + 0）
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsMinusFloat(System.String)">
            <summary>
            验证负浮点数
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsFloat(System.String)">
            <summary>
            验证浮点数
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsLetter(System.String)">
            <summary>
            验证由26个英文字母组成的字符串
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsChinese(System.String)">
            <summary>
            验证由中文组成的字符串
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsUpperLetter(System.String)">
            <summary>
            验证由26个英文字母的大写组成的字符串
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsLowerLetter(System.String)">
            <summary>
            验证由26个英文字母的小写组成的字符串
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsNumericOrLetter(System.String)">
            <summary>
            验证由数字和26个英文字母组成的字符串
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsNumeric(System.String)">
            <summary>
            验证由数字组成的字符串
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsNumeric(System.Object)">
            <summary>
            验证由数字组成的对像
            </summary>
            <param name="o">要验证的对像</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsNumericOrLetterOrChinese(System.String)">
            <summary>
            验证由数字和26个英文字母或中文组成的字符串
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsNumericOrLetterOrUnderline(System.String)">
            <summary>
            验证由数字、26个英文字母或者下划线组成的字符串
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsEmail(System.String)">
            <summary>
            验证email地址
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsUrl(System.String)">
            <summary>
            验证URL
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsTelephone(System.String)">
            <summary>
            验证电话号码
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsMobile(System.String)">
            <summary>
            验证手机号码
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsImageFormat(System.String)">
            <summary>
            通过文件扩展名验证图像格式
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsIP(System.String)">
            <summary>
            验证IP
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsDate(System.String)">
            <summary>
            验证日期（YYYY-MM-DD）
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsDateTime(System.String)">
            <summary>
            验证日期和时间（YYYY-MM-DD HH:MM:SS）
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsColor(System.String)">
            <summary>
            验证颜色（#ff0000）
            </summary>
            <param name="input">要验证的字符串</param>
            <returns>验证通过返回true</returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsValid(System.String,System.String)">
            <summary>
            根据数据类型检查值是否合法
            NULL值被认为是合法的
            </summary>
            <param name="value">值</param>
            <param name="typeName">类型名，如int,long,int32等等</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.ValidatorHelper.IsDouble(System.String)">
            <summary>
            校验 双精度小数 格式
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Search.SearchCaseSet">
            <summary>
            查询方案设置
            </summary>
        </member>
        <member name="M:Framework.Search.SearchCaseSet.Add(Framework.Search.SearchCase)">
            <summary>
            增加
            </summary>
            <param name="sc">方案名</param>
        </member>
        <member name="M:Framework.Search.SearchCaseSet.Remove(Framework.Search.SearchCase)">
            <summary>
            删除
            </summary>
            <param name="sc">方案名</param>
        </member>
        <member name="M:Framework.Search.SearchCaseSet.Insert(System.Int32,Framework.Search.SearchCase)">
            <summary>
            插入
            </summary>
            <param name="index">索引</param>
            <param name="sc">方案名</param>
        </member>
        <member name="M:Framework.Search.SearchCaseSet.Contains(Framework.Search.SearchCase)">
            <summary>
            返回内容
            </summary>
            <param name="value">方案名</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.SearchCaseSet.IndexOf(Framework.Search.SearchCase)">
            <summary>
            返回内容
            </summary>
            <param name="value">方案名</param>
            <returns></returns>
        </member>
        <member name="P:Framework.Search.SearchCaseSet.TotalRecordCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:Framework.Search.SearchCaseSet.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Search.FilterParse">
            <summary>
            用于XML与Filter的文档之间的转换过程
            TOXML 将对象转成XML
            FROMXML将XML转成对像
            </summary>
        </member>
        <member name="F:Framework.Search.FilterParse.XMLSchemeForItem">
            <summary>
            将过滤项设置为ＸＭＬ结构
            </summary>
        </member>
        <member name="F:Framework.Search.FilterParse.XMLSchemeForItemCollection">
            <summary>
            将过滤项组设置为ＸＭＬ结构
            </summary>
        </member>
        <member name="F:Framework.Search.FilterParse.XMLScehemForTreeCollection">
            <summary>
            将树设置为ＸＭＬ结构
            </summary>
        </member>
        <member name="F:Framework.Search.FilterParse.XMLSchemeForTree">
            <summary>
            将树设置为ＸＭＬ结构
            </summary>
        </member>
        <member name="F:Framework.Search.FilterParse.XMLSchemeForFields">
            <summary>
            字段集合的ＸＭＬ格式
            </summary>
        </member>
        <member name="F:Framework.Search.FilterParse.XMLSchemeForField">
            <summary>
            字段的ＸＭＬ格式
            </summary>
        </member>
        <member name="F:Framework.Search.FilterParse.XMLSchemeForFieldAttribute">
            <summary>
            字段过滤属性的ＸＭＬ
            </summary>
        </member>
        <member name="M:Framework.Search.FilterParse.ToXML(Framework.Search.FilterAttribute)">
            <summary>
            将字段过滤属性转为ＸＭＬ
            </summary>
            <param name="fa"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.FilterParse.ToXML(Framework.Search.FieldItem)">
            <summary>
            将字段转为ＸＭＬ
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.FilterParse.ToXML(Framework.Search.FilterItem)">
            <summary>
            将字段转成XML
            </summary>
            <param name="item">字段</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.FilterParse.ToXML(Framework.Search.FilterItemSet)">
            <summary>
            将字段转成XML
            </summary>
            <param name="items">字段组</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.FilterParse.ToXML(Framework.Search.FilterItemTree)">
            <summary>
            将树对象转成XML
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.FilterParse.ToXML(Framework.Search.FilterItemTreeCollection)">
            <summary>
            将树对象转成XML
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.FilterParse.ToXML(Framework.Search.OrderFields)">
            <summary>
            将排序字段转化成ＸＭＬ
            </summary>
            <param name="orders"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.FilterParse.ConvertFilterItemFromXML(System.String)">
            <summary>
            将XML转成过滤项字段
            </summary>
            <param name="xmlString"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.FilterParse.ConvertFilterItemFromNode(System.Xml.XmlNode)">
            <summary>
            将节点转化为过滤项
            </summary>
            <param name="node">节点</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.FilterParse.FromXML(System.String)">
            <summary>
            将XML转成对像
            </summary>
            <param name="xmlString"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.FilterParse.GetFilterAttributeFromXML(System.String)">
            <summary>
            从ＸＭＬ文档中获得过滤属性
            </summary>
            <param name="xmlString"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.FilterParse.GetFieldItemFromXML(System.String)">
            <summary>
            从ＸＭＬ文档中获得字段对像
            </summary>
            <param name="xmlString"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.FilterParse.GetOrdersFromXML(System.String)">
            <summary>
            从ＸＭＬ文档中获得排序字段列表
            </summary>
            <param name="xmlString"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.FilterParse.ToSqlWhereClause(Framework.Search.FilterItem)">
            <summary>
            将条件转为ＳＱＬ条件
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.FilterParse.ToSqlWhereClause(Framework.Search.FilterItemTree)">
            <summary>
            将复合条件转成ＳＱＬ
            </summary>
            <param name="itemTree"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.FilterParse.ValidItems(Framework.Search.FilterItem)">
            <summary>
            检查条件值是否合法
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Framework.Search.FilterParse.ValidItems(Framework.Search.FilterItemTree)">
            <summary>
            检查条件值是否合法
            </summary>
            <param name="itemTree"></param>
        </member>
        <member name="T:Framework.Search.FieldSet">
            <summary>
            字段设置
            </summary>
        </member>
        <member name="M:Framework.Search.FieldSet.Add(Framework.Search.FieldItem)">
            <summary>
            增加, 如果传入两个表别名及字段名都一样的字段，系统将自动忽略第二个传入的字段。即同样条件的字段在一个列表中只能存在一个。
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Framework.Search.FieldSet.Contains(Framework.Search.FieldItem)">
            <summary>
            返回字段内容
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.FieldSet.IndexOf(Framework.Search.FieldItem)">
            <summary>
            返回字段索引
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Search.FieldSet.AddOverwrite(Framework.Search.FieldItem)">
            <summary>
            增加, 如果传入两个表别名及字段名都一样的字段，系统将自动用第二个传入字段取代第一个传入的字段。
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Framework.Search.FieldSet.Insert(System.Int32,Framework.Search.FieldItem)">
            <summary>
            在指定位置插入一个字段
            如果这个字段已经在里面，则不插入
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Framework.Search.FieldSet.Remove(Framework.Search.FieldItem)">
            <summary>
            删除
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Framework.Search.FieldSet.Find(System.String)">
            <summary>
            根据字段名称查询
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="P:Framework.Search.FieldSet.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Components.IPassPort">
            <summary>
            通行证认证
            用于用户登录、认证及用户相关信息的读取。
            用户登录认证时，系统将记录用户的行为
            </summary>
        </member>
        <member name="M:Framework.Components.IPassPort.GetUserEncryptCode(System.Int32)">
            <summary>
            获得数据库中保存的用户登录信息的加密串
            默认格式为：SHA1（UserID＋DateTime.Now＋PassKEY）
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.SaveUserEncryptCode(System.Int32,System.String)">
            <summary>
            往数据库中记录用户登录信息的加密串
            默认格式为：SHA1（UserID＋DateTime.Now＋PassKEY）
            </summary>
            <param name="userId"></param>
            <param name="transUserPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.LoginLog(System.Int32,System.Int32,System.String)">
            <summary>
            记录用户登录行为
            </summary>
            <param name="sourceId"></param>
            <param name="userId"></param>
            <param name="userIp"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.LoginLog(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            记录用户行为
            </summary>
            <param name="sourceId"></param>
            <param name="userId"></param>
            <param name="userType"></param>
            <param name="userIp"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.GetVisitInfo(System.Int32)">
            <summary>
            获得用户的Visit信息
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.VisitLog(System.Int32,System.Int32,System.String)">
            <summary>
            记录用户行为
            </summary>
            <param name="sourceId"></param>
            <param name="userId"></param>
            <param name="userIp"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.VisitLog(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            记录用户行为
            </summary>
            <param name="sourceId"></param>
            <param name="userId"></param>
            <param name="userType"></param>
            <param name="userIp"></param>
        </member>
        <member name="M:Framework.Components.IPassPort.GetUser(System.Int32,System.Boolean)">
            <summary>
            根据用户ID获取用户信息
            </summary>
            <param name="userId"></param>
            <param name="isCache"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.GetUser(System.String,System.Boolean)">
            <summary>
            根据用户帐号获取用户信息。
            </summary>
            <param name="userName"></param>
            <param name="isCache"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.GetUser(System.String,System.String,System.Boolean)">
            <summary>
            根据用户帐号获取用户信息。
            </summary>
            <param name="userName"></param>
            <param name="userType"></param>
            <param name="isCache"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.GetUserInfo(System.Int32,System.Boolean)">
            <summary>
            根据用户ID获取用户注册详细信息
            </summary>
            <param name="userId"></param>
            <param name="isCache"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.GetUser(System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            获得用户信息
            </summary>
            <param name="userID"></param>
            <param name="username"></param>
            <param name="isOnline">如果传入此参数，系统将更新用户在线时间</param>
            <param name="isEditable"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.GetAnonymousUser(System.Int32)">
            <summary>
            获得匿名用户
            </summary>
            <param name="siteSettingsID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.GetUsers(System.Int32[],System.Boolean)">
            <summary>
            根据用户ID获取用户列表
            </summary>
            <param name="userIds"></param>
            <param name="isCache"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.GetUsers(System.String,System.Boolean)">
            <summary>
            根据用户ID获取用户列表
            </summary>
            <param name="userIds"></param>
            <param name="isCache"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.GetUsersForName(System.String[],System.Boolean)">
            <summary>
            根据用户帐号和用户类型获取用户信息。
            </summary>
            <param name="userNames"></param>
            <param name="isCache"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.GetUsersForName(System.String[],System.String,System.Boolean)">
            <summary>
            根据用户类型获取用户信息。
            </summary>
            <param name="userNames"></param>
            <param name="userType"></param>
            <param name="isCache"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.GetUsersInfo(System.Int32[],System.Boolean)">
            <summary>
            根据用户ID获取用户注册详细信息
            </summary>
            <param name="userIds"></param>
            <param name="isCache"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.GetUsersInfo(System.String,System.Boolean)">
            <summary>
            根据用户ID获取用户注册详细信息
            </summary>
            <param name="userIds"></param>
            <param name="isCache"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.GetUsersForEmail(System.String)">
            <summary>
            根据用户邮箱获取用户信息
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.GetUsersForEmail(System.String[])">
            <summary>
            根据用户邮箱获取用户信息
            </summary>
            <param name="emails"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.GetHeadPortrait(System.Int32)">
            <summary>
            获得用户头像
            </summary>
            <param name="userID">用户ID</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.GetNickName(System.Int32)">
            <summary>
            获得用户昵称
            </summary>
            <param name="userID">用户ID</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.GetUserIDByName(System.String,System.String)">
            <summary>
            读取用户ID
            </summary>
            <param name="username"></param>
            <param name="userType">用户类型，默认为NULL</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.GetUserNameByEmail(System.String)">
            <summary>
            根据Email获取用户名
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.IsUserLogin(System.Int32)">
            <summary>
            判断指定用户是否登陆
            从本地缓存中读取用户信息，检查是否已经登录
            如果本地缓存中没有，则从数据库中提取并检查
            </summary>
            <param name="userID">用户ID</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.GetUserForPassID(System.String,System.String)">
            <summary>
            根据PassportID获得用户信息
            </summary>
            <param name="spPassId"></param>
            <param name="userType"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.GetUserForPassID(System.String,System.String,System.Boolean)">
            <summary>
            根据PassportID获得用户信息
            </summary>
            <param name="spPassId"></param>
            <param name="userType"></param>
            <param name="isCache"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.LoginSign(Framework.Components.UserShortInfo,System.Int32)">
            <summary>
            记录用户信息到 Cookie中
            </summary>
        </member>
        <member name="M:Framework.Components.IPassPort.ValidUser(System.String,System.String,System.String)">
            <summary>
            验证用户登陆
            </summary>
            <param name="userName"></param>
            <param name="userPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.ValidUser(System.Int32,System.String,System.String)">
            <summary>
            验证用户登陆
            </summary>
            <param name="userName"></param>
            <param name="userPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.ValidUser(System.String,System.String,System.String,System.String)">
            <summary>
            验证用户登陆
            </summary>
            <param name="userName"></param>
            <param name="userPassword"></param>
            <param name="userType"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.ValidUser(System.String,System.String,System.String,Framework.Components.UserShortInfo@)">
            <summary>
            验证用户登陆
            </summary>
            <param name="userName"></param>
            <param name="userPassword"></param>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.ValidUser(System.String,System.String,System.String,System.String,Framework.Components.UserShortInfo@)">
            <summary>
            验证用户登陆
            </summary>
            <param name="userName">用户名</param>
            <param name="userPassword">用户密码</param>
            <param name="userType">站点类型</param>
            <param name="user">返回用户</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.ValidUser(System.String,System.String,System.String,Framework.Components.UserShortInfo@,System.Boolean,System.DateTime)">
            <summary>
            
            </summary>
            <param name="userName"></param>
            <param name="userPassword"></param>
            <param name="user"></param>
            <param name="writeCookie"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.GetUserPasswordFormat(System.String,System.String)">
            <summary>
            获得用户密文格式
            </summary>
            <param name="username"></param>
            <param name="userType"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.ChangeUserLoginPortal(System.Int32,System.Int32)">
            <summary>
            更换用户登录的PortalID
            </summary>
            <param name="userID"></param>
            <param name="portalID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.Logout">
            <summary>
            注销
            </summary>
        </member>
        <member name="M:Framework.Components.IPassPort.IsAdministrator(System.Int32)">
            <summary>
            是否系统管理员
            </summary>
            <param name="userID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.IsPortalAdministrator(System.Int32,System.Int32)">
            <summary>
            是否站点的系统管理员
            </summary>
            <param name="userID"></param>
            <param name="portalID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.IsCustomerAdministrator(System.Int32,System.Int32)">
            <summary>
            是否客户的系统管理员
            </summary>
            <param name="userID"></param>
            <param name="customerID"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Components.IPassPort.IsCustomerUser(System.Int32,System.Int32)">
            <summary>
            是否客户的操作员
            </summary>
            <param name="userID"></param>
            <param name="customerID"></param>
            <returns></returns>
        </member>
        <member name="P:Framework.Components.IPassPort.IsLogin">
            <summary>
            是否已经登录
            </summary>
        </member>
        <member name="P:Framework.Components.IPassPort.UserID">
            <summary>
            用户ＩＤ
            </summary>
        </member>
        <member name="P:Framework.Components.IPassPort.UserName">
            <summary>
            用户名称
            </summary>
        </member>
        <member name="P:Framework.Components.IPassPort.VisitNo">
            <summary>
            访客号
            </summary>
        </member>
        <member name="P:Framework.Components.IPassPort.SiteID">
            <summary>
            站点ＩＤ
            </summary>
        </member>
        <member name="P:Framework.Components.IPassPort.NickName">
            <summary>
            昵称
            </summary>
        </member>
        <member name="P:Framework.Components.IPassPort.HeadPortrait">
            <summary>
            头像
            </summary>
        </member>
        <member name="T:Framework.Enumerations.GroupUserLevel">
            <summary>
            圈子用户级别
            </summary>
        </member>
        <member name="F:Framework.Enumerations.GroupUserLevel.Anonymous">
            <summary>
            匿名用户
            </summary>
        </member>
        <member name="F:Framework.Enumerations.GroupUserLevel.NonMember">
            <summary>
            非圈子成员
            </summary>
        </member>
        <member name="F:Framework.Enumerations.GroupUserLevel.Member">
            <summary>
            圈子成员
            </summary>
        </member>
        <member name="F:Framework.Enumerations.GroupUserLevel.Administrator">
            <summary>
            圈子管理员
            </summary>
        </member>
        <member name="F:Framework.Enumerations.GroupUserLevel.Creator">
            <summary>
            圈子创建者
            </summary>
        </member>
        <member name="M:Framework.Text.CRCModbus.#ctor">
            <summary>
            构造对应表
            </summary>
        </member>
        <member name="M:Framework.Text.CRCModbus.crc16(System.Byte[],System.Int32)">
            <summary>
            国标算法
            </summary>
            <param name="modbusframe">数据</param>
            <param name="Length">数据字节长度</param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Framework.Text.CRCModbus.CRCEfficacy(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="T:Framework.Components.VisitRecord">
            <summary>
            用户访问信息
            </summary>
        </member>
        <member name="F:Framework.Components.VisitRecord.IP">
            <summary>
            IP
            </summary>
        </member>
        <member name="F:Framework.Components.VisitRecord.ReferAppend">
            <summary>
            ReferAppend
            </summary>
        </member>
        <member name="T:Framework.ExcelData.ExcelDAL">
            <summary>
            Excel文件相关的操作
            及Excel文件模板处理
            </summary>
        </member>
        <member name="T:CompressionSink.myClientSink">
            <summary>
            客户端接收器
            </summary>
        </member>
        <member name="T:CompressionSink.CompressionHelper">
            <summary>
            压缩解压的方法
            </summary>
        </member>
        <member name="M:CompressionSink.CompressionHelper.getCompressedStreamCopy(System.IO.Stream)">
            <summary>
            refactor  by zendy
            </summary>
            <param name="inStream"></param>
            <returns></returns>
        </member>
        <member name="M:CompressionSink.CompressionHelper.getUncompressedStreamCopy(System.IO.Stream)">
            <summary>
            refactor  by zendy
            </summary>
            <param name="inStream"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Components.OperateLogSet">
            <summary>
            用户操作记录集合。
            </summary>
        </member>
        <member name="T:Framework.Caching.ExeHandler`1">
            <summary>
            Delegate
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Framework.Caching.CacheHelper">
            <summary>
            缓存管理类
            </summary>
        </member>
        <member name="F:Framework.Caching.CacheHelper.DayFactor">
            <summary>
            日缓存因子
            </summary>
        </member>
        <member name="F:Framework.Caching.CacheHelper.HourFactor">
            <summary>
            小时缓存因子
            </summary>
        </member>
        <member name="F:Framework.Caching.CacheHelper.MinuteFactor">
            <summary>
            分缓存因子
            </summary>
        </member>
        <member name="F:Framework.Caching.CacheHelper.SecondFactor">
            <summary>
            秒缓存因子
            </summary>
        </member>
        <member name="F:Framework.Caching.CacheHelper.Factor">
            <summary>
            缓存因子
            </summary>
        </member>
        <member name="F:Framework.Caching.CacheHelper.providers">
            <summary>
            缓存提供者集合
            </summary>
        </member>
        <member name="F:Framework.Caching.CacheHelper.caches">
            <summary>
            缓存操作对象集合
            </summary>
        </member>
        <member name="F:Framework.Caching.CacheHelper.defaultProvider">
            <summary>
            默认缓存提供者
            </summary>
        </member>
        <member name="F:Framework.Caching.CacheHelper.tagCache">
            <summary>
            标签缓存对象
            </summary>
        </member>
        <member name="F:Framework.Caching.CacheHelper.tagLock">
            <summary>
            标签锁
            </summary>
        </member>
        <member name="M:Framework.Caching.CacheHelper.#cctor">
            <summary>
            确保当前HttpContext只有一个Cache实例
            </summary>
        </member>
        <member name="M:Framework.Caching.CacheHelper.Remove(System.String)">
            <summary>
            根据键值移除Cache
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Framework.Caching.CacheHelper.RemoveLike(System.String)">
            <summary>
            根据某个字串，查找以这个字串开始的所有键值，并清除相关缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Caching.CacheHelper.Insert(System.String,System.Object)">
            <summary>
            把对象加载到Cache
            </summary>
            <param name="key">键</param>
            <param name="obj">对象</param>
        </member>
        <member name="M:Framework.Caching.CacheHelper.Insert(System.String,System.Object,System.Int32)">
            <summary>
            把对象加载到Cache,附加过期时间信息
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:Framework.Caching.CacheHelper.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)">
            <summary>
            把对象加载到Cache,附加缓存依赖信息
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="dep"></param>
        </member>
        <member name="M:Framework.Caching.CacheHelper.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.Int32)">
            <summary>
            把对象加载到Cache,附加缓存依赖和过期时间(多少秒后过期)
            (默认优先级为Normal)
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="dep"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:Framework.Caching.CacheHelper.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.Int32,System.Web.Caching.CacheItemPriority)">
            <summary>
            把对象加载到Cache,附加缓存依赖和过期时间(多少秒后过期)及优先级
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="dep"></param>
            <param name="seconds"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Framework.Caching.CacheHelper.Insert(System.String,System.Object,System.DateTime)">
            <summary>
            把对象加载到Cache,附加过期日期时间
            </summary>
            <param name="key">键值</param>
            <param name="obj">缓存对象</param>
            <param name="expiresAt">过期具体日期</param>
        </member>
        <member name="M:Framework.Caching.CacheHelper.Max(System.String,System.Object)">
            <summary>
            把对象加载到Cache，缓存最长允许时间
            </summary>
            <param name="key">键值</param>
            <param name="obj">缓存对象</param>
        </member>
        <member name="M:Framework.Caching.CacheHelper.Max(System.String,System.Object,System.Web.Caching.CacheDependency)">
            <summary>
            把对象加到缓存,并把过期时间设为最大值,附加缓存依赖信息
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="dep"></param>
        </member>
        <member name="M:Framework.Caching.CacheHelper.Get(System.String)">
            <summary>
            根据键获取被缓存的对象
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Caching.CacheHelper.Get``1(System.String)">
            <summary>
            根据键获取被缓存的泛型对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Caching.CacheHelper.Get``1(Framework.Caching.ExeHandler{``0},System.String,System.Int32)">
            <summary>
            根据键获取被缓存的对象（如果不存在，则执行exeH，并进行缓存）
            ---------------
            创建：谢月甲，20080428
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="exeH">获取数据的函数指针（当没有缓存的时候执行）</param>
            <param name="cacheKey">缓存键</param>
            <param name="seconds">需要缓存exeH的执行结果的时间</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Caching.CacheHelper.Remove(System.String,System.String)">
            <summary>
            根据键值移除Cache
            </summary>
            <param name="key">键</param>
            <param name="providerName">缓存提供者名称</param>
        </member>
        <member name="M:Framework.Caching.CacheHelper.Insert(System.String,System.String,System.Object)">
            <summary>
            把对象加载到Cache
            </summary>
            <param name="key">键</param>
            <param name="obj">对象</param>
            <param name="providerName">缓存提供者名称</param>
        </member>
        <member name="M:Framework.Caching.CacheHelper.Insert(System.String,System.String,System.Object,System.Int32)">
            <summary>
            把对象加载到Cache,附加过期时间信息
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="seconds"></param>
            <param name="providerName">缓存提供者名称</param>
        </member>
        <member name="M:Framework.Caching.CacheHelper.Insert(System.String,System.String,System.Object,System.DateTime)">
            <summary>
            把对象加载到Cache,附加过期日期时间
            </summary>
            <param name="key">键值</param>
            <param name="obj">缓存对象</param>
            <param name="expiresAt">过期具体日期</param>
            <param name="providerName">缓存提供者名称</param>
        </member>
        <member name="M:Framework.Caching.CacheHelper.Max(System.String,System.String,System.Object)">
            <summary>
            把对象加载到Cache，缓存最长允许时间
            </summary>
            <param name="key">键值</param>
            <param name="obj">缓存对象</param>
            <param name="providerName">缓存提供者名称</param>
        </member>
        <member name="M:Framework.Caching.CacheHelper.Get(System.String,System.String)">
            <summary>
            根据键获取被缓存的对象
            </summary>
            <param name="key"></param>
            <returns></returns>
            <param name="providerName">缓存提供者名称</param>
        </member>
        <member name="M:Framework.Caching.CacheHelper.Get``1(System.String,System.String)">
            <summary>
            根据键获取被缓存的泛型对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="providerName">缓存提供者名称</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Caching.CacheHelper.Get``1(System.String,Framework.Caching.ExeHandler{``0},System.String,System.Int32)">
            <summary>
            根据键获取被缓存的对象（如果不存在，则执行exeH，并进行缓存）
            ---------------
            创建：谢月甲，20080428
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="exeH">获取数据的函数指针（当没有缓存的时候执行）</param>
            <param name="cacheKey">缓存键</param>
            <param name="seconds">需要缓存exeH的执行结果的时间</param>
            <param name="providerName">缓存提供者名称</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Caching.CacheHelper.GetCacheProvider(System.String,Framework.Caching.ICache@)">
            <summary>
            获取缓存实例
            </summary>
            <param name="providerName">缓存提供者名称</param>
            <param name="cache">返回缓存</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Caching.CacheHelper.ReSetFactor(System.Int32)">
            <summary>
            重新设置缓存因子 
            </summary>
            <param name="cacheFactor"></param>
        </member>
        <member name="M:Framework.Caching.CacheHelper.SecondFactorCalculate(System.Int32)">
            <summary>
            Return int of seconds * SecondFactor
            </summary>
        </member>
        <member name="M:Framework.Caching.CacheHelper.AddTags(System.String,System.String[])">
            <summary>
            添加标签
            </summary>
            <param name="name">标签名称</param>
            <param name="keys">缓存键</param>
        </member>
        <member name="M:Framework.Caching.CacheHelper.RemoveByTag(System.String,System.String[])">
            <summary>
            删除缓存
            </summary>
            <param name="providerName">缓存提供者名称</param>
            <param name="tags">标签</param>
        </member>
        <member name="M:Framework.Caching.CacheHelper.GetCacheKey(System.String,System.String)">
            <summary>
            获取格式化的缓存键值
            </summary>
            <param name="providerName">缓存提供者名称</param>
            <param name="key">缓存键值</param>
            <returns>格式化后的缓存键值</returns>
        </member>
        <member name="M:Framework.Caching.CacheHelper.Get``1(Framework.Caching.CacheHelper.CacheGetterDelegate{``0},Framework.Caching.CacheHelper.CacheDataProviderDelegate{``0},Framework.Caching.CacheHelper.CacheSetterDelegate{``0},System.Boolean)">
            <summary>
            获取数据
            </summary>
            <typeparam name="TData">要获取的数据类型</typeparam>
            <param name="cacheGetter">缓存数据获取代理</param>
            <param name="dataProvider">缓存原始数据代理</param>
            <param name="cacheSetter">缓存数据设置代理</param>
            <param name="useCache">是否使用缓存</param>
            <returns>数据</returns>
        </member>
        <member name="T:Framework.Caching.CacheHelper.CacheGetterDelegate`1">
            <summary>
            缓存数据获取代理
            </summary>
            <typeparam name="TData">要获取的数据类型</typeparam>
            <param name="data">数据对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:Framework.Caching.CacheHelper.CacheSetterDelegate`1">
            <summary>
            缓存数据设置代理
            </summary>
            <typeparam name="TData">要获取的数据类型</typeparam>
            <param name="data">数据对象</param>
        </member>
        <member name="T:Framework.Caching.CacheHelper.CacheDataProviderDelegate`1">
            <summary>
            缓存原始数据代理
            </summary>
            <typeparam name="TData">要获取的数据类型</typeparam>
            <returns>数据对象</returns>
        </member>
        <member name="T:Framework.Account.Account">
            <summary>
            帐户组件
            </summary>
        </member>
        <member name="M:Framework.Account.Account.CalaculatePrices(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            划价
            </summary>
            <param name="xmlOfDownloadPackage">符合标准的歌曲列表字串,符合PaymentPackage格式</param>
            <param name="userid">当前操作用户ID</param>
            <param name="type">类型，保留，默认传0</param>
            <param name="needSave">是否需要记录在数据库中，在即将下载时，需要记录到数据库中，其它时间没有必要记录在数据库中</param>
            <param name="snCode">加密代码，用于验证提交数据是否合法</param>
            <returns>类似传入的参数，返回有价格及帐户信息的标准列表XML。</returns>
        </member>
        <member name="M:Framework.Account.Account.DownloadSuccess(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            下载成功（或者使用成功）后发送确认支付的信息
            此功能前题是将用户需要下载的列表预先保存在数据库中。
            </summary>
            <param name="userID">下载的用户ID</param>
            <param name="itemID">下载对像的ID，指最底层的对像，例如音乐包不是最底层的对像。</param>
            <param name="itemType">下载对像类型：现在有song,其它类型将在后来逐步增加。</param>
            <param name="source">来源，即发出此扣费请求的来源，如小喇叭。</param>
            <param name="snCode">加密验证码</param>
            <returns></returns>
        </member>
    </members>
</doc>
